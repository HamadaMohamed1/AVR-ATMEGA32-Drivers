
my_atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000042b0  00004344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800094  00800094  00004378  2**0
                  ALLOC
  3 .stab         00005e8c  00000000  00000000  00004378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003705  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d909  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000da69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000fc3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00010d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00011cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00012102  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_1>
       8:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__vector_2>
       c:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <main>
      8a:	0c 94 56 21 	jmp	0x42ac	; 0x42ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e6       	ldi	r22, 0x63	; 99
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <uart_initialize>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType uart_initialize(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <uart_initialize+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/* Calculate UBRR value for the desired baud rate
       ubrr_value = (F_CPU / (16 * BAUD_RATE)) - 1;
       if BAUD_RATE ==9600 then ubrr_value = 51
    */
	uint16 Local_Baud_Rate = 51;
     ca8:	83 e3       	ldi	r24, 0x33	; 51
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01

	UBRRL =(uint8)Local_Baud_Rate;
     cb0:	e9 e2       	ldi	r30, 0x29	; 41
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	80 83       	st	Z, r24
	UBRRH =(uint8)(Local_Baud_Rate>>8);
     cb8:	e0 e4       	ldi	r30, 0x40	; 64
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	89 2f       	mov	r24, r25
     cc2:	99 27       	eor	r25, r25
     cc4:	80 83       	st	Z, r24


	/*Normal speed*/
	CLEAR_BIT(UCSRA,U2X);
     cc6:	ab e2       	ldi	r26, 0x2B	; 43
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	eb e2       	ldi	r30, 0x2B	; 43
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8d 7f       	andi	r24, 0xFD	; 253
     cd2:	8c 93       	st	X, r24
	/*Disable multi-processor*/
	CLEAR_BIT(UCSRA,MPCM);
     cd4:	ab e2       	ldi	r26, 0x2B	; 43
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	eb e2       	ldi	r30, 0x2B	; 43
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8e 7f       	andi	r24, 0xFE	; 254
     ce0:	8c 93       	st	X, r24
	/*Enable receiver and transmitter*/
	SET_BIT(UCSRB,RXEN);
     ce2:	aa e2       	ldi	r26, 0x2A	; 42
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ea e2       	ldi	r30, 0x2A	; 42
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 61       	ori	r24, 0x10	; 16
     cee:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     cf0:	aa e2       	ldi	r26, 0x2A	; 42
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ea e2       	ldi	r30, 0x2A	; 42
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	8c 93       	st	X, r24
	/*8 Bits Data*/
	SET_BIT(UCSRC,UCSZ1);
     cfe:	a0 e4       	ldi	r26, 0x40	; 64
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e0 e4       	ldi	r30, 0x40	; 64
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	84 60       	ori	r24, 0x04	; 4
     d0a:	8c 93       	st	X, r24
	SET_BIT(UCSRC,UCSZ0);
     d0c:	a0 e4       	ldi	r26, 0x40	; 64
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2);
     d1a:	aa e2       	ldi	r26, 0x2A	; 42
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ea e2       	ldi	r30, 0x2A	; 42
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8b 7f       	andi	r24, 0xFB	; 251
     d26:	8c 93       	st	X, r24
	/*Asynchronous mode*/
	CLEAR_BIT(UCSRC,UMSEL);
     d28:	a0 e4       	ldi	r26, 0x40	; 64
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e0 e4       	ldi	r30, 0x40	; 64
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	8c 93       	st	X, r24
	/*Disable parity*/
	CLEAR_BIT(UCSRC,UPM0);
     d36:	a0 e4       	ldi	r26, 0x40	; 64
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e0 e4       	ldi	r30, 0x40	; 64
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8f 7e       	andi	r24, 0xEF	; 239
     d42:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1);
     d44:	a0 e4       	ldi	r26, 0x40	; 64
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e0 e4       	ldi	r30, 0x40	; 64
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 7d       	andi	r24, 0xDF	; 223
     d50:	8c 93       	st	X, r24
	/*2 stop bits*/
	SET_BIT(UCSRC,USBS);
     d52:	a0 e4       	ldi	r26, 0x40	; 64
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e0 e4       	ldi	r30, 0x40	; 64
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 60       	ori	r24, 0x08	; 8
     d5e:	8c 93       	st	X, r24

	return E_OK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <uart_send_char>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType uart_send_char(uint8 data)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while(READ_BIT(UCSRA,UDRE)==0);
     d78:	eb e2       	ldi	r30, 0x2B	; 43
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	82 95       	swap	r24
     d80:	86 95       	lsr	r24
     d82:	87 70       	andi	r24, 0x07	; 7
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	81 70       	andi	r24, 0x01	; 1
     d8a:	90 70       	andi	r25, 0x00	; 0
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	a1 f3       	breq	.-24     	; 0xd78 <uart_send_char+0xc>
	/* Put data into buffer, sends the data */
	UDR = data;
     d90:	ec e2       	ldi	r30, 0x2C	; 44
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	80 83       	st	Z, r24
	return E_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
}
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <uart_receive_char>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType uart_receive_char(uint8 *data)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <uart_receive_char+0x6>
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	9b 83       	std	Y+3, r25	; 0x03
     db0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == data)
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <uart_receive_char+0x20>
	{
		ret = E_NOT_OK;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <uart_receive_char+0x3a>
	}
	else
	{
		/* Wait for data to be received */
		while(READ_BIT(UCSRA,RXC)==0);
     dc2:	eb e2       	ldi	r30, 0x2B	; 43
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	88 23       	and	r24, r24
     dca:	dc f7       	brge	.-10     	; 0xdc2 <uart_receive_char+0x20>
		/* Get received data from buffer */
		*data = UDR;
     dcc:	ec e2       	ldi	r30, 0x2C	; 44
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	ea 81       	ldd	r30, Y+2	; 0x02
     dd4:	fb 81       	ldd	r31, Y+3	; 0x03
     dd6:	80 83       	st	Z, r24
		ret = E_OK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <uart_send_string>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType uart_send_string(const uint8 *str)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <uart_send_string+0x6>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <uart_send_string+0x8>
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9d 83       	std	Y+5, r25	; 0x05
     dfa:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_OK;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == str)
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	11 f4       	brne	.+4      	; 0xe0c <uart_send_string+0x22>
	{
		ret = E_NOT_OK;
     e08:	1b 82       	std	Y+3, r1	; 0x03
     e0a:	23 c0       	rjmp	.+70     	; 0xe52 <uart_send_string+0x68>
	}
	else
	{
		uint8 *local_str = str;
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
		/* Wait for empty transmit buffer */
		while(READ_BIT(UCSRA,UDRE)==0);
     e14:	eb e2       	ldi	r30, 0x2B	; 43
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	82 95       	swap	r24
     e1c:	86 95       	lsr	r24
     e1e:	87 70       	andi	r24, 0x07	; 7
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	81 70       	andi	r24, 0x01	; 1
     e26:	90 70       	andi	r25, 0x00	; 0
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	a1 f3       	breq	.-24     	; 0xe14 <uart_send_string+0x2a>
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <uart_send_string+0x5a>
		while(*local_str !='\0')
		{
			uart_send_char(*local_str++);
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	20 81       	ld	r18, Z
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	82 2f       	mov	r24, r18
     e40:	0e 94 b6 06 	call	0xd6c	; 0xd6c <uart_send_char>
	else
	{
		uint8 *local_str = str;
		/* Wait for empty transmit buffer */
		while(READ_BIT(UCSRA,UDRE)==0);
		while(*local_str !='\0')
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	80 81       	ld	r24, Z
     e4a:	88 23       	and	r24, r24
     e4c:	81 f7       	brne	.-32     	; 0xe2e <uart_send_string+0x44>
		{
			uart_send_char(*local_str++);
		}
		ret = E_OK;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	8b 83       	std	Y+3, r24	; 0x03
	}
	return ret;
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <uart_receive_string>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType uart_receive_string(uint8 *str)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <uart_receive_string+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <uart_receive_string+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == str)
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	11 f4       	brne	.+4      	; 0xe84 <uart_receive_string+0x20>
	{
		ret = E_NOT_OK;
     e80:	1a 82       	std	Y+2, r1	; 0x02
     e82:	2d c0       	rjmp	.+90     	; 0xede <uart_receive_string+0x7a>
	}
	else
	{
		uint8 i = 0;
     e84:	19 82       	std	Y+1, r1	; 0x01
		uart_receive_char(&str[i]);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	0e 94 d1 06 	call	0xda2	; 0xda2 <uart_receive_char>
     e98:	0c c0       	rjmp	.+24     	; 0xeb2 <uart_receive_string+0x4e>
		while(str[i] != '\r')
		{
			i++;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	89 83       	std	Y+1, r24	; 0x01
			uart_receive_char(&str[i]);
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	0e 94 d1 06 	call	0xda2	; 0xda2 <uart_receive_char>
	}
	else
	{
		uint8 i = 0;
		uart_receive_char(&str[i]);
		while(str[i] != '\r')
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	fc 01       	movw	r30, r24
     ebe:	e2 0f       	add	r30, r18
     ec0:	f3 1f       	adc	r31, r19
     ec2:	80 81       	ld	r24, Z
     ec4:	8d 30       	cpi	r24, 0x0D	; 13
     ec6:	49 f7       	brne	.-46     	; 0xe9a <uart_receive_string+0x36>
		{
			i++;
			uart_receive_char(&str[i]);
		}
		str[i] = '\0';
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	fc 01       	movw	r30, r24
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	10 82       	st	Z, r1
		ret = E_OK;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <SPI_Init>:

#include "spi.h"


// Initialize SPI as master or slave
void SPI_Init(void) {
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
        DDRB |= (1 << DDB2) | (1 << DDB3) | (1 << DDB5);

        // Enable SPI, Set as Master, and clock = F_CPU/16
        SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
#elif SPI_MODE==SlAVE       // Set MISO as output, all others as input
        DDRB |= (1 << DDB4);
     ef6:	a7 e3       	ldi	r26, 0x37	; 55
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e7 e3       	ldi	r30, 0x37	; 55
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 61       	ori	r24, 0x10	; 16
     f02:	8c 93       	st	X, r24

        // Enable SPI
        SPCR = (1 << SPE);
     f04:	ed e2       	ldi	r30, 0x2D	; 45
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 e4       	ldi	r24, 0x40	; 64
     f0a:	80 83       	st	Z, r24
#endif

}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <SPI_Transmit>:

// Transmit data through SPI
void SPI_Transmit(uint8_t data) {
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	89 83       	std	Y+1, r24	; 0x01
    // Start transmission
    SPDR = data;
     f1e:	ef e2       	ldi	r30, 0x2F	; 47
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24

    // Wait for transmission complete
    while (!(SPSR & (1 << SPIF)))
     f26:	ee e2       	ldi	r30, 0x2E	; 46
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 23       	and	r24, r24
     f2e:	dc f7       	brge	.-10     	; 0xf26 <SPI_Transmit+0x14>
        ;
}
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <SPI_Receive>:

// Receive data through SPI
uint8_t SPI_Receive() {
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
    // Wait for reception complete
    while (!(SPSR & (1 << SPIF)))
     f40:	ee e2       	ldi	r30, 0x2E	; 46
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	88 23       	and	r24, r24
     f48:	dc f7       	brge	.-10     	; 0xf40 <SPI_Receive+0x8>
        ;

    // Return received data
    return SPDR;
     f4a:	ef e2       	ldi	r30, 0x2F	; 47
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <Interrupt_INTx_Init>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType Interrupt_INTx_Init(const interrupt_INTx_t *int_obj)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	2a 97       	sbiw	r28, 0x0a	; 10
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == int_obj)
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	11 f4       	brne	.+4      	; 0xf7e <Interrupt_INTx_Init+0x28>
	{
		ret = E_NOT_OK;
     f7a:	19 82       	std	Y+1, r1	; 0x01
     f7c:	3e c1       	rjmp	.+636    	; 0x11fa <Interrupt_INTx_Init+0x2a4>
	}
	else
	{
		ret = gie_interrupt_enable();
     f7e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <gie_interrupt_enable>
     f82:	89 83       	std	Y+1, r24	; 0x01
		pin_config_t int_pin = {	.port = int_obj->INTx_port ,
									.pin = int_obj->INTx_pin ,
									.direction = GPIO_DIRECTION_OUTPUT
		};
     f84:	eb 81       	ldd	r30, Y+3	; 0x03
     f86:	fc 81       	ldd	r31, Y+4	; 0x04
     f88:	84 81       	ldd	r24, Z+4	; 0x04
     f8a:	8f 70       	andi	r24, 0x0F	; 15
     f8c:	98 2f       	mov	r25, r24
     f8e:	97 70       	andi	r25, 0x07	; 7
     f90:	eb 81       	ldd	r30, Y+3	; 0x03
     f92:	fc 81       	ldd	r31, Y+4	; 0x04
     f94:	84 81       	ldd	r24, Z+4	; 0x04
     f96:	82 95       	swap	r24
     f98:	8f 70       	andi	r24, 0x0F	; 15
     f9a:	28 2f       	mov	r18, r24
     f9c:	27 70       	andi	r18, 0x07	; 7
     f9e:	1a 82       	std	Y+2, r1	; 0x02
     fa0:	97 70       	andi	r25, 0x07	; 7
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	88 7f       	andi	r24, 0xF8	; 248
     fa6:	89 2b       	or	r24, r25
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	82 2f       	mov	r24, r18
     fac:	87 70       	andi	r24, 0x07	; 7
     fae:	98 2f       	mov	r25, r24
     fb0:	99 0f       	add	r25, r25
     fb2:	99 0f       	add	r25, r25
     fb4:	99 0f       	add	r25, r25
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	87 7c       	andi	r24, 0xC7	; 199
     fba:	89 2b       	or	r24, r25
     fbc:	8a 83       	std	Y+2, r24	; 0x02
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	8a 83       	std	Y+2, r24	; 0x02

		ret = gpio_pin_intialize(&int_pin);
     fc4:	ce 01       	movw	r24, r28
     fc6:	02 96       	adiw	r24, 0x02	; 2
     fc8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
     fcc:	89 83       	std	Y+1, r24	; 0x01

		if(EXTERNAL_INTERRUPT_INT0==int_obj->INTx_src)
     fce:	eb 81       	ldd	r30, Y+3	; 0x03
     fd0:	fc 81       	ldd	r31, Y+4	; 0x04
     fd2:	83 81       	ldd	r24, Z+3	; 0x03
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <Interrupt_INTx_Init+0x84>
     fd8:	6b c0       	rjmp	.+214    	; 0x10b0 <Interrupt_INTx_Init+0x15a>
		{
			ret = INT0_SetInterruptHandler(int_obj);
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	0e 94 4f 09 	call	0x129e	; 0x129e <INT0_SetInterruptHandler>
     fe2:	89 83       	std	Y+1, r24	; 0x01

			switch(int_obj->edge)
     fe4:	eb 81       	ldd	r30, Y+3	; 0x03
     fe6:	fc 81       	ldd	r31, Y+4	; 0x04
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3a 87       	std	Y+10, r19	; 0x0a
     ff0:	29 87       	std	Y+9, r18	; 0x09
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	21 f1       	breq	.+72     	; 0x1044 <Interrupt_INTx_Init+0xee>
     ffc:	29 85       	ldd	r18, Y+9	; 0x09
     ffe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1000:	22 30       	cpi	r18, 0x02	; 2
    1002:	31 05       	cpc	r19, r1
    1004:	2c f4       	brge	.+10     	; 0x1010 <Interrupt_INTx_Init+0xba>
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	61 f0       	breq	.+24     	; 0x1026 <Interrupt_INTx_Init+0xd0>
    100e:	47 c0       	rjmp	.+142    	; 0x109e <Interrupt_INTx_Init+0x148>
    1010:	29 85       	ldd	r18, Y+9	; 0x09
    1012:	3a 85       	ldd	r19, Y+10	; 0x0a
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	21 f1       	breq	.+72     	; 0x1062 <Interrupt_INTx_Init+0x10c>
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	91 05       	cpc	r25, r1
    1022:	71 f1       	breq	.+92     	; 0x1080 <Interrupt_INTx_Init+0x12a>
    1024:	3c c0       	rjmp	.+120    	; 0x109e <Interrupt_INTx_Init+0x148>
			{
				case INTERRUPT_LOW_LEVEL :
						CLEAR_BIT(MCUCR,ISC00);
    1026:	a5 e5       	ldi	r26, 0x55	; 85
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e5       	ldi	r30, 0x55	; 85
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR,ISC01);
    1034:	a5 e5       	ldi	r26, 0x55	; 85
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e5 e5       	ldi	r30, 0x55	; 85
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	8c 93       	st	X, r24
    1042:	2e c0       	rjmp	.+92     	; 0x10a0 <Interrupt_INTx_Init+0x14a>
				break;
				case INTERRUPT_ANY_LOGICAL_CHANGE :
						SET_BIT(MCUCR,ISC00);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR,ISC01);
    1052:	a5 e5       	ldi	r26, 0x55	; 85
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e5       	ldi	r30, 0x55	; 85
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	8c 93       	st	X, r24
    1060:	1f c0       	rjmp	.+62     	; 0x10a0 <Interrupt_INTx_Init+0x14a>
				break;
				case INTERRUPT_FALLING_EDGE :
						CLEAR_BIT(MCUCR,ISC00);
    1062:	a5 e5       	ldi	r26, 0x55	; 85
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e5 e5       	ldi	r30, 0x55	; 85
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	8c 93       	st	X, r24
						SET_BIT(MCUCR,ISC01);
    1070:	a5 e5       	ldi	r26, 0x55	; 85
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e5       	ldi	r30, 0x55	; 85
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	8c 93       	st	X, r24
    107e:	10 c0       	rjmp	.+32     	; 0x10a0 <Interrupt_INTx_Init+0x14a>
				break;
				case INTERRUPT_RISING_EDGE :
						SET_BIT(MCUCR,ISC00);
    1080:	a5 e5       	ldi	r26, 0x55	; 85
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e5 e5       	ldi	r30, 0x55	; 85
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	81 60       	ori	r24, 0x01	; 1
    108c:	8c 93       	st	X, r24
						SET_BIT(MCUCR,ISC01);
    108e:	a5 e5       	ldi	r26, 0x55	; 85
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e5       	ldi	r30, 0x55	; 85
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	82 60       	ori	r24, 0x02	; 2
    109a:	8c 93       	st	X, r24
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <Interrupt_INTx_Init+0x14a>
				break;
				default :
						ret = E_NOT_OK;
    109e:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
			EXT_INT0_ENABLE();
    10a0:	ab e5       	ldi	r26, 0x5B	; 91
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e5       	ldi	r30, 0x5B	; 91
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	8c 93       	st	X, r24
    10ae:	a5 c0       	rjmp	.+330    	; 0x11fa <Interrupt_INTx_Init+0x2a4>
		}
		else if(EXTERNAL_INTERRUPT_INT1==int_obj->INTx_src)
    10b0:	eb 81       	ldd	r30, Y+3	; 0x03
    10b2:	fc 81       	ldd	r31, Y+4	; 0x04
    10b4:	83 81       	ldd	r24, Z+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <Interrupt_INTx_Init+0x166>
    10ba:	6b c0       	rjmp	.+214    	; 0x1192 <Interrupt_INTx_Init+0x23c>
		{
			ret = INT1_SetInterruptHandler(int_obj);
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <INT1_SetInterruptHandler>
    10c4:	89 83       	std	Y+1, r24	; 0x01

			switch(int_obj->edge)
    10c6:	eb 81       	ldd	r30, Y+3	; 0x03
    10c8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	38 87       	std	Y+8, r19	; 0x08
    10d2:	2f 83       	std	Y+7, r18	; 0x07
    10d4:	8f 81       	ldd	r24, Y+7	; 0x07
    10d6:	98 85       	ldd	r25, Y+8	; 0x08
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	21 f1       	breq	.+72     	; 0x1126 <Interrupt_INTx_Init+0x1d0>
    10de:	2f 81       	ldd	r18, Y+7	; 0x07
    10e0:	38 85       	ldd	r19, Y+8	; 0x08
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <Interrupt_INTx_Init+0x19c>
    10e8:	8f 81       	ldd	r24, Y+7	; 0x07
    10ea:	98 85       	ldd	r25, Y+8	; 0x08
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	61 f0       	breq	.+24     	; 0x1108 <Interrupt_INTx_Init+0x1b2>
    10f0:	47 c0       	rjmp	.+142    	; 0x1180 <Interrupt_INTx_Init+0x22a>
    10f2:	2f 81       	ldd	r18, Y+7	; 0x07
    10f4:	38 85       	ldd	r19, Y+8	; 0x08
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	21 f1       	breq	.+72     	; 0x1144 <Interrupt_INTx_Init+0x1ee>
    10fc:	8f 81       	ldd	r24, Y+7	; 0x07
    10fe:	98 85       	ldd	r25, Y+8	; 0x08
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	71 f1       	breq	.+92     	; 0x1162 <Interrupt_INTx_Init+0x20c>
    1106:	3c c0       	rjmp	.+120    	; 0x1180 <Interrupt_INTx_Init+0x22a>
			{
				case INTERRUPT_LOW_LEVEL :
						CLEAR_BIT(MCUCR,ISC10);
    1108:	a5 e5       	ldi	r26, 0x55	; 85
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e5 e5       	ldi	r30, 0x55	; 85
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8b 7f       	andi	r24, 0xFB	; 251
    1114:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR,ISC11);
    1116:	a5 e5       	ldi	r26, 0x55	; 85
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e5       	ldi	r30, 0x55	; 85
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	87 7f       	andi	r24, 0xF7	; 247
    1122:	8c 93       	st	X, r24
    1124:	2e c0       	rjmp	.+92     	; 0x1182 <Interrupt_INTx_Init+0x22c>
				break;
				case INTERRUPT_ANY_LOGICAL_CHANGE :
						SET_BIT(MCUCR,ISC10);
    1126:	a5 e5       	ldi	r26, 0x55	; 85
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e5 e5       	ldi	r30, 0x55	; 85
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	84 60       	ori	r24, 0x04	; 4
    1132:	8c 93       	st	X, r24
						CLEAR_BIT(MCUCR,ISC11);
    1134:	a5 e5       	ldi	r26, 0x55	; 85
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e5       	ldi	r30, 0x55	; 85
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	8c 93       	st	X, r24
    1142:	1f c0       	rjmp	.+62     	; 0x1182 <Interrupt_INTx_Init+0x22c>
				break;
				case INTERRUPT_FALLING_EDGE :
						CLEAR_BIT(MCUCR,ISC10);
    1144:	a5 e5       	ldi	r26, 0x55	; 85
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e5       	ldi	r30, 0x55	; 85
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	8c 93       	st	X, r24
						SET_BIT(MCUCR,ISC11);
    1152:	a5 e5       	ldi	r26, 0x55	; 85
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e5       	ldi	r30, 0x55	; 85
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 60       	ori	r24, 0x08	; 8
    115e:	8c 93       	st	X, r24
    1160:	10 c0       	rjmp	.+32     	; 0x1182 <Interrupt_INTx_Init+0x22c>
				break;
				case INTERRUPT_RISING_EDGE :
						SET_BIT(MCUCR,ISC10);
    1162:	a5 e5       	ldi	r26, 0x55	; 85
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e5 e5       	ldi	r30, 0x55	; 85
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	8c 93       	st	X, r24
						SET_BIT(MCUCR,ISC11);
    1170:	a5 e5       	ldi	r26, 0x55	; 85
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e5 e5       	ldi	r30, 0x55	; 85
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 60       	ori	r24, 0x08	; 8
    117c:	8c 93       	st	X, r24
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <Interrupt_INTx_Init+0x22c>
				break;
				default :
						ret = E_NOT_OK;
    1180:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
			EXT_INT1_ENABLE();
    1182:	ab e5       	ldi	r26, 0x5B	; 91
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e5       	ldi	r30, 0x5B	; 91
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	8c 93       	st	X, r24
    1190:	34 c0       	rjmp	.+104    	; 0x11fa <Interrupt_INTx_Init+0x2a4>
		}
		else if(EXTERNAL_INTERRUPT_INT2==int_obj->INTx_src)
    1192:	eb 81       	ldd	r30, Y+3	; 0x03
    1194:	fc 81       	ldd	r31, Y+4	; 0x04
    1196:	83 81       	ldd	r24, Z+3	; 0x03
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	79 f5       	brne	.+94     	; 0x11fa <Interrupt_INTx_Init+0x2a4>
		{
			ret = INT2_SetInterruptHandler(int_obj);
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	0e 94 91 09 	call	0x1322	; 0x1322 <INT2_SetInterruptHandler>
    11a4:	89 83       	std	Y+1, r24	; 0x01

			switch(int_obj->edge)
    11a6:	eb 81       	ldd	r30, Y+3	; 0x03
    11a8:	fc 81       	ldd	r31, Y+4	; 0x04
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3e 83       	std	Y+6, r19	; 0x06
    11b2:	2d 83       	std	Y+5, r18	; 0x05
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	91 05       	cpc	r25, r1
    11bc:	31 f0       	breq	.+12     	; 0x11ca <Interrupt_INTx_Init+0x274>
    11be:	2d 81       	ldd	r18, Y+5	; 0x05
    11c0:	3e 81       	ldd	r19, Y+6	; 0x06
    11c2:	23 30       	cpi	r18, 0x03	; 3
    11c4:	31 05       	cpc	r19, r1
    11c6:	49 f0       	breq	.+18     	; 0x11da <Interrupt_INTx_Init+0x284>
    11c8:	10 c0       	rjmp	.+32     	; 0x11ea <Interrupt_INTx_Init+0x294>
			{
				case INTERRUPT_FALLING_EDGE :
						CLEAR_BIT(MCUCSR,ISC2);
    11ca:	a4 e5       	ldi	r26, 0x54	; 84
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e4 e5       	ldi	r30, 0x54	; 84
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7b       	andi	r24, 0xBF	; 191
    11d6:	8c 93       	st	X, r24
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <Interrupt_INTx_Init+0x296>
				break;
				case INTERRUPT_RISING_EDGE :
						SET_BIT(MCUCSR,ISC2);
    11da:	a4 e5       	ldi	r26, 0x54	; 84
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e4 e5       	ldi	r30, 0x54	; 84
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 64       	ori	r24, 0x40	; 64
    11e6:	8c 93       	st	X, r24
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <Interrupt_INTx_Init+0x296>
				break;
				default :
						ret = E_NOT_OK;
    11ea:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
			EXT_INT2_ENABLE();
    11ec:	ab e5       	ldi	r26, 0x5B	; 91
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	eb e5       	ldi	r30, 0x5B	; 91
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 62       	ori	r24, 0x20	; 32
    11f8:	8c 93       	st	X, r24
		}

	}
	return ret;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fc:	2a 96       	adiw	r28, 0x0a	; 10
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <Interrupt_INTx_DeInit>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType Interrupt_INTx_DeInit(const interrupt_INTx_t *int_obj)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <Interrupt_INTx_DeInit+0x6>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <Interrupt_INTx_DeInit+0x8>
    1216:	0f 92       	push	r0
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	9b 83       	std	Y+3, r25	; 0x03
    121e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == int_obj)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	9b 81       	ldd	r25, Y+3	; 0x03
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	11 f4       	brne	.+4      	; 0x1230 <Interrupt_INTx_DeInit+0x22>
	{
		ret = E_NOT_OK;
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	2e c0       	rjmp	.+92     	; 0x128c <Interrupt_INTx_DeInit+0x7e>
	}
	else
	{
		switch(int_obj->INTx_src)
    1230:	ea 81       	ldd	r30, Y+2	; 0x02
    1232:	fb 81       	ldd	r31, Y+3	; 0x03
    1234:	83 81       	ldd	r24, Z+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3d 83       	std	Y+5, r19	; 0x05
    123c:	2c 83       	std	Y+4, r18	; 0x04
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	89 f0       	breq	.+34     	; 0x126a <Interrupt_INTx_DeInit+0x5c>
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	a1 f0       	breq	.+40     	; 0x127a <Interrupt_INTx_DeInit+0x6c>
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	c1 f4       	brne	.+48     	; 0x128a <Interrupt_INTx_DeInit+0x7c>
		{
			case EXTERNAL_INTERRUPT_INT0 :
					EXT_INT0_DISABLE();
    125a:	ab e5       	ldi	r26, 0x5B	; 91
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	eb e5       	ldi	r30, 0x5B	; 91
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7b       	andi	r24, 0xBF	; 191
    1266:	8c 93       	st	X, r24
    1268:	11 c0       	rjmp	.+34     	; 0x128c <Interrupt_INTx_DeInit+0x7e>
			break;
			case EXTERNAL_INTERRUPT_INT1 :
					EXT_INT1_DISABLE();
    126a:	ab e5       	ldi	r26, 0x5B	; 91
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e5       	ldi	r30, 0x5B	; 91
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 77       	andi	r24, 0x7F	; 127
    1276:	8c 93       	st	X, r24
    1278:	09 c0       	rjmp	.+18     	; 0x128c <Interrupt_INTx_DeInit+0x7e>
			break;
			case EXTERNAL_INTERRUPT_INT2 :
					EXT_INT2_DISABLE();
    127a:	ab e5       	ldi	r26, 0x5B	; 91
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e5       	ldi	r30, 0x5B	; 91
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 7d       	andi	r24, 0xDF	; 223
    1286:	8c 93       	st	X, r24
    1288:	01 c0       	rjmp	.+2      	; 0x128c <Interrupt_INTx_DeInit+0x7e>
			break;
			default :
					ret = E_NOT_OK;
    128a:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return ret;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <INT0_SetInterruptHandler>:

static Std_ReturnType INT0_SetInterruptHandler(const interrupt_INTx_t *int_obj)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <INT0_SetInterruptHandler+0x6>
    12a4:	0f 92       	push	r0
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	9b 83       	std	Y+3, r25	; 0x03
    12ac:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == int_obj)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	11 f4       	brne	.+4      	; 0x12be <INT0_SetInterruptHandler+0x20>
	{
		ret = E_NOT_OK;
    12ba:	19 82       	std	Y+1, r1	; 0x01
    12bc:	0a c0       	rjmp	.+20     	; 0x12d2 <INT0_SetInterruptHandler+0x34>
	}
	else
	{
		INT0_interrptHandler = int_obj->EXT_InterruptHandler;
    12be:	ea 81       	ldd	r30, Y+2	; 0x02
    12c0:	fb 81       	ldd	r31, Y+3	; 0x03
    12c2:	80 81       	ld	r24, Z
    12c4:	91 81       	ldd	r25, Z+1	; 0x01
    12c6:	90 93 95 00 	sts	0x0095, r25
    12ca:	80 93 94 00 	sts	0x0094, r24
		ret = E_OK;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <INT1_SetInterruptHandler>:
static Std_ReturnType INT1_SetInterruptHandler(const interrupt_INTx_t *int_obj)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <INT1_SetInterruptHandler+0x6>
    12e6:	0f 92       	push	r0
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == int_obj)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	11 f4       	brne	.+4      	; 0x1300 <INT1_SetInterruptHandler+0x20>
	{
		ret = E_NOT_OK;
    12fc:	19 82       	std	Y+1, r1	; 0x01
    12fe:	0a c0       	rjmp	.+20     	; 0x1314 <INT1_SetInterruptHandler+0x34>
	}
	else
	{
		INT1_interrptHandler = int_obj->EXT_InterruptHandler;
    1300:	ea 81       	ldd	r30, Y+2	; 0x02
    1302:	fb 81       	ldd	r31, Y+3	; 0x03
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	90 93 97 00 	sts	0x0097, r25
    130c:	80 93 96 00 	sts	0x0096, r24
		ret = E_OK;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <INT2_SetInterruptHandler>:
static Std_ReturnType INT2_SetInterruptHandler(const interrupt_INTx_t *int_obj)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <INT2_SetInterruptHandler+0x6>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == int_obj)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	11 f4       	brne	.+4      	; 0x1342 <INT2_SetInterruptHandler+0x20>
	{
		ret = E_NOT_OK;
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	0a c0       	rjmp	.+20     	; 0x1356 <INT2_SetInterruptHandler+0x34>
	}
	else
	{
		INT2_interrptHandler = int_obj->EXT_InterruptHandler;
    1342:	ea 81       	ldd	r30, Y+2	; 0x02
    1344:	fb 81       	ldd	r31, Y+3	; 0x03
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	90 93 99 00 	sts	0x0099, r25
    134e:	80 93 98 00 	sts	0x0098, r24
		ret = E_OK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <__vector_1>:


void __vector_1( void )
{
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
	if(INT0_interrptHandler){ INT0_interrptHandler(); }
    138e:	80 91 94 00 	lds	r24, 0x0094
    1392:	90 91 95 00 	lds	r25, 0x0095
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	29 f0       	breq	.+10     	; 0x13a4 <__vector_1+0x40>
    139a:	e0 91 94 00 	lds	r30, 0x0094
    139e:	f0 91 95 00 	lds	r31, 0x0095
    13a2:	09 95       	icall
	else{ /* Nothing */ }
}
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <__vector_2>:

void __vector_2( void )
{
    13ca:	1f 92       	push	r1
    13cc:	0f 92       	push	r0
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	0f 92       	push	r0
    13d2:	11 24       	eor	r1, r1
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	if(INT1_interrptHandler){ INT1_interrptHandler(); }
    13f4:	80 91 96 00 	lds	r24, 0x0096
    13f8:	90 91 97 00 	lds	r25, 0x0097
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	29 f0       	breq	.+10     	; 0x140a <__vector_2+0x40>
    1400:	e0 91 96 00 	lds	r30, 0x0096
    1404:	f0 91 97 00 	lds	r31, 0x0097
    1408:	09 95       	icall
	else{ /* Nothing */ }
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_3>:

void __vector_3( void )
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	if(INT2_interrptHandler){ INT2_interrptHandler(); }
    145a:	80 91 98 00 	lds	r24, 0x0098
    145e:	90 91 99 00 	lds	r25, 0x0099
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <__vector_3+0x40>
    1466:	e0 91 98 00 	lds	r30, 0x0098
    146a:	f0 91 99 00 	lds	r31, 0x0099
    146e:	09 95       	icall
	else{ /* Nothing */ }
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <gie_interrupt_enable>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gie_interrupt_enable(void)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE_BIT);
    149e:	af e5       	ldi	r26, 0x5F	; 95
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ef e5       	ldi	r30, 0x5F	; 95
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8c 93       	st	X, r24
	return E_OK ;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <gie_interrupt_disable>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gie_interrupt_disable(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,GIE_BIT);
    14bc:	af e5       	ldi	r26, 0x5F	; 95
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ef e5       	ldi	r30, 0x5F	; 95
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 77       	andi	r24, 0x7F	; 127
    14c8:	8c 93       	st	X, r24
	return E_OK ;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <I2C_init>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType I2C_init(void)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
	// Set prescaler to 1
	TWSR = 0;
    14e0:	e1 e2       	ldi	r30, 0x21	; 33
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	10 82       	st	Z, r1
	// Set bit rate
	TWBR = ((F_CPU / SCL_CLOCK) - 16) / 2;
    14e6:	e0 e2       	ldi	r30, 0x20	; 32
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 e2       	ldi	r24, 0x20	; 32
    14ec:	80 83       	st	Z, r24
	// Enable TWI, generate ACK, and enable TWI interrupt
	SET_BIT(TWCR,TWEN);
    14ee:	a6 e5       	ldi	r26, 0x56	; 86
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e6 e5       	ldi	r30, 0x56	; 86
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEA);
    14fc:	a6 e5       	ldi	r26, 0x56	; 86
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e6 e5       	ldi	r30, 0x56	; 86
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 64       	ori	r24, 0x40	; 64
    1508:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    150a:	a6 e5       	ldi	r26, 0x56	; 86
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e6 e5       	ldi	r30, 0x56	; 86
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	8c 93       	st	X, r24
	return ret;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
}
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <I2C_start>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType I2C_start(void)
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	0f 92       	push	r0
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	89 83       	std	Y+1, r24	; 0x01
    // Enable TWI, generate start condition, and clear interrupt flag
    SET_BIT(TWCR,TWSTA);
    1530:	a6 e5       	ldi	r26, 0x56	; 86
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e6 e5       	ldi	r30, 0x56	; 86
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 62       	ori	r24, 0x20	; 32
    153c:	8c 93       	st	X, r24
    SET_BIT(TWCR,TWEN);
    153e:	a6 e5       	ldi	r26, 0x56	; 86
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e6 e5       	ldi	r30, 0x56	; 86
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	8c 93       	st	X, r24
    SET_BIT(TWCR,TWINT);
    154c:	a6 e5       	ldi	r26, 0x56	; 86
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e6 e5       	ldi	r30, 0x56	; 86
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	8c 93       	st	X, r24
    // Wait until TWI interrupt flag is set
    while(!READ_BIT(TWCR,TWINT));
    155a:	e6 e5       	ldi	r30, 0x56	; 86
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	88 23       	and	r24, r24
    1562:	dc f7       	brge	.-10     	; 0x155a <I2C_start+0x38>
    return ret;
    1564:	89 81       	ldd	r24, Y+1	; 0x01
}
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <I2C_stop>:
 * @param  :
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType I2C_stop(void) {
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_OK;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    // Enable TWI, generate stop condition, and clear interrupt flag
	SET_BIT(TWCR,TWSTO);
    157c:	a6 e5       	ldi	r26, 0x56	; 86
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e6 e5       	ldi	r30, 0x56	; 86
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 61       	ori	r24, 0x10	; 16
    1588:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    158a:	a6 e5       	ldi	r26, 0x56	; 86
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e6 e5       	ldi	r30, 0x56	; 86
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	80 68       	ori	r24, 0x80	; 128
    1596:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
    1598:	a6 e5       	ldi	r26, 0x56	; 86
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e6 e5       	ldi	r30, 0x56	; 86
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	8c 93       	st	X, r24
    // Wait until stop condition is executed
    while(READ_BIT(TWCR,TWSTO));
    15a6:	e6 e5       	ldi	r30, 0x56	; 86
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	82 95       	swap	r24
    15ae:	8f 70       	andi	r24, 0x0F	; 15
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	90 70       	andi	r25, 0x00	; 0
    15b8:	88 23       	and	r24, r24
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <I2C_stop+0x38>
    return ret;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <I2C_read_ack>:
 * @param  : *data : Pointer to store the byte after it is received
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType I2C_read_ack(uint8 *data) {
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <I2C_read_ack+0x6>
    15cc:	0f 92       	push	r0
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	9b 83       	std	Y+3, r25	; 0x03
    15d4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==data)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <I2C_read_ack+0x20>
	{
		ret = E_NOT_OK;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	22 c0       	rjmp	.+68     	; 0x162a <I2C_read_ack+0x64>
	}
	else
	{
		// Enable TWI, generate ACK, and clear interrupt flag
		 SET_BIT(TWCR,TWEA);
    15e6:	a6 e5       	ldi	r26, 0x56	; 86
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e6 e5       	ldi	r30, 0x56	; 86
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 64       	ori	r24, 0x40	; 64
    15f2:	8c 93       	st	X, r24
		 SET_BIT(TWCR,TWEN);
    15f4:	a6 e5       	ldi	r26, 0x56	; 86
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e6 e5       	ldi	r30, 0x56	; 86
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	84 60       	ori	r24, 0x04	; 4
    1600:	8c 93       	st	X, r24
		 SET_BIT(TWCR,TWINT);
    1602:	a6 e5       	ldi	r26, 0x56	; 86
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e6 e5       	ldi	r30, 0x56	; 86
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	8c 93       	st	X, r24
		// Wait until data is received
		while(!READ_BIT(TWCR,TWINT));
    1610:	e6 e5       	ldi	r30, 0x56	; 86
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	88 23       	and	r24, r24
    1618:	dc f7       	brge	.-10     	; 0x1610 <I2C_read_ack+0x4a>
		// Return received data
		*data = TWDR;
    161a:	e3 e2       	ldi	r30, 0x23	; 35
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	ea 81       	ldd	r30, Y+2	; 0x02
    1622:	fb 81       	ldd	r31, Y+3	; 0x03
    1624:	80 83       	st	Z, r24
		ret = E_OK;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01
	}
    return ret;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <I2C_read_nack>:
 * @param  : *data : Pointer to store the byte after it is received
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType I2C_read_nack(uint8 *data) {
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <I2C_read_nack+0x6>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	9b 83       	std	Y+3, r25	; 0x03
    1646:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	89 83       	std	Y+1, r24	; 0x01
	if(NULL==data)
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	11 f4       	brne	.+4      	; 0x1658 <I2C_read_nack+0x20>
	{
		ret = E_NOT_OK;
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	1b c0       	rjmp	.+54     	; 0x168e <I2C_read_nack+0x56>
	}
	else
	{
		// Enable TWI and clear interrupt flag, but don't generate ACK
		SET_BIT(TWCR,TWEN);
    1658:	a6 e5       	ldi	r26, 0x56	; 86
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e6 e5       	ldi	r30, 0x56	; 86
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	84 60       	ori	r24, 0x04	; 4
    1664:	8c 93       	st	X, r24
		SET_BIT(TWCR,TWINT);
    1666:	a6 e5       	ldi	r26, 0x56	; 86
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e6 e5       	ldi	r30, 0x56	; 86
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	8c 93       	st	X, r24
		// Wait until data is received
		while(!READ_BIT(TWCR,TWINT));
    1674:	e6 e5       	ldi	r30, 0x56	; 86
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 23       	and	r24, r24
    167c:	dc f7       	brge	.-10     	; 0x1674 <I2C_read_nack+0x3c>
		// Return received data
		*data = TWDR;
    167e:	e3 e2       	ldi	r30, 0x23	; 35
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	ea 81       	ldd	r30, Y+2	; 0x02
    1686:	fb 81       	ldd	r31, Y+3	; 0x03
    1688:	80 83       	st	Z, r24
		ret = E_OK;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	89 83       	std	Y+1, r24	; 0x01
	}
    return ret;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <I2C_write>:
 * @param  : data : The byte to be sent
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType I2C_write(uint8 data) {
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <I2C_write+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	89 83       	std	Y+1, r24	; 0x01
    // Load data into data register
    TWDR = data;
    16ac:	e3 e2       	ldi	r30, 0x23	; 35
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
    // Enable TWI and clear interrupt flag
	TWCR = (1 << TWEN) | (1 << TWINT);
    16b4:	e6 e5       	ldi	r30, 0x56	; 86
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	84 e8       	ldi	r24, 0x84	; 132
    16ba:	80 83       	st	Z, r24
    // Wait until data is transmitted
    while(!READ_BIT(TWCR,TWINT));
    16bc:	e6 e5       	ldi	r30, 0x56	; 86
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 23       	and	r24, r24
    16c4:	dc f7       	brge	.-10     	; 0x16bc <I2C_write+0x20>
    return ret;
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <gpio_pin_direction_intialize>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_pin_direction_intialize(const pin_config_t *_pin_config)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <gpio_pin_direction_intialize+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <gpio_pin_direction_intialize+0x8>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _pin_config)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	9b 81       	ldd	r25, Y+3	; 0x03
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	11 f4       	brne	.+4      	; 0x16f4 <gpio_pin_direction_intialize+0x22>
	{
		ret = E_NOT_OK;
    16f0:	19 82       	std	Y+1, r1	; 0x01
    16f2:	7e c0       	rjmp	.+252    	; 0x17f0 <gpio_pin_direction_intialize+0x11e>
	}
	else
	{
		switch(_pin_config->direction)
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	80 81       	ld	r24, Z
    16fa:	82 95       	swap	r24
    16fc:	86 95       	lsr	r24
    16fe:	86 95       	lsr	r24
    1700:	83 70       	andi	r24, 0x03	; 3
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	3d 83       	std	Y+5, r19	; 0x05
    170a:	2c 83       	std	Y+4, r18	; 0x04
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	31 f0       	breq	.+12     	; 0x1720 <gpio_pin_direction_intialize+0x4e>
    1714:	2c 81       	ldd	r18, Y+4	; 0x04
    1716:	3d 81       	ldd	r19, Y+5	; 0x05
    1718:	21 30       	cpi	r18, 0x01	; 1
    171a:	31 05       	cpc	r19, r1
    171c:	a9 f1       	breq	.+106    	; 0x1788 <gpio_pin_direction_intialize+0xb6>
    171e:	67 c0       	rjmp	.+206    	; 0x17ee <gpio_pin_direction_intialize+0x11c>
		{
			case GPIO_DIRECTION_INPUT :
				CLEAR_BIT(*Ddr_registers[_pin_config->port] ,_pin_config->pin);
    1720:	ea 81       	ldd	r30, Y+2	; 0x02
    1722:	fb 81       	ldd	r31, Y+3	; 0x03
    1724:	80 81       	ld	r24, Z
    1726:	87 70       	andi	r24, 0x07	; 7
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	fc 01       	movw	r30, r24
    1732:	e5 59       	subi	r30, 0x95	; 149
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	a0 81       	ld	r26, Z
    1738:	b1 81       	ldd	r27, Z+1	; 0x01
    173a:	ea 81       	ldd	r30, Y+2	; 0x02
    173c:	fb 81       	ldd	r31, Y+3	; 0x03
    173e:	80 81       	ld	r24, Z
    1740:	87 70       	andi	r24, 0x07	; 7
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	fc 01       	movw	r30, r24
    174c:	e5 59       	subi	r30, 0x95	; 149
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	01 90       	ld	r0, Z+
    1752:	f0 81       	ld	r31, Z
    1754:	e0 2d       	mov	r30, r0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	ea 81       	ldd	r30, Y+2	; 0x02
    175c:	fb 81       	ldd	r31, Y+3	; 0x03
    175e:	80 81       	ld	r24, Z
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	86 95       	lsr	r24
    1766:	87 70       	andi	r24, 0x07	; 7
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <gpio_pin_direction_intialize+0xa6>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <gpio_pin_direction_intialize+0xa2>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
				ret = E_OK;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	34 c0       	rjmp	.+104    	; 0x17f0 <gpio_pin_direction_intialize+0x11e>
			break;
			case GPIO_DIRECTION_OUTPUT :
				SET_BIT(*Ddr_registers[_pin_config->port] ,_pin_config->pin);
    1788:	ea 81       	ldd	r30, Y+2	; 0x02
    178a:	fb 81       	ldd	r31, Y+3	; 0x03
    178c:	80 81       	ld	r24, Z
    178e:	87 70       	andi	r24, 0x07	; 7
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	fc 01       	movw	r30, r24
    179a:	e5 59       	subi	r30, 0x95	; 149
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	a0 81       	ld	r26, Z
    17a0:	b1 81       	ldd	r27, Z+1	; 0x01
    17a2:	ea 81       	ldd	r30, Y+2	; 0x02
    17a4:	fb 81       	ldd	r31, Y+3	; 0x03
    17a6:	80 81       	ld	r24, Z
    17a8:	87 70       	andi	r24, 0x07	; 7
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	fc 01       	movw	r30, r24
    17b4:	e5 59       	subi	r30, 0x95	; 149
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	01 90       	ld	r0, Z+
    17ba:	f0 81       	ld	r31, Z
    17bc:	e0 2d       	mov	r30, r0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	ea 81       	ldd	r30, Y+2	; 0x02
    17c4:	fb 81       	ldd	r31, Y+3	; 0x03
    17c6:	80 81       	ld	r24, Z
    17c8:	86 95       	lsr	r24
    17ca:	86 95       	lsr	r24
    17cc:	86 95       	lsr	r24
    17ce:	87 70       	andi	r24, 0x07	; 7
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <gpio_pin_direction_intialize+0x10e>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <gpio_pin_direction_intialize+0x10a>
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
				ret = E_OK;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	01 c0       	rjmp	.+2      	; 0x17f0 <gpio_pin_direction_intialize+0x11e>
			break;
			default : ret = E_NOT_OK ; break;
    17ee:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return ret;
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <gpio_pin_get_direction_status>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_pin_get_direction_status(const pin_config_t *_pin_config, direction_t *direction_status)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <gpio_pin_get_direction_status+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <gpio_pin_get_direction_status+0x8>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	9b 83       	std	Y+3, r25	; 0x03
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	7d 83       	std	Y+5, r23	; 0x05
    1816:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == _pin_config)
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	9b 81       	ldd	r25, Y+3	; 0x03
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	11 f4       	brne	.+4      	; 0x1828 <gpio_pin_get_direction_status+0x26>
		{
			ret = E_NOT_OK;
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	27 c0       	rjmp	.+78     	; 0x1876 <gpio_pin_get_direction_status+0x74>
		}
		else
		{
			*direction_status = READ_BIT(*Ddr_registers[_pin_config->port] ,_pin_config->pin);
    1828:	ea 81       	ldd	r30, Y+2	; 0x02
    182a:	fb 81       	ldd	r31, Y+3	; 0x03
    182c:	80 81       	ld	r24, Z
    182e:	87 70       	andi	r24, 0x07	; 7
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	fc 01       	movw	r30, r24
    183a:	e5 59       	subi	r30, 0x95	; 149
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	01 90       	ld	r0, Z+
    1840:	f0 81       	ld	r31, Z
    1842:	e0 2d       	mov	r30, r0
    1844:	80 81       	ld	r24, Z
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	ea 81       	ldd	r30, Y+2	; 0x02
    184c:	fb 81       	ldd	r31, Y+3	; 0x03
    184e:	80 81       	ld	r24, Z
    1850:	86 95       	lsr	r24
    1852:	86 95       	lsr	r24
    1854:	86 95       	lsr	r24
    1856:	87 70       	andi	r24, 0x07	; 7
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a9 01       	movw	r20, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <gpio_pin_get_direction_status+0x62>
    1860:	55 95       	asr	r21
    1862:	47 95       	ror	r20
    1864:	8a 95       	dec	r24
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <gpio_pin_get_direction_status+0x5e>
    1868:	ca 01       	movw	r24, r20
    186a:	81 70       	andi	r24, 0x01	; 1
    186c:	ec 81       	ldd	r30, Y+4	; 0x04
    186e:	fd 81       	ldd	r31, Y+5	; 0x05
    1870:	80 83       	st	Z, r24
			ret = E_OK;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
		}
	return ret;
    1876:	89 81       	ldd	r24, Y+1	; 0x01
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <gpio_pin_write_logic>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_pin_write_logic(const pin_config_t *_pin_config, logic_t logic)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <gpio_pin_write_logic+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <gpio_pin_write_logic+0x8>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <gpio_pin_write_logic+0xa>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	9b 83       	std	Y+3, r25	; 0x03
    1898:	8a 83       	std	Y+2, r24	; 0x02
    189a:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == _pin_config)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	9b 81       	ldd	r25, Y+3	; 0x03
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	11 f4       	brne	.+4      	; 0x18ac <gpio_pin_write_logic+0x24>
		{
			ret = E_NOT_OK;
    18a8:	19 82       	std	Y+1, r1	; 0x01
    18aa:	79 c0       	rjmp	.+242    	; 0x199e <gpio_pin_write_logic+0x116>
		}
		else
		{
			switch(logic)
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3e 83       	std	Y+6, r19	; 0x06
    18b4:	2d 83       	std	Y+5, r18	; 0x05
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
    18b8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	c9 f1       	breq	.+114    	; 0x1930 <gpio_pin_write_logic+0xa8>
    18be:	2d 81       	ldd	r18, Y+5	; 0x05
    18c0:	3e 81       	ldd	r19, Y+6	; 0x06
    18c2:	21 30       	cpi	r18, 0x01	; 1
    18c4:	31 05       	cpc	r19, r1
    18c6:	09 f0       	breq	.+2      	; 0x18ca <gpio_pin_write_logic+0x42>
    18c8:	67 c0       	rjmp	.+206    	; 0x1998 <gpio_pin_write_logic+0x110>
			{
				case GPIO_HIGH :
						SET_BIT(*Port_registers[_pin_config->port] , _pin_config->pin);
    18ca:	ea 81       	ldd	r30, Y+2	; 0x02
    18cc:	fb 81       	ldd	r31, Y+3	; 0x03
    18ce:	80 81       	ld	r24, Z
    18d0:	87 70       	andi	r24, 0x07	; 7
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	fc 01       	movw	r30, r24
    18dc:	ed 58       	subi	r30, 0x8D	; 141
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	a0 81       	ld	r26, Z
    18e2:	b1 81       	ldd	r27, Z+1	; 0x01
    18e4:	ea 81       	ldd	r30, Y+2	; 0x02
    18e6:	fb 81       	ldd	r31, Y+3	; 0x03
    18e8:	80 81       	ld	r24, Z
    18ea:	87 70       	andi	r24, 0x07	; 7
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	fc 01       	movw	r30, r24
    18f6:	ed 58       	subi	r30, 0x8D	; 141
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	01 90       	ld	r0, Z+
    18fc:	f0 81       	ld	r31, Z
    18fe:	e0 2d       	mov	r30, r0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	ea 81       	ldd	r30, Y+2	; 0x02
    1906:	fb 81       	ldd	r31, Y+3	; 0x03
    1908:	80 81       	ld	r24, Z
    190a:	86 95       	lsr	r24
    190c:	86 95       	lsr	r24
    190e:	86 95       	lsr	r24
    1910:	87 70       	andi	r24, 0x07	; 7
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <gpio_pin_write_logic+0x9a>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <gpio_pin_write_logic+0x96>
    1926:	84 2b       	or	r24, r20
    1928:	8c 93       	st	X, r24
				ret = E_OK;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	35 c0       	rjmp	.+106    	; 0x199a <gpio_pin_write_logic+0x112>
				break;
				case GPIO_LOW :
						CLEAR_BIT(*Port_registers[_pin_config->port] , _pin_config->pin);
    1930:	ea 81       	ldd	r30, Y+2	; 0x02
    1932:	fb 81       	ldd	r31, Y+3	; 0x03
    1934:	80 81       	ld	r24, Z
    1936:	87 70       	andi	r24, 0x07	; 7
    1938:	88 2f       	mov	r24, r24
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	fc 01       	movw	r30, r24
    1942:	ed 58       	subi	r30, 0x8D	; 141
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	a0 81       	ld	r26, Z
    1948:	b1 81       	ldd	r27, Z+1	; 0x01
    194a:	ea 81       	ldd	r30, Y+2	; 0x02
    194c:	fb 81       	ldd	r31, Y+3	; 0x03
    194e:	80 81       	ld	r24, Z
    1950:	87 70       	andi	r24, 0x07	; 7
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	fc 01       	movw	r30, r24
    195c:	ed 58       	subi	r30, 0x8D	; 141
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	01 90       	ld	r0, Z+
    1962:	f0 81       	ld	r31, Z
    1964:	e0 2d       	mov	r30, r0
    1966:	80 81       	ld	r24, Z
    1968:	48 2f       	mov	r20, r24
    196a:	ea 81       	ldd	r30, Y+2	; 0x02
    196c:	fb 81       	ldd	r31, Y+3	; 0x03
    196e:	80 81       	ld	r24, Z
    1970:	86 95       	lsr	r24
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	87 70       	andi	r24, 0x07	; 7
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <gpio_pin_write_logic+0x100>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <gpio_pin_write_logic+0xfc>
    198c:	80 95       	com	r24
    198e:	84 23       	and	r24, r20
    1990:	8c 93       	st	X, r24
				ret = E_OK;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	01 c0       	rjmp	.+2      	; 0x199a <gpio_pin_write_logic+0x112>
				break;
				default :
						ret = E_NOT_OK ;
    1998:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
			ret = E_OK;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	89 83       	std	Y+1, r24	; 0x01
		}
	return ret;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a0:	26 96       	adiw	r28, 0x06	; 6
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <gpio_pin_read_logic>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_pin_read_logic(const pin_config_t *_pin_config, logic_t *logic)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <gpio_pin_read_logic+0x6>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <gpio_pin_read_logic+0x8>
    19ba:	0f 92       	push	r0
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	9b 83       	std	Y+3, r25	; 0x03
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	7d 83       	std	Y+5, r23	; 0x05
    19c6:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
			if((NULL == _pin_config) || (NULL == logic))
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	21 f0       	breq	.+8      	; 0x19dc <gpio_pin_read_logic+0x2a>
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	9d 81       	ldd	r25, Y+5	; 0x05
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	11 f4       	brne	.+4      	; 0x19e0 <gpio_pin_read_logic+0x2e>
			{
				ret = E_NOT_OK;
    19dc:	19 82       	std	Y+1, r1	; 0x01
    19de:	27 c0       	rjmp	.+78     	; 0x1a2e <gpio_pin_read_logic+0x7c>
			}
			else
			{
				*logic = READ_BIT(*Pin_registers[_pin_config->port],_pin_config->pin);
    19e0:	ea 81       	ldd	r30, Y+2	; 0x02
    19e2:	fb 81       	ldd	r31, Y+3	; 0x03
    19e4:	80 81       	ld	r24, Z
    19e6:	87 70       	andi	r24, 0x07	; 7
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	fc 01       	movw	r30, r24
    19f2:	e5 58       	subi	r30, 0x85	; 133
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	01 90       	ld	r0, Z+
    19f8:	f0 81       	ld	r31, Z
    19fa:	e0 2d       	mov	r30, r0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	ea 81       	ldd	r30, Y+2	; 0x02
    1a04:	fb 81       	ldd	r31, Y+3	; 0x03
    1a06:	80 81       	ld	r24, Z
    1a08:	86 95       	lsr	r24
    1a0a:	86 95       	lsr	r24
    1a0c:	86 95       	lsr	r24
    1a0e:	87 70       	andi	r24, 0x07	; 7
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <gpio_pin_read_logic+0x6a>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <gpio_pin_read_logic+0x66>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	ec 81       	ldd	r30, Y+4	; 0x04
    1a26:	fd 81       	ldd	r31, Y+5	; 0x05
    1a28:	80 83       	st	Z, r24
				ret = E_OK;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	89 83       	std	Y+1, r24	; 0x01
			}
		return ret;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <gpio_pin_toggle_logic>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_pin_toggle_logic(const pin_config_t *_pin_config)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <gpio_pin_toggle_logic+0x6>
    1a46:	0f 92       	push	r0
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	9b 83       	std	Y+3, r25	; 0x03
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == _pin_config)
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <gpio_pin_toggle_logic+0x20>
		{
			ret = E_NOT_OK;
    1a5c:	19 82       	std	Y+1, r1	; 0x01
    1a5e:	32 c0       	rjmp	.+100    	; 0x1ac4 <gpio_pin_toggle_logic+0x84>
		}
		else
		{
			TOGGLE_BIT(*Port_registers[_pin_config->port],_pin_config->pin);
    1a60:	ea 81       	ldd	r30, Y+2	; 0x02
    1a62:	fb 81       	ldd	r31, Y+3	; 0x03
    1a64:	80 81       	ld	r24, Z
    1a66:	87 70       	andi	r24, 0x07	; 7
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	fc 01       	movw	r30, r24
    1a72:	ed 58       	subi	r30, 0x8D	; 141
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	a0 81       	ld	r26, Z
    1a78:	b1 81       	ldd	r27, Z+1	; 0x01
    1a7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7e:	80 81       	ld	r24, Z
    1a80:	87 70       	andi	r24, 0x07	; 7
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	ed 58       	subi	r30, 0x8D	; 141
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	01 90       	ld	r0, Z+
    1a92:	f0 81       	ld	r31, Z
    1a94:	e0 2d       	mov	r30, r0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a9e:	80 81       	ld	r24, Z
    1aa0:	86 95       	lsr	r24
    1aa2:	86 95       	lsr	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	87 70       	andi	r24, 0x07	; 7
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <gpio_pin_toggle_logic+0x78>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <gpio_pin_toggle_logic+0x74>
    1abc:	84 27       	eor	r24, r20
    1abe:	8c 93       	st	X, r24
			ret = E_OK;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	89 83       	std	Y+1, r24	; 0x01
		}
	return ret;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <gpio_pin_intialize>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_pin_intialize(const pin_config_t *_pin_config)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <gpio_pin_intialize+0x6>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	9b 83       	std	Y+3, r25	; 0x03
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == _pin_config)
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	11 f4       	brne	.+4      	; 0x1af2 <gpio_pin_intialize+0x20>
	{
		ret = E_NOT_OK;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	14 c0       	rjmp	.+40     	; 0x1b1a <gpio_pin_intialize+0x48>
	}
	else
	{
		ret = gpio_pin_direction_intialize(_pin_config);
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <gpio_pin_direction_intialize>
    1afa:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_write_logic(_pin_config , _pin_config->logic);
    1afc:	ea 81       	ldd	r30, Y+2	; 0x02
    1afe:	fb 81       	ldd	r31, Y+3	; 0x03
    1b00:	80 81       	ld	r24, Z
    1b02:	88 1f       	adc	r24, r24
    1b04:	88 27       	eor	r24, r24
    1b06:	88 1f       	adc	r24, r24
    1b08:	28 2f       	mov	r18, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	62 2f       	mov	r22, r18
    1b10:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    1b14:	89 83       	std	Y+1, r24	; 0x01
		ret = E_OK;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <gpio_port_direction_intialize>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_port_direction_intialize(port_index_t port, uint8 direction)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <gpio_port_direction_intialize+0x6>
    1b2e:	0f 92       	push	r0
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	8a 83       	std	Y+2, r24	; 0x02
    1b36:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	if(port > (PORT_MAX_NUMBER-1))
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	84 30       	cpi	r24, 0x04	; 4
    1b40:	10 f0       	brcs	.+4      	; 0x1b46 <gpio_port_direction_intialize+0x1e>
	{
		ret = E_NOT_OK;
    1b42:	19 82       	std	Y+1, r1	; 0x01
    1b44:	0f c0       	rjmp	.+30     	; 0x1b64 <gpio_port_direction_intialize+0x3c>
	}
	else
	{
		*Ddr_registers[port] = direction;
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	fc 01       	movw	r30, r24
    1b52:	e5 59       	subi	r30, 0x95	; 149
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	01 90       	ld	r0, Z+
    1b58:	f0 81       	ld	r31, Z
    1b5a:	e0 2d       	mov	r30, r0
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	80 83       	st	Z, r24
		ret = E_OK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <gpio_port_get_direction_status>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_port_get_direction_status(port_index_t port, uint8 *direction_status)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <gpio_port_get_direction_status+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <gpio_port_get_direction_status+0x8>
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
    1b80:	7c 83       	std	Y+4, r23	; 0x04
    1b82:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
	if((NULL == direction_status) || port > (PORT_MAX_NUMBER-1))
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <gpio_port_get_direction_status+0x24>
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	10 f0       	brcs	.+4      	; 0x1b9a <gpio_port_get_direction_status+0x28>
	{
		ret = E_NOT_OK;
    1b96:	19 82       	std	Y+1, r1	; 0x01
    1b98:	11 c0       	rjmp	.+34     	; 0x1bbc <gpio_port_get_direction_status+0x4a>
	}
	else
	{
		*direction_status = *Ddr_registers[port];
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	e5 59       	subi	r30, 0x95	; 149
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	01 90       	ld	r0, Z+
    1bac:	f0 81       	ld	r31, Z
    1bae:	e0 2d       	mov	r30, r0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb6:	80 83       	st	Z, r24
		ret = E_OK;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <gpio_port_write_logic>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_port_write_logic(port_index_t port, uint8 logic)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <gpio_port_write_logic+0x6>
    1bd2:	0f 92       	push	r0
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
    1bda:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
	if(port > (PORT_MAX_NUMBER-1))
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	10 f0       	brcs	.+4      	; 0x1bea <gpio_port_write_logic+0x1e>
	{
		ret = E_NOT_OK;
    1be6:	19 82       	std	Y+1, r1	; 0x01
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <gpio_port_write_logic+0x3c>
	}
	else
	{
		 *Port_registers[port] = logic;
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	ed 58       	subi	r30, 0x8D	; 141
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	f0 81       	ld	r31, Z
    1bfe:	e0 2d       	mov	r30, r0
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	80 83       	st	Z, r24
		ret = E_OK;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <gpio_port_read_logic>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_port_read_logic(port_index_t port, uint8 *logic)
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <gpio_port_read_logic+0x6>
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <gpio_port_read_logic+0x8>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	8a 83       	std	Y+2, r24	; 0x02
    1c24:	7c 83       	std	Y+4, r23	; 0x04
    1c26:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	if((NULL == logic) || (port > PORT_MAX_NUMBER-1))
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	19 f0       	breq	.+6      	; 0x1c3a <gpio_port_read_logic+0x24>
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	10 f0       	brcs	.+4      	; 0x1c3e <gpio_port_read_logic+0x28>
	{
		ret = E_NOT_OK;
    1c3a:	19 82       	std	Y+1, r1	; 0x01
    1c3c:	11 c0       	rjmp	.+34     	; 0x1c60 <gpio_port_read_logic+0x4a>
	}
	else
	{
		*logic = *Port_registers[port];
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	fc 01       	movw	r30, r24
    1c4a:	ed 58       	subi	r30, 0x8D	; 141
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	01 90       	ld	r0, Z+
    1c50:	f0 81       	ld	r31, Z
    1c52:	e0 2d       	mov	r30, r0
    1c54:	80 81       	ld	r24, Z
    1c56:	eb 81       	ldd	r30, Y+3	; 0x03
    1c58:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5a:	80 83       	st	Z, r24
		ret = E_OK;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <gpio_port_toggle_logic>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType gpio_port_toggle_logic(port_index_t port)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <gpio_port_toggle_logic+0x6>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	if(port > (PORT_MAX_NUMBER-1))
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	10 f0       	brcs	.+4      	; 0x1c8a <gpio_port_toggle_logic+0x1a>
	{
		ret = E_NOT_OK;
    1c86:	19 82       	std	Y+1, r1	; 0x01
    1c88:	1a c0       	rjmp	.+52     	; 0x1cbe <gpio_port_toggle_logic+0x4e>
	}
	else
	{
		*Port_registers[port] ^= 0xff;
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	fc 01       	movw	r30, r24
    1c96:	ed 58       	subi	r30, 0x8D	; 141
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	a0 81       	ld	r26, Z
    1c9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	fc 01       	movw	r30, r24
    1caa:	ed 58       	subi	r30, 0x8D	; 141
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	01 90       	ld	r0, Z+
    1cb0:	f0 81       	ld	r31, Z
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	80 95       	com	r24
    1cb8:	8c 93       	st	X, r24
		ret = E_OK;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <eeprom_write_byte>:

#include "eeprom.h"


Std_ReturnType eeprom_write_byte(uint16 bAdd, uint8 bData )
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <eeprom_write_byte+0x6>
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <eeprom_write_byte+0x8>
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	9b 83       	std	Y+3, r25	; 0x03
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
    1cda:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK ;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for completion of previous write */
	//while(EECR & (1<<EEWE));
	/* Set up address and data registers */
	EEAR = bAdd;
    1ce0:	ee e3       	ldi	r30, 0x3E	; 62
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
	EEDR = bData;
    1cec:	ed e3       	ldi	r30, 0x3D	; 61
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    1cf4:	ac e3       	ldi	r26, 0x3C	; 60
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	ec e3       	ldi	r30, 0x3C	; 60
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	84 60       	ori	r24, 0x04	; 4
    1d00:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    1d02:	ac e3       	ldi	r26, 0x3C	; 60
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ec e3       	ldi	r30, 0x3C	; 60
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	82 60       	ori	r24, 0x02	; 2
    1d0e:	8c 93       	st	X, r24

	return ret;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <eeprom_read_byte>:
Std_ReturnType eeprom_read_byte(uint16 bAdd, uint8 *bData )
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <eeprom_read_byte+0x6>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <eeprom_read_byte+0x8>
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9b 83       	std	Y+3, r25	; 0x03
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	7d 83       	std	Y+5, r23	; 0x05
    1d34:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK ;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == bData)
    1d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <eeprom_read_byte+0x26>
	{
		ret = E_NOT_OK ;
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	15 c0       	rjmp	.+42     	; 0x1d70 <eeprom_read_byte+0x50>
	else
	{
		/* Wait for completion of previous write */
		//while(EECR & (1<<EEWE));
		/* Set up address register */
		EEAR = bAdd;
    1d46:	ee e3       	ldi	r30, 0x3E	; 62
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
		/* Start eeprom read by writing EERE */
		EECR |= (1<<EERE);
    1d52:	ac e3       	ldi	r26, 0x3C	; 60
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ec e3       	ldi	r30, 0x3C	; 60
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	81 60       	ori	r24, 0x01	; 1
    1d5e:	8c 93       	st	X, r24
		/* Return data from data register */
		*bData = EEDR;
    1d60:	ed e3       	ldi	r30, 0x3D	; 61
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	ec 81       	ldd	r30, Y+4	; 0x04
    1d68:	fd 81       	ldd	r31, Y+5	; 0x05
    1d6a:	80 83       	st	Z, r24
		ret = E_OK;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret ;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <relay_initialize>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType relay_initialize(const relay_t *relay_obj)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <relay_initialize+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <relay_initialize+0x8>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_NOT_OK ;
    1d92:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == relay_obj)
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <relay_initialize+0x1e>
	{
		ret = E_NOT_OK ;
    1d9c:	19 82       	std	Y+1, r1	; 0x01
    1d9e:	34 c0       	rjmp	.+104    	; 0x1e08 <relay_initialize+0x86>
	{
		pin_config_t relay_pin = {	.port = relay_obj->port ,
									.pin = relay_obj->pin ,
									.logic = relay_obj->status ,
									.direction = GPIO_DIRECTION_OUTPUT
									};
    1da0:	eb 81       	ldd	r30, Y+3	; 0x03
    1da2:	fc 81       	ldd	r31, Y+4	; 0x04
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 70       	andi	r24, 0x0F	; 15
    1da8:	28 2f       	mov	r18, r24
    1daa:	27 70       	andi	r18, 0x07	; 7
    1dac:	eb 81       	ldd	r30, Y+3	; 0x03
    1dae:	fc 81       	ldd	r31, Y+4	; 0x04
    1db0:	80 81       	ld	r24, Z
    1db2:	98 2f       	mov	r25, r24
    1db4:	92 95       	swap	r25
    1db6:	9f 70       	andi	r25, 0x0F	; 15
    1db8:	97 70       	andi	r25, 0x07	; 7
    1dba:	eb 81       	ldd	r30, Y+3	; 0x03
    1dbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dbe:	80 81       	ld	r24, Z
    1dc0:	38 2f       	mov	r19, r24
    1dc2:	33 1f       	adc	r19, r19
    1dc4:	33 27       	eor	r19, r19
    1dc6:	33 1f       	adc	r19, r19
    1dc8:	27 70       	andi	r18, 0x07	; 7
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	88 7f       	andi	r24, 0xF8	; 248
    1dce:	82 2b       	or	r24, r18
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
    1dd2:	89 2f       	mov	r24, r25
    1dd4:	87 70       	andi	r24, 0x07	; 7
    1dd6:	98 2f       	mov	r25, r24
    1dd8:	99 0f       	add	r25, r25
    1dda:	99 0f       	add	r25, r25
    1ddc:	99 0f       	add	r25, r25
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	87 7c       	andi	r24, 0xC7	; 199
    1de2:	89 2b       	or	r24, r25
    1de4:	8a 83       	std	Y+2, r24	; 0x02
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 64       	ori	r24, 0x40	; 64
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	93 2f       	mov	r25, r19
    1dee:	97 95       	ror	r25
    1df0:	99 27       	eor	r25, r25
    1df2:	97 95       	ror	r25
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	8f 77       	andi	r24, 0x7F	; 127
    1df8:	89 2b       	or	r24, r25
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_direction_intialize(&relay_pin);
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	02 96       	adiw	r24, 0x02	; 2
    1e00:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <gpio_pin_direction_intialize>
		ret = E_OK ;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret ;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <relay_turn_on>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType relay_turn_on(const relay_t *relay_obj)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <relay_turn_on+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <relay_turn_on+0x8>
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
    1e24:	9c 83       	std	Y+4, r25	; 0x04
    1e26:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_NOT_OK ;
    1e28:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == relay_obj)
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <relay_turn_on+0x1e>
	{
		ret = E_NOT_OK ;
    1e32:	19 82       	std	Y+1, r1	; 0x01
    1e34:	35 c0       	rjmp	.+106    	; 0x1ea0 <relay_turn_on+0x88>
	{
		pin_config_t relay_pin = {	.port = relay_obj->port ,
									.pin = relay_obj->pin ,
									.logic = relay_obj->status ,
									.direction = GPIO_DIRECTION_OUTPUT
									};
    1e36:	eb 81       	ldd	r30, Y+3	; 0x03
    1e38:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8f 70       	andi	r24, 0x0F	; 15
    1e3e:	28 2f       	mov	r18, r24
    1e40:	27 70       	andi	r18, 0x07	; 7
    1e42:	eb 81       	ldd	r30, Y+3	; 0x03
    1e44:	fc 81       	ldd	r31, Y+4	; 0x04
    1e46:	80 81       	ld	r24, Z
    1e48:	98 2f       	mov	r25, r24
    1e4a:	92 95       	swap	r25
    1e4c:	9f 70       	andi	r25, 0x0F	; 15
    1e4e:	97 70       	andi	r25, 0x07	; 7
    1e50:	eb 81       	ldd	r30, Y+3	; 0x03
    1e52:	fc 81       	ldd	r31, Y+4	; 0x04
    1e54:	80 81       	ld	r24, Z
    1e56:	38 2f       	mov	r19, r24
    1e58:	33 1f       	adc	r19, r19
    1e5a:	33 27       	eor	r19, r19
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	27 70       	andi	r18, 0x07	; 7
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	88 7f       	andi	r24, 0xF8	; 248
    1e64:	82 2b       	or	r24, r18
    1e66:	8a 83       	std	Y+2, r24	; 0x02
    1e68:	89 2f       	mov	r24, r25
    1e6a:	87 70       	andi	r24, 0x07	; 7
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	99 0f       	add	r25, r25
    1e70:	99 0f       	add	r25, r25
    1e72:	99 0f       	add	r25, r25
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	87 7c       	andi	r24, 0xC7	; 199
    1e78:	89 2b       	or	r24, r25
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	80 64       	ori	r24, 0x40	; 64
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	93 2f       	mov	r25, r19
    1e84:	97 95       	ror	r25
    1e86:	99 27       	eor	r25, r25
    1e88:	97 95       	ror	r25
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	8f 77       	andi	r24, 0x7F	; 127
    1e8e:	89 2b       	or	r24, r25
    1e90:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&relay_pin ,GPIO_HIGH);
    1e92:	ce 01       	movw	r24, r28
    1e94:	02 96       	adiw	r24, 0x02	; 2
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>

		ret = E_OK ;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret ;
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <relay_turn_off>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType relay_turn_off(const relay_t *relay_obj)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <relay_turn_off+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <relay_turn_off+0x8>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_NOT_OK ;
    1ec0:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == relay_obj)
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	11 f4       	brne	.+4      	; 0x1ece <relay_turn_off+0x1e>
	{
		ret = E_NOT_OK ;
    1eca:	19 82       	std	Y+1, r1	; 0x01
    1ecc:	35 c0       	rjmp	.+106    	; 0x1f38 <relay_turn_off+0x88>
	{
		pin_config_t relay_pin = {	.port = relay_obj->port ,
									.pin = relay_obj->pin ,
									.logic = relay_obj->status ,
									.direction = GPIO_DIRECTION_OUTPUT
									};
    1ece:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 70       	andi	r24, 0x0F	; 15
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	27 70       	andi	r18, 0x07	; 7
    1eda:	eb 81       	ldd	r30, Y+3	; 0x03
    1edc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ede:	80 81       	ld	r24, Z
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	92 95       	swap	r25
    1ee4:	9f 70       	andi	r25, 0x0F	; 15
    1ee6:	97 70       	andi	r25, 0x07	; 7
    1ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eea:	fc 81       	ldd	r31, Y+4	; 0x04
    1eec:	80 81       	ld	r24, Z
    1eee:	38 2f       	mov	r19, r24
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	33 27       	eor	r19, r19
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	27 70       	andi	r18, 0x07	; 7
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	88 7f       	andi	r24, 0xF8	; 248
    1efc:	82 2b       	or	r24, r18
    1efe:	8a 83       	std	Y+2, r24	; 0x02
    1f00:	89 2f       	mov	r24, r25
    1f02:	87 70       	andi	r24, 0x07	; 7
    1f04:	98 2f       	mov	r25, r24
    1f06:	99 0f       	add	r25, r25
    1f08:	99 0f       	add	r25, r25
    1f0a:	99 0f       	add	r25, r25
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	87 7c       	andi	r24, 0xC7	; 199
    1f10:	89 2b       	or	r24, r25
    1f12:	8a 83       	std	Y+2, r24	; 0x02
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	80 64       	ori	r24, 0x40	; 64
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	93 2f       	mov	r25, r19
    1f1c:	97 95       	ror	r25
    1f1e:	99 27       	eor	r25, r25
    1f20:	97 95       	ror	r25
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	8f 77       	andi	r24, 0x7F	; 127
    1f26:	89 2b       	or	r24, r25
    1f28:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_write_logic(&relay_pin ,GPIO_LOW);
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	02 96       	adiw	r24, 0x02	; 2
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>

		ret = E_OK ;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret ;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <relay_turn_toggle>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType relay_turn_toggle(const relay_t *relay_obj)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <relay_turn_toggle+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <relay_turn_toggle+0x8>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_NOT_OK ;
    1f58:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == relay_obj)
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <relay_turn_toggle+0x1e>
	{
		ret = E_NOT_OK ;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	34 c0       	rjmp	.+104    	; 0x1fce <relay_turn_toggle+0x86>
	{
		pin_config_t relay_pin = {	.port = relay_obj->port ,
									.pin = relay_obj->pin ,
									.logic = relay_obj->status ,
									.direction = GPIO_DIRECTION_OUTPUT
									};
    1f66:	eb 81       	ldd	r30, Y+3	; 0x03
    1f68:	fc 81       	ldd	r31, Y+4	; 0x04
    1f6a:	80 81       	ld	r24, Z
    1f6c:	8f 70       	andi	r24, 0x0F	; 15
    1f6e:	28 2f       	mov	r18, r24
    1f70:	27 70       	andi	r18, 0x07	; 7
    1f72:	eb 81       	ldd	r30, Y+3	; 0x03
    1f74:	fc 81       	ldd	r31, Y+4	; 0x04
    1f76:	80 81       	ld	r24, Z
    1f78:	98 2f       	mov	r25, r24
    1f7a:	92 95       	swap	r25
    1f7c:	9f 70       	andi	r25, 0x0F	; 15
    1f7e:	97 70       	andi	r25, 0x07	; 7
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	80 81       	ld	r24, Z
    1f86:	38 2f       	mov	r19, r24
    1f88:	33 1f       	adc	r19, r19
    1f8a:	33 27       	eor	r19, r19
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	27 70       	andi	r18, 0x07	; 7
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	88 7f       	andi	r24, 0xF8	; 248
    1f94:	82 2b       	or	r24, r18
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	89 2f       	mov	r24, r25
    1f9a:	87 70       	andi	r24, 0x07	; 7
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	99 0f       	add	r25, r25
    1fa0:	99 0f       	add	r25, r25
    1fa2:	99 0f       	add	r25, r25
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	87 7c       	andi	r24, 0xC7	; 199
    1fa8:	89 2b       	or	r24, r25
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	80 64       	ori	r24, 0x40	; 64
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
    1fb2:	93 2f       	mov	r25, r19
    1fb4:	97 95       	ror	r25
    1fb6:	99 27       	eor	r25, r25
    1fb8:	97 95       	ror	r25
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	8f 77       	andi	r24, 0x7F	; 127
    1fbe:	89 2b       	or	r24, r25
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
		gpio_pin_toggle_logic(&relay_pin);
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	02 96       	adiw	r24, 0x02	; 2
    1fc6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <gpio_pin_toggle_logic>

		ret = E_OK ;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret ;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <led_initialize>:
 * @return:
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType led_initialize(const led_t *led)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <led_initialize+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <led_initialize+0x8>
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	9c 83       	std	Y+4, r25	; 0x04
    1fec:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == led)
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <led_initialize+0x20>
	{
		ret = E_NOT_OK;
    1ffa:	19 82       	std	Y+1, r1	; 0x01
    1ffc:	35 c0       	rjmp	.+106    	; 0x2068 <led_initialize+0x8a>
		pin_config_t led_pin ={
								.port = led->port ,
								.pin = led->pin ,
								.logic = led->led_status ,
								.direction = GPIO_DIRECTION_OUTPUT
		};
    1ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    2000:	fc 81       	ldd	r31, Y+4	; 0x04
    2002:	80 81       	ld	r24, Z
    2004:	8f 70       	andi	r24, 0x0F	; 15
    2006:	28 2f       	mov	r18, r24
    2008:	27 70       	andi	r18, 0x07	; 7
    200a:	eb 81       	ldd	r30, Y+3	; 0x03
    200c:	fc 81       	ldd	r31, Y+4	; 0x04
    200e:	80 81       	ld	r24, Z
    2010:	98 2f       	mov	r25, r24
    2012:	92 95       	swap	r25
    2014:	9f 70       	andi	r25, 0x0F	; 15
    2016:	97 70       	andi	r25, 0x07	; 7
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	80 81       	ld	r24, Z
    201e:	38 2f       	mov	r19, r24
    2020:	33 1f       	adc	r19, r19
    2022:	33 27       	eor	r19, r19
    2024:	33 1f       	adc	r19, r19
    2026:	27 70       	andi	r18, 0x07	; 7
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	88 7f       	andi	r24, 0xF8	; 248
    202c:	82 2b       	or	r24, r18
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	89 2f       	mov	r24, r25
    2032:	87 70       	andi	r24, 0x07	; 7
    2034:	98 2f       	mov	r25, r24
    2036:	99 0f       	add	r25, r25
    2038:	99 0f       	add	r25, r25
    203a:	99 0f       	add	r25, r25
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	87 7c       	andi	r24, 0xC7	; 199
    2040:	89 2b       	or	r24, r25
    2042:	8a 83       	std	Y+2, r24	; 0x02
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	80 64       	ori	r24, 0x40	; 64
    2048:	8a 83       	std	Y+2, r24	; 0x02
    204a:	93 2f       	mov	r25, r19
    204c:	97 95       	ror	r25
    204e:	99 27       	eor	r25, r25
    2050:	97 95       	ror	r25
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	8f 77       	andi	r24, 0x7F	; 127
    2056:	89 2b       	or	r24, r25
    2058:	8a 83       	std	Y+2, r24	; 0x02
		ret = gpio_pin_intialize(&led_pin);
    205a:	ce 01       	movw	r24, r28
    205c:	02 96       	adiw	r24, 0x02	; 2
    205e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    2062:	89 83       	std	Y+1, r24	; 0x01
		ret = E_OK;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <led_turn_on>:
 * @return:
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType led_turn_on(const led_t *led)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <led_turn_on+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <led_turn_on+0x8>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	9c 83       	std	Y+4, r25	; 0x04
    2086:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == led)
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	11 f4       	brne	.+4      	; 0x2098 <led_turn_on+0x20>
		{
			ret = E_NOT_OK;
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	36 c0       	rjmp	.+108    	; 0x2104 <led_turn_on+0x8c>
			pin_config_t led_pin ={
									.port = led->port ,
									.pin = led->pin ,
									.logic = led->led_status ,
									.direction = GPIO_DIRECTION_OUTPUT
			};
    2098:	eb 81       	ldd	r30, Y+3	; 0x03
    209a:	fc 81       	ldd	r31, Y+4	; 0x04
    209c:	80 81       	ld	r24, Z
    209e:	8f 70       	andi	r24, 0x0F	; 15
    20a0:	28 2f       	mov	r18, r24
    20a2:	27 70       	andi	r18, 0x07	; 7
    20a4:	eb 81       	ldd	r30, Y+3	; 0x03
    20a6:	fc 81       	ldd	r31, Y+4	; 0x04
    20a8:	80 81       	ld	r24, Z
    20aa:	98 2f       	mov	r25, r24
    20ac:	92 95       	swap	r25
    20ae:	9f 70       	andi	r25, 0x0F	; 15
    20b0:	97 70       	andi	r25, 0x07	; 7
    20b2:	eb 81       	ldd	r30, Y+3	; 0x03
    20b4:	fc 81       	ldd	r31, Y+4	; 0x04
    20b6:	80 81       	ld	r24, Z
    20b8:	38 2f       	mov	r19, r24
    20ba:	33 1f       	adc	r19, r19
    20bc:	33 27       	eor	r19, r19
    20be:	33 1f       	adc	r19, r19
    20c0:	27 70       	andi	r18, 0x07	; 7
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	88 7f       	andi	r24, 0xF8	; 248
    20c6:	82 2b       	or	r24, r18
    20c8:	8a 83       	std	Y+2, r24	; 0x02
    20ca:	89 2f       	mov	r24, r25
    20cc:	87 70       	andi	r24, 0x07	; 7
    20ce:	98 2f       	mov	r25, r24
    20d0:	99 0f       	add	r25, r25
    20d2:	99 0f       	add	r25, r25
    20d4:	99 0f       	add	r25, r25
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	87 7c       	andi	r24, 0xC7	; 199
    20da:	89 2b       	or	r24, r25
    20dc:	8a 83       	std	Y+2, r24	; 0x02
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	80 64       	ori	r24, 0x40	; 64
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	93 2f       	mov	r25, r19
    20e6:	97 95       	ror	r25
    20e8:	99 27       	eor	r25, r25
    20ea:	97 95       	ror	r25
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	8f 77       	andi	r24, 0x7F	; 127
    20f0:	89 2b       	or	r24, r25
    20f2:	8a 83       	std	Y+2, r24	; 0x02
			ret = gpio_pin_write_logic(&(led_pin) , GPIO_HIGH);
    20f4:	ce 01       	movw	r24, r28
    20f6:	02 96       	adiw	r24, 0x02	; 2
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    20fe:	89 83       	std	Y+1, r24	; 0x01
			ret = E_OK;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <led_turn_off>:
 * @return:
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType led_turn_off(const led_t *led)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <led_turn_off+0x6>
    211a:	00 d0       	rcall	.+0      	; 0x211c <led_turn_off+0x8>
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == led)
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	11 f4       	brne	.+4      	; 0x2134 <led_turn_off+0x20>
		{
			ret = E_NOT_OK;
    2130:	19 82       	std	Y+1, r1	; 0x01
    2132:	36 c0       	rjmp	.+108    	; 0x21a0 <led_turn_off+0x8c>
			pin_config_t led_pin ={
									.port = led->port ,
									.pin = led->pin ,
									.logic = led->led_status ,
									.direction = GPIO_DIRECTION_OUTPUT
			};
    2134:	eb 81       	ldd	r30, Y+3	; 0x03
    2136:	fc 81       	ldd	r31, Y+4	; 0x04
    2138:	80 81       	ld	r24, Z
    213a:	8f 70       	andi	r24, 0x0F	; 15
    213c:	28 2f       	mov	r18, r24
    213e:	27 70       	andi	r18, 0x07	; 7
    2140:	eb 81       	ldd	r30, Y+3	; 0x03
    2142:	fc 81       	ldd	r31, Y+4	; 0x04
    2144:	80 81       	ld	r24, Z
    2146:	98 2f       	mov	r25, r24
    2148:	92 95       	swap	r25
    214a:	9f 70       	andi	r25, 0x0F	; 15
    214c:	97 70       	andi	r25, 0x07	; 7
    214e:	eb 81       	ldd	r30, Y+3	; 0x03
    2150:	fc 81       	ldd	r31, Y+4	; 0x04
    2152:	80 81       	ld	r24, Z
    2154:	38 2f       	mov	r19, r24
    2156:	33 1f       	adc	r19, r19
    2158:	33 27       	eor	r19, r19
    215a:	33 1f       	adc	r19, r19
    215c:	27 70       	andi	r18, 0x07	; 7
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	88 7f       	andi	r24, 0xF8	; 248
    2162:	82 2b       	or	r24, r18
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	89 2f       	mov	r24, r25
    2168:	87 70       	andi	r24, 0x07	; 7
    216a:	98 2f       	mov	r25, r24
    216c:	99 0f       	add	r25, r25
    216e:	99 0f       	add	r25, r25
    2170:	99 0f       	add	r25, r25
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	87 7c       	andi	r24, 0xC7	; 199
    2176:	89 2b       	or	r24, r25
    2178:	8a 83       	std	Y+2, r24	; 0x02
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	80 64       	ori	r24, 0x40	; 64
    217e:	8a 83       	std	Y+2, r24	; 0x02
    2180:	93 2f       	mov	r25, r19
    2182:	97 95       	ror	r25
    2184:	99 27       	eor	r25, r25
    2186:	97 95       	ror	r25
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	8f 77       	andi	r24, 0x7F	; 127
    218c:	89 2b       	or	r24, r25
    218e:	8a 83       	std	Y+2, r24	; 0x02
			ret = gpio_pin_write_logic(&(led_pin) , GPIO_LOW);
    2190:	ce 01       	movw	r24, r28
    2192:	02 96       	adiw	r24, 0x02	; 2
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    219a:	89 83       	std	Y+1, r24	; 0x01
			ret = E_OK;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <led_turn_toggle>:
 * @return:
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType led_turn_toggle(const led_t *led)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <led_turn_toggle+0x6>
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <led_turn_toggle+0x8>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03
	Std_ReturnType ret = E_OK;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	89 83       	std	Y+1, r24	; 0x01
		if(NULL == led)
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	11 f4       	brne	.+4      	; 0x21d0 <led_turn_toggle+0x20>
		{
			ret = E_NOT_OK;
    21cc:	19 82       	std	Y+1, r1	; 0x01
    21ce:	35 c0       	rjmp	.+106    	; 0x223a <led_turn_toggle+0x8a>
			pin_config_t led_pin ={
									.port = led->port ,
									.pin = led->pin ,
									.logic = led->led_status ,
									.direction = GPIO_DIRECTION_OUTPUT
			};
    21d0:	eb 81       	ldd	r30, Y+3	; 0x03
    21d2:	fc 81       	ldd	r31, Y+4	; 0x04
    21d4:	80 81       	ld	r24, Z
    21d6:	8f 70       	andi	r24, 0x0F	; 15
    21d8:	28 2f       	mov	r18, r24
    21da:	27 70       	andi	r18, 0x07	; 7
    21dc:	eb 81       	ldd	r30, Y+3	; 0x03
    21de:	fc 81       	ldd	r31, Y+4	; 0x04
    21e0:	80 81       	ld	r24, Z
    21e2:	98 2f       	mov	r25, r24
    21e4:	92 95       	swap	r25
    21e6:	9f 70       	andi	r25, 0x0F	; 15
    21e8:	97 70       	andi	r25, 0x07	; 7
    21ea:	eb 81       	ldd	r30, Y+3	; 0x03
    21ec:	fc 81       	ldd	r31, Y+4	; 0x04
    21ee:	80 81       	ld	r24, Z
    21f0:	38 2f       	mov	r19, r24
    21f2:	33 1f       	adc	r19, r19
    21f4:	33 27       	eor	r19, r19
    21f6:	33 1f       	adc	r19, r19
    21f8:	27 70       	andi	r18, 0x07	; 7
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	88 7f       	andi	r24, 0xF8	; 248
    21fe:	82 2b       	or	r24, r18
    2200:	8a 83       	std	Y+2, r24	; 0x02
    2202:	89 2f       	mov	r24, r25
    2204:	87 70       	andi	r24, 0x07	; 7
    2206:	98 2f       	mov	r25, r24
    2208:	99 0f       	add	r25, r25
    220a:	99 0f       	add	r25, r25
    220c:	99 0f       	add	r25, r25
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	87 7c       	andi	r24, 0xC7	; 199
    2212:	89 2b       	or	r24, r25
    2214:	8a 83       	std	Y+2, r24	; 0x02
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	80 64       	ori	r24, 0x40	; 64
    221a:	8a 83       	std	Y+2, r24	; 0x02
    221c:	93 2f       	mov	r25, r19
    221e:	97 95       	ror	r25
    2220:	99 27       	eor	r25, r25
    2222:	97 95       	ror	r25
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	8f 77       	andi	r24, 0x7F	; 127
    2228:	89 2b       	or	r24, r25
    222a:	8a 83       	std	Y+2, r24	; 0x02
			ret = gpio_pin_toggle_logic(&led_pin) ;
    222c:	ce 01       	movw	r24, r28
    222e:	02 96       	adiw	r24, 0x02	; 2
    2230:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <gpio_pin_toggle_logic>
    2234:	89 83       	std	Y+1, r24	; 0x01
			ret = E_OK;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	89 83       	std	Y+1, r24	; 0x01
		}
		return ret;
    223a:	89 81       	ldd	r24, Y+1	; 0x01
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <lcd_4bit_intialize>:
static Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn);
static Std_ReturnType lcd_8bit_send_enable_signal(const chr_lcd_8bit_t *lcd);
static Std_ReturnType lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd, uint8 row, uint8 coulmn);


Std_ReturnType lcd_4bit_intialize(const chr_lcd_4bit_t *lcd){
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	e8 97       	sbiw	r28, 0x38	; 56
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	98 af       	std	Y+56, r25	; 0x38
    2260:	8f ab       	std	Y+55, r24	; 0x37
    Std_ReturnType ret = E_OK;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	8e ab       	std	Y+54, r24	; 0x36
    uint8 l_data_pins_counter = 0;
    2266:	1d aa       	std	Y+53, r1	; 0x35
    if(NULL == lcd){
    2268:	8f a9       	ldd	r24, Y+55	; 0x37
    226a:	98 ad       	ldd	r25, Y+56	; 0x38
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	11 f4       	brne	.+4      	; 0x2274 <lcd_4bit_intialize+0x2a>
        ret = E_NOT_OK;
    2270:	1e aa       	std	Y+54, r1	; 0x36
    2272:	f8 c1       	rjmp	.+1008   	; 0x2664 <lcd_4bit_intialize+0x41a>
    }
    else{
        ret = gpio_pin_intialize(&(lcd->lcd_rs));
    2274:	8f a9       	ldd	r24, Y+55	; 0x37
    2276:	98 ad       	ldd	r25, Y+56	; 0x38
    2278:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    227c:	8e ab       	std	Y+54, r24	; 0x36
        ret = gpio_pin_intialize(&(lcd->lcd_en));
    227e:	8f a9       	ldd	r24, Y+55	; 0x37
    2280:	98 ad       	ldd	r25, Y+56	; 0x38
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    2288:	8e ab       	std	Y+54, r24	; 0x36
        for(l_data_pins_counter=0; l_data_pins_counter<4; l_data_pins_counter++){
    228a:	1d aa       	std	Y+53, r1	; 0x35
    228c:	10 c0       	rjmp	.+32     	; 0x22ae <lcd_4bit_intialize+0x64>
            ret = gpio_pin_intialize(&(lcd->lcd_data[l_data_pins_counter]));
    228e:	8f a9       	ldd	r24, Y+55	; 0x37
    2290:	98 ad       	ldd	r25, Y+56	; 0x38
    2292:	9c 01       	movw	r18, r24
    2294:	2e 5f       	subi	r18, 0xFE	; 254
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	8d a9       	ldd	r24, Y+53	; 0x35
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	82 0f       	add	r24, r18
    22a0:	93 1f       	adc	r25, r19
    22a2:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    22a6:	8e ab       	std	Y+54, r24	; 0x36
        ret = E_NOT_OK;
    }
    else{
        ret = gpio_pin_intialize(&(lcd->lcd_rs));
        ret = gpio_pin_intialize(&(lcd->lcd_en));
        for(l_data_pins_counter=0; l_data_pins_counter<4; l_data_pins_counter++){
    22a8:	8d a9       	ldd	r24, Y+53	; 0x35
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	8d ab       	std	Y+53, r24	; 0x35
    22ae:	8d a9       	ldd	r24, Y+53	; 0x35
    22b0:	84 30       	cpi	r24, 0x04	; 4
    22b2:	68 f3       	brcs	.-38     	; 0x228e <lcd_4bit_intialize+0x44>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a0 ea       	ldi	r26, 0xA0	; 160
    22ba:	b1 e4       	ldi	r27, 0x41	; 65
    22bc:	89 ab       	std	Y+49, r24	; 0x31
    22be:	9a ab       	std	Y+50, r25	; 0x32
    22c0:	ab ab       	std	Y+51, r26	; 0x33
    22c2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	69 a9       	ldd	r22, Y+49	; 0x31
    22c6:	7a a9       	ldd	r23, Y+50	; 0x32
    22c8:	8b a9       	ldd	r24, Y+51	; 0x33
    22ca:	9c a9       	ldd	r25, Y+52	; 0x34
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a ef       	ldi	r20, 0xFA	; 250
    22d2:	54 e4       	ldi	r21, 0x44	; 68
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8d a7       	std	Y+45, r24	; 0x2d
    22de:	9e a7       	std	Y+46, r25	; 0x2e
    22e0:	af a7       	std	Y+47, r26	; 0x2f
    22e2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    22e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ea:	98 a9       	ldd	r25, Y+48	; 0x30
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <lcd_4bit_intialize+0xbc>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9c a7       	std	Y+44, r25	; 0x2c
    2302:	8b a7       	std	Y+43, r24	; 0x2b
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <lcd_4bit_intialize+0x13a>
	else if (__tmp > 65535)
    2306:	6d a5       	ldd	r22, Y+45	; 0x2d
    2308:	7e a5       	ldd	r23, Y+46	; 0x2e
    230a:	8f a5       	ldd	r24, Y+47	; 0x2f
    230c:	98 a9       	ldd	r25, Y+48	; 0x30
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <lcd_4bit_intialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	69 a9       	ldd	r22, Y+49	; 0x31
    2320:	7a a9       	ldd	r23, Y+50	; 0x32
    2322:	8b a9       	ldd	r24, Y+51	; 0x33
    2324:	9c a9       	ldd	r25, Y+52	; 0x34
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9c a7       	std	Y+44, r25	; 0x2c
    2344:	8b a7       	std	Y+43, r24	; 0x2b
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <lcd_4bit_intialize+0x11c>
    2348:	88 ec       	ldi	r24, 0xC8	; 200
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9a a7       	std	Y+42, r25	; 0x2a
    234e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2350:	89 a5       	ldd	r24, Y+41	; 0x29
    2352:	9a a5       	ldd	r25, Y+42	; 0x2a
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <lcd_4bit_intialize+0x10a>
    2358:	9a a7       	std	Y+42, r25	; 0x2a
    235a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8b a5       	ldd	r24, Y+43	; 0x2b
    235e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9c a7       	std	Y+44, r25	; 0x2c
    2364:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8b a5       	ldd	r24, Y+43	; 0x2b
    2368:	9c a5       	ldd	r25, Y+44	; 0x2c
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <lcd_4bit_intialize+0xfe>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <lcd_4bit_intialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6d a5       	ldd	r22, Y+45	; 0x2d
    2372:	7e a5       	ldd	r23, Y+46	; 0x2e
    2374:	8f a5       	ldd	r24, Y+47	; 0x2f
    2376:	98 a9       	ldd	r25, Y+48	; 0x30
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9c a7       	std	Y+44, r25	; 0x2c
    2382:	8b a7       	std	Y+43, r24	; 0x2b
    2384:	8b a5       	ldd	r24, Y+43	; 0x2b
    2386:	9c a5       	ldd	r25, Y+44	; 0x2c
    2388:	98 a7       	std	Y+40, r25	; 0x28
    238a:	8f a3       	std	Y+39, r24	; 0x27
    238c:	8f a1       	ldd	r24, Y+39	; 0x27
    238e:	98 a5       	ldd	r25, Y+40	; 0x28
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <lcd_4bit_intialize+0x146>
    2394:	98 a7       	std	Y+40, r25	; 0x28
    2396:	8f a3       	std	Y+39, r24	; 0x27
            ret = gpio_pin_intialize(&(lcd->lcd_data[l_data_pins_counter]));
        }
        _delay_ms(20);
        ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2398:	8f a9       	ldd	r24, Y+55	; 0x37
    239a:	98 ad       	ldd	r25, Y+56	; 0x38
    239c:	68 e3       	ldi	r22, 0x38	; 56
    239e:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    23a2:	8e ab       	std	Y+54, r24	; 0x36
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 ea       	ldi	r26, 0xA0	; 160
    23aa:	b0 e4       	ldi	r27, 0x40	; 64
    23ac:	8b a3       	std	Y+35, r24	; 0x23
    23ae:	9c a3       	std	Y+36, r25	; 0x24
    23b0:	ad a3       	std	Y+37, r26	; 0x25
    23b2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6b a1       	ldd	r22, Y+35	; 0x23
    23b6:	7c a1       	ldd	r23, Y+36	; 0x24
    23b8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ba:	9e a1       	ldd	r25, Y+38	; 0x26
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a ef       	ldi	r20, 0xFA	; 250
    23c2:	54 e4       	ldi	r21, 0x44	; 68
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8f 8f       	std	Y+31, r24	; 0x1f
    23ce:	98 a3       	std	Y+32, r25	; 0x20
    23d0:	a9 a3       	std	Y+33, r26	; 0x21
    23d2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    23d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23d6:	78 a1       	ldd	r23, Y+32	; 0x20
    23d8:	89 a1       	ldd	r24, Y+33	; 0x21
    23da:	9a a1       	ldd	r25, Y+34	; 0x22
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <lcd_4bit_intialize+0x1ac>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9e 8f       	std	Y+30, r25	; 0x1e
    23f2:	8d 8f       	std	Y+29, r24	; 0x1d
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <lcd_4bit_intialize+0x22a>
	else if (__tmp > 65535)
    23f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    23f8:	78 a1       	ldd	r23, Y+32	; 0x20
    23fa:	89 a1       	ldd	r24, Y+33	; 0x21
    23fc:	9a a1       	ldd	r25, Y+34	; 0x22
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <lcd_4bit_intialize+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6b a1       	ldd	r22, Y+35	; 0x23
    2410:	7c a1       	ldd	r23, Y+36	; 0x24
    2412:	8d a1       	ldd	r24, Y+37	; 0x25
    2414:	9e a1       	ldd	r25, Y+38	; 0x26
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 8f       	std	Y+30, r25	; 0x1e
    2434:	8d 8f       	std	Y+29, r24	; 0x1d
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <lcd_4bit_intialize+0x20c>
    2438:	88 ec       	ldi	r24, 0xC8	; 200
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9c 8f       	std	Y+28, r25	; 0x1c
    243e:	8b 8f       	std	Y+27, r24	; 0x1b
    2440:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2442:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <lcd_4bit_intialize+0x1fa>
    2448:	9c 8f       	std	Y+28, r25	; 0x1c
    244a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9e 8f       	std	Y+30, r25	; 0x1e
    2454:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2458:	9e 8d       	ldd	r25, Y+30	; 0x1e
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <lcd_4bit_intialize+0x1ee>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <lcd_4bit_intialize+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2462:	78 a1       	ldd	r23, Y+32	; 0x20
    2464:	89 a1       	ldd	r24, Y+33	; 0x21
    2466:	9a a1       	ldd	r25, Y+34	; 0x22
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 8f       	std	Y+30, r25	; 0x1e
    2472:	8d 8f       	std	Y+29, r24	; 0x1d
    2474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2476:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2478:	9a 8f       	std	Y+26, r25	; 0x1a
    247a:	89 8f       	std	Y+25, r24	; 0x19
    247c:	89 8d       	ldd	r24, Y+25	; 0x19
    247e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <lcd_4bit_intialize+0x236>
    2484:	9a 8f       	std	Y+26, r25	; 0x1a
    2486:	89 8f       	std	Y+25, r24	; 0x19
        _delay_ms(5);
        ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2488:	8f a9       	ldd	r24, Y+55	; 0x37
    248a:	98 ad       	ldd	r25, Y+56	; 0x38
    248c:	68 e3       	ldi	r22, 0x38	; 56
    248e:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    2492:	8e ab       	std	Y+54, r24	; 0x36
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a6 e1       	ldi	r26, 0x16	; 22
    249a:	b3 e4       	ldi	r27, 0x43	; 67
    249c:	8d 8b       	std	Y+21, r24	; 0x15
    249e:	9e 8b       	std	Y+22, r25	; 0x16
    24a0:	af 8b       	std	Y+23, r26	; 0x17
    24a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24a4:	6d 89       	ldd	r22, Y+21	; 0x15
    24a6:	7e 89       	ldd	r23, Y+22	; 0x16
    24a8:	8f 89       	ldd	r24, Y+23	; 0x17
    24aa:	98 8d       	ldd	r25, Y+24	; 0x18
    24ac:	2b ea       	ldi	r18, 0xAB	; 171
    24ae:	3a ea       	ldi	r19, 0xAA	; 170
    24b0:	4a e2       	ldi	r20, 0x2A	; 42
    24b2:	50 e4       	ldi	r21, 0x40	; 64
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	89 8b       	std	Y+17, r24	; 0x11
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	ab 8b       	std	Y+19, r26	; 0x13
    24c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    24c4:	69 89       	ldd	r22, Y+17	; 0x11
    24c6:	7a 89       	ldd	r23, Y+18	; 0x12
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	1c f4       	brge	.+6      	; 0x24e2 <lcd_4bit_intialize+0x298>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	88 8b       	std	Y+16, r24	; 0x10
    24e0:	91 c0       	rjmp	.+290    	; 0x2604 <lcd_4bit_intialize+0x3ba>
	else if (__tmp > 255)
    24e2:	69 89       	ldd	r22, Y+17	; 0x11
    24e4:	7a 89       	ldd	r23, Y+18	; 0x12
    24e6:	8b 89       	ldd	r24, Y+19	; 0x13
    24e8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	53 e4       	ldi	r21, 0x43	; 67
    24f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	0c f0       	brlt	.+2      	; 0x24fc <lcd_4bit_intialize+0x2b2>
    24fa:	7b c0       	rjmp	.+246    	; 0x25f2 <lcd_4bit_intialize+0x3a8>
	{
		_delay_ms(__us / 1000.0);
    24fc:	6d 89       	ldd	r22, Y+21	; 0x15
    24fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2500:	8f 89       	ldd	r24, Y+23	; 0x17
    2502:	98 8d       	ldd	r25, Y+24	; 0x18
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a e7       	ldi	r20, 0x7A	; 122
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	8c 87       	std	Y+12, r24	; 0x0c
    2516:	9d 87       	std	Y+13, r25	; 0x0d
    2518:	ae 87       	std	Y+14, r26	; 0x0e
    251a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	6c 85       	ldd	r22, Y+12	; 0x0c
    251e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2520:	8e 85       	ldd	r24, Y+14	; 0x0e
    2522:	9f 85       	ldd	r25, Y+15	; 0x0f
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	4a ef       	ldi	r20, 0xFA	; 250
    252a:	54 e4       	ldi	r21, 0x44	; 68
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	88 87       	std	Y+8, r24	; 0x08
    2536:	99 87       	std	Y+9, r25	; 0x09
    2538:	aa 87       	std	Y+10, r26	; 0x0a
    253a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    253c:	68 85       	ldd	r22, Y+8	; 0x08
    253e:	79 85       	ldd	r23, Y+9	; 0x09
    2540:	8a 85       	ldd	r24, Y+10	; 0x0a
    2542:	9b 85       	ldd	r25, Y+11	; 0x0b
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	2c f4       	brge	.+10     	; 0x255e <lcd_4bit_intialize+0x314>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9f 83       	std	Y+7, r25	; 0x07
    255a:	8e 83       	std	Y+6, r24	; 0x06
    255c:	3f c0       	rjmp	.+126    	; 0x25dc <lcd_4bit_intialize+0x392>
	else if (__tmp > 65535)
    255e:	68 85       	ldd	r22, Y+8	; 0x08
    2560:	79 85       	ldd	r23, Y+9	; 0x09
    2562:	8a 85       	ldd	r24, Y+10	; 0x0a
    2564:	9b 85       	ldd	r25, Y+11	; 0x0b
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	4c f5       	brge	.+82     	; 0x25c8 <lcd_4bit_intialize+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2576:	6c 85       	ldd	r22, Y+12	; 0x0c
    2578:	7d 85       	ldd	r23, Y+13	; 0x0d
    257a:	8e 85       	ldd	r24, Y+14	; 0x0e
    257c:	9f 85       	ldd	r25, Y+15	; 0x0f
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9f 83       	std	Y+7, r25	; 0x07
    259c:	8e 83       	std	Y+6, r24	; 0x06
    259e:	0f c0       	rjmp	.+30     	; 0x25be <lcd_4bit_intialize+0x374>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9d 83       	std	Y+5, r25	; 0x05
    25a6:	8c 83       	std	Y+4, r24	; 0x04
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	9d 81       	ldd	r25, Y+5	; 0x05
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <lcd_4bit_intialize+0x362>
    25b0:	9d 83       	std	Y+5, r25	; 0x05
    25b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8e 81       	ldd	r24, Y+6	; 0x06
    25b6:	9f 81       	ldd	r25, Y+7	; 0x07
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9f 83       	std	Y+7, r25	; 0x07
    25bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8e 81       	ldd	r24, Y+6	; 0x06
    25c0:	9f 81       	ldd	r25, Y+7	; 0x07
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <lcd_4bit_intialize+0x356>
    25c6:	24 c0       	rjmp	.+72     	; 0x2610 <lcd_4bit_intialize+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	68 85       	ldd	r22, Y+8	; 0x08
    25ca:	79 85       	ldd	r23, Y+9	; 0x09
    25cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9f 83       	std	Y+7, r25	; 0x07
    25da:	8e 83       	std	Y+6, r24	; 0x06
    25dc:	8e 81       	ldd	r24, Y+6	; 0x06
    25de:	9f 81       	ldd	r25, Y+7	; 0x07
    25e0:	9b 83       	std	Y+3, r25	; 0x03
    25e2:	8a 83       	std	Y+2, r24	; 0x02
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	9b 81       	ldd	r25, Y+3	; 0x03
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <lcd_4bit_intialize+0x39e>
    25ec:	9b 83       	std	Y+3, r25	; 0x03
    25ee:	8a 83       	std	Y+2, r24	; 0x02
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <lcd_4bit_intialize+0x3c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25f2:	69 89       	ldd	r22, Y+17	; 0x11
    25f4:	7a 89       	ldd	r23, Y+18	; 0x12
    25f6:	8b 89       	ldd	r24, Y+19	; 0x13
    25f8:	9c 89       	ldd	r25, Y+20	; 0x14
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	88 8b       	std	Y+16, r24	; 0x10
    2604:	88 89       	ldd	r24, Y+16	; 0x10
    2606:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	8a 95       	dec	r24
    260c:	f1 f7       	brne	.-4      	; 0x260a <lcd_4bit_intialize+0x3c0>
    260e:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(150);
        ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2610:	8f a9       	ldd	r24, Y+55	; 0x37
    2612:	98 ad       	ldd	r25, Y+56	; 0x38
    2614:	68 e3       	ldi	r22, 0x38	; 56
    2616:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    261a:	8e ab       	std	Y+54, r24	; 0x36

        ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    261c:	8f a9       	ldd	r24, Y+55	; 0x37
    261e:	98 ad       	ldd	r25, Y+56	; 0x38
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    2626:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
    2628:	8f a9       	ldd	r24, Y+55	; 0x37
    262a:	98 ad       	ldd	r25, Y+56	; 0x38
    262c:	62 e0       	ldi	r22, 0x02	; 2
    262e:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    2632:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    2634:	8f a9       	ldd	r24, Y+55	; 0x37
    2636:	98 ad       	ldd	r25, Y+56	; 0x38
    2638:	66 e0       	ldi	r22, 0x06	; 6
    263a:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    263e:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    2640:	8f a9       	ldd	r24, Y+55	; 0x37
    2642:	98 ad       	ldd	r25, Y+56	; 0x38
    2644:	6c e0       	ldi	r22, 0x0C	; 12
    2646:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    264a:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
    264c:	8f a9       	ldd	r24, Y+55	; 0x37
    264e:	98 ad       	ldd	r25, Y+56	; 0x38
    2650:	68 e2       	ldi	r22, 0x28	; 40
    2652:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    2656:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_4bit_send_command(lcd, 0x80);
    2658:	8f a9       	ldd	r24, Y+55	; 0x37
    265a:	98 ad       	ldd	r25, Y+56	; 0x38
    265c:	60 e8       	ldi	r22, 0x80	; 128
    265e:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    2662:	8e ab       	std	Y+54, r24	; 0x36
    }
    return ret;
    2664:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2666:	e8 96       	adiw	r28, 0x38	; 56
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <lcd_4bit_send_command>:


Std_ReturnType lcd_4bit_send_command(const chr_lcd_4bit_t *lcd, uint8 command){
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	00 d0       	rcall	.+0      	; 0x267e <lcd_4bit_send_command+0x6>
    267e:	00 d0       	rcall	.+0      	; 0x2680 <lcd_4bit_send_command+0x8>
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	9b 83       	std	Y+3, r25	; 0x03
    2686:	8a 83       	std	Y+2, r24	; 0x02
    2688:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_OK;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	11 f4       	brne	.+4      	; 0x269a <lcd_4bit_send_command+0x22>
        ret = E_NOT_OK;
    2696:	19 82       	std	Y+1, r1	; 0x01
    2698:	20 c0       	rjmp	.+64     	; 0x26da <lcd_4bit_send_command+0x62>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
        ret = gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_LOW);
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    26a4:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Command through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, command >> 4);
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	28 2f       	mov	r18, r24
    26aa:	22 95       	swap	r18
    26ac:	2f 70       	andi	r18, 0x0F	; 15
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	62 2f       	mov	r22, r18
    26b4:	0e 94 2f 19 	call	0x325e	; 0x325e <lcd_send_4bits>
    26b8:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <lcd_4bit_send_enable_signal>
    26c2:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Command through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, command);
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	9b 81       	ldd	r25, Y+3	; 0x03
    26c8:	6c 81       	ldd	r22, Y+4	; 0x04
    26ca:	0e 94 2f 19 	call	0x325e	; 0x325e <lcd_send_4bits>
    26ce:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	9b 81       	ldd	r25, Y+3	; 0x03
    26d4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <lcd_4bit_send_enable_signal>
    26d8:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    26da:	89 81       	ldd	r24, Y+1	; 0x01
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <lcd_4bit_send_char_data>:


Std_ReturnType lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd, uint8 data){
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <lcd_4bit_send_char_data+0x6>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <lcd_4bit_send_char_data+0x8>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_OK;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	9b 81       	ldd	r25, Y+3	; 0x03
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	11 f4       	brne	.+4      	; 0x270c <lcd_4bit_send_char_data+0x22>
        ret = E_NOT_OK;
    2708:	19 82       	std	Y+1, r1	; 0x01
    270a:	20 c0       	rjmp	.+64     	; 0x274c <lcd_4bit_send_char_data+0x62>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
        ret = gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_HIGH);
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	61 e0       	ldi	r22, 0x01	; 1
    2712:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    2716:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Data through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, data >> 4);
    2718:	8c 81       	ldd	r24, Y+4	; 0x04
    271a:	28 2f       	mov	r18, r24
    271c:	22 95       	swap	r18
    271e:	2f 70       	andi	r18, 0x0F	; 15
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	9b 81       	ldd	r25, Y+3	; 0x03
    2724:	62 2f       	mov	r22, r18
    2726:	0e 94 2f 19 	call	0x325e	; 0x325e <lcd_send_4bits>
    272a:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <lcd_4bit_send_enable_signal>
    2734:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Data through the (4-Pins" Data lines */
        ret = lcd_send_4bits(lcd, data);
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	6c 81       	ldd	r22, Y+4	; 0x04
    273c:	0e 94 2f 19 	call	0x325e	; 0x325e <lcd_send_4bits>
    2740:	89 83       	std	Y+1, r24	; 0x01
        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_4bit_send_enable_signal(lcd);
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <lcd_4bit_send_enable_signal>
    274a:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <lcd_4bit_send_char_data_pos>:


Std_ReturnType lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row, uint8 column, uint8 data){
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <lcd_4bit_send_char_data_pos+0x6>
    2762:	00 d0       	rcall	.+0      	; 0x2764 <lcd_4bit_send_char_data_pos+0x8>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <lcd_4bit_send_char_data_pos+0xa>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9b 83       	std	Y+3, r25	; 0x03
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	6c 83       	std	Y+4, r22	; 0x04
    2770:	4d 83       	std	Y+5, r20	; 0x05
    2772:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_OK;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	9b 81       	ldd	r25, Y+3	; 0x03
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	11 f4       	brne	.+4      	; 0x2784 <lcd_4bit_send_char_data_pos+0x28>
        ret = E_NOT_OK;
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	0d c0       	rjmp	.+26     	; 0x279e <lcd_4bit_send_char_data_pos+0x42>
    }
    else{
        ret = lcd_4bit_set_cursor(lcd, row, column);
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	9b 81       	ldd	r25, Y+3	; 0x03
    2788:	6c 81       	ldd	r22, Y+4	; 0x04
    278a:	4d 81       	ldd	r20, Y+5	; 0x05
    278c:	0e 94 a8 1b 	call	0x3750	; 0x3750 <lcd_4bit_set_cursor>
    2790:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_4bit_send_char_data(lcd, data);
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	9b 81       	ldd	r25, Y+3	; 0x03
    2796:	6e 81       	ldd	r22, Y+6	; 0x06
    2798:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcd_4bit_send_char_data>
    279c:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    279e:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a0:	26 96       	adiw	r28, 0x06	; 6
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <lcd_4bit_send_string>:


Std_ReturnType lcd_4bit_send_string(const chr_lcd_4bit_t *lcd, uint8 *str){
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <lcd_4bit_send_string+0x6>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <lcd_4bit_send_string+0x8>
    27ba:	0f 92       	push	r0
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9b 83       	std	Y+3, r25	; 0x03
    27c2:	8a 83       	std	Y+2, r24	; 0x02
    27c4:	7d 83       	std	Y+5, r23	; 0x05
    27c6:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_OK;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	9b 81       	ldd	r25, Y+3	; 0x03
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	81 f4       	brne	.+32     	; 0x27f4 <lcd_4bit_send_string+0x42>
        ret = E_NOT_OK;
    27d4:	19 82       	std	Y+1, r1	; 0x01
    27d6:	13 c0       	rjmp	.+38     	; 0x27fe <lcd_4bit_send_string+0x4c>
    }
    else{
        while(*str){
            ret = lcd_4bit_send_char_data(lcd, *str++);
    27d8:	ec 81       	ldd	r30, Y+4	; 0x04
    27da:	fd 81       	ldd	r31, Y+5	; 0x05
    27dc:	20 81       	ld	r18, Z
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	9d 81       	ldd	r25, Y+5	; 0x05
    27e2:	01 96       	adiw	r24, 0x01	; 1
    27e4:	9d 83       	std	Y+5, r25	; 0x05
    27e6:	8c 83       	std	Y+4, r24	; 0x04
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	9b 81       	ldd	r25, Y+3	; 0x03
    27ec:	62 2f       	mov	r22, r18
    27ee:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcd_4bit_send_char_data>
    27f2:	89 83       	std	Y+1, r24	; 0x01
    Std_ReturnType ret = E_OK;
    if(NULL == lcd){
        ret = E_NOT_OK;
    }
    else{
        while(*str){
    27f4:	ec 81       	ldd	r30, Y+4	; 0x04
    27f6:	fd 81       	ldd	r31, Y+5	; 0x05
    27f8:	80 81       	ld	r24, Z
    27fa:	88 23       	and	r24, r24
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <lcd_4bit_send_string+0x26>
            ret = lcd_4bit_send_char_data(lcd, *str++);
        }
    }
    return ret;
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <lcd_4bit_send_string_pos>:


Std_ReturnType lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column, uint8 *str){
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	27 97       	sbiw	r28, 0x07	; 7
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	9b 83       	std	Y+3, r25	; 0x03
    2826:	8a 83       	std	Y+2, r24	; 0x02
    2828:	6c 83       	std	Y+4, r22	; 0x04
    282a:	4d 83       	std	Y+5, r20	; 0x05
    282c:	3f 83       	std	Y+7, r19	; 0x07
    282e:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_OK;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	9b 81       	ldd	r25, Y+3	; 0x03
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	11 f4       	brne	.+4      	; 0x2840 <lcd_4bit_send_string_pos+0x30>
        ret = E_NOT_OK;
    283c:	19 82       	std	Y+1, r1	; 0x01
    283e:	1b c0       	rjmp	.+54     	; 0x2876 <lcd_4bit_send_string_pos+0x66>
    }
    else{
        ret = lcd_4bit_set_cursor(lcd, row, column);
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	9b 81       	ldd	r25, Y+3	; 0x03
    2844:	6c 81       	ldd	r22, Y+4	; 0x04
    2846:	4d 81       	ldd	r20, Y+5	; 0x05
    2848:	0e 94 a8 1b 	call	0x3750	; 0x3750 <lcd_4bit_set_cursor>
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	0e c0       	rjmp	.+28     	; 0x286c <lcd_4bit_send_string_pos+0x5c>
        while(*str){
            ret = lcd_4bit_send_char_data(lcd, *str++);
    2850:	ee 81       	ldd	r30, Y+6	; 0x06
    2852:	ff 81       	ldd	r31, Y+7	; 0x07
    2854:	20 81       	ld	r18, Z
    2856:	8e 81       	ldd	r24, Y+6	; 0x06
    2858:	9f 81       	ldd	r25, Y+7	; 0x07
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	9f 83       	std	Y+7, r25	; 0x07
    285e:	8e 83       	std	Y+6, r24	; 0x06
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	62 2f       	mov	r22, r18
    2866:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcd_4bit_send_char_data>
    286a:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
        ret = E_NOT_OK;
    }
    else{
        ret = lcd_4bit_set_cursor(lcd, row, column);
        while(*str){
    286c:	ee 81       	ldd	r30, Y+6	; 0x06
    286e:	ff 81       	ldd	r31, Y+7	; 0x07
    2870:	80 81       	ld	r24, Z
    2872:	88 23       	and	r24, r24
    2874:	69 f7       	brne	.-38     	; 0x2850 <lcd_4bit_send_string_pos+0x40>
            ret = lcd_4bit_send_char_data(lcd, *str++);
        }
    }
    return ret;
    2876:	89 81       	ldd	r24, Y+1	; 0x01
}
    2878:	27 96       	adiw	r28, 0x07	; 7
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <lcd_4bit_send_custom_char>:


Std_ReturnType lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column,
                                         const uint8 _chr[], uint8 mem_pos){
    288a:	0f 93       	push	r16
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	29 97       	sbiw	r28, 0x09	; 9
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	6d 83       	std	Y+5, r22	; 0x05
    28a6:	4e 83       	std	Y+6, r20	; 0x06
    28a8:	38 87       	std	Y+8, r19	; 0x08
    28aa:	2f 83       	std	Y+7, r18	; 0x07
    28ac:	09 87       	std	Y+9, r16	; 0x09
    Std_ReturnType ret = E_OK;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	8a 83       	std	Y+2, r24	; 0x02
    uint8 lcd_counter = 0;
    28b2:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == lcd){
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <lcd_4bit_send_custom_char+0x36>
        ret = E_NOT_OK;
    28bc:	1a 82       	std	Y+2, r1	; 0x02
    28be:	30 c0       	rjmp	.+96     	; 0x2920 <lcd_4bit_send_custom_char+0x96>
    }
    else{
        ret = lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	08 96       	adiw	r24, 0x08	; 8
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	28 2f       	mov	r18, r24
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	62 2f       	mov	r22, r18
    28dc:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    28e0:	8a 83       	std	Y+2, r24	; 0x02
        for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    28e2:	19 82       	std	Y+1, r1	; 0x01
    28e4:	12 c0       	rjmp	.+36     	; 0x290a <lcd_4bit_send_custom_char+0x80>
            ret = lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	8f 81       	ldd	r24, Y+7	; 0x07
    28ee:	98 85       	ldd	r25, Y+8	; 0x08
    28f0:	fc 01       	movw	r30, r24
    28f2:	e2 0f       	add	r30, r18
    28f4:	f3 1f       	adc	r31, r19
    28f6:	20 81       	ld	r18, Z
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	62 2f       	mov	r22, r18
    28fe:	0e 94 75 13 	call	0x26ea	; 0x26ea <lcd_4bit_send_char_data>
    2902:	8a 83       	std	Y+2, r24	; 0x02
    if(NULL == lcd){
        ret = E_NOT_OK;
    }
    else{
        ret = lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
        for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	88 30       	cpi	r24, 0x08	; 8
    290e:	58 f3       	brcs	.-42     	; 0x28e6 <lcd_4bit_send_custom_char+0x5c>
            ret = lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
        }
        ret = lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	9c 81       	ldd	r25, Y+4	; 0x04
    2914:	6d 81       	ldd	r22, Y+5	; 0x05
    2916:	4e 81       	ldd	r20, Y+6	; 0x06
    2918:	29 85       	ldd	r18, Y+9	; 0x09
    291a:	0e 94 ae 13 	call	0x275c	; 0x275c <lcd_4bit_send_char_data_pos>
    291e:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2922:	29 96       	adiw	r28, 0x09	; 9
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	0f 91       	pop	r16
    2934:	08 95       	ret

00002936 <lcd_8bit_intialize>:

Std_ReturnType lcd_8bit_intialize(const chr_lcd_8bit_t *lcd){
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	e8 97       	sbiw	r28, 0x38	; 56
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	98 af       	std	Y+56, r25	; 0x38
    294c:	8f ab       	std	Y+55, r24	; 0x37
    Std_ReturnType ret = E_OK;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	8e ab       	std	Y+54, r24	; 0x36
    uint8 l_data_pins_counter = 0;
    2952:	1d aa       	std	Y+53, r1	; 0x35
    if(NULL == lcd){
    2954:	8f a9       	ldd	r24, Y+55	; 0x37
    2956:	98 ad       	ldd	r25, Y+56	; 0x38
    2958:	00 97       	sbiw	r24, 0x00	; 0
    295a:	11 f4       	brne	.+4      	; 0x2960 <lcd_8bit_intialize+0x2a>
        ret = E_NOT_OK;
    295c:	1e aa       	std	Y+54, r1	; 0x36
    295e:	f8 c1       	rjmp	.+1008   	; 0x2d50 <lcd_8bit_intialize+0x41a>
    }
    else{
        ret = gpio_pin_intialize(&(lcd->lcd_rs));
    2960:	8f a9       	ldd	r24, Y+55	; 0x37
    2962:	98 ad       	ldd	r25, Y+56	; 0x38
    2964:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    2968:	8e ab       	std	Y+54, r24	; 0x36
        ret = gpio_pin_intialize(&(lcd->lcd_en));
    296a:	8f a9       	ldd	r24, Y+55	; 0x37
    296c:	98 ad       	ldd	r25, Y+56	; 0x38
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    2974:	8e ab       	std	Y+54, r24	; 0x36
        for(l_data_pins_counter=0; l_data_pins_counter<8; l_data_pins_counter++){
    2976:	1d aa       	std	Y+53, r1	; 0x35
    2978:	10 c0       	rjmp	.+32     	; 0x299a <lcd_8bit_intialize+0x64>
            ret = gpio_pin_intialize(&(lcd->lcd_data[l_data_pins_counter]));
    297a:	8f a9       	ldd	r24, Y+55	; 0x37
    297c:	98 ad       	ldd	r25, Y+56	; 0x38
    297e:	9c 01       	movw	r18, r24
    2980:	2e 5f       	subi	r18, 0xFE	; 254
    2982:	3f 4f       	sbci	r19, 0xFF	; 255
    2984:	8d a9       	ldd	r24, Y+53	; 0x35
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	82 0f       	add	r24, r18
    298c:	93 1f       	adc	r25, r19
    298e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    2992:	8e ab       	std	Y+54, r24	; 0x36
        ret = E_NOT_OK;
    }
    else{
        ret = gpio_pin_intialize(&(lcd->lcd_rs));
        ret = gpio_pin_intialize(&(lcd->lcd_en));
        for(l_data_pins_counter=0; l_data_pins_counter<8; l_data_pins_counter++){
    2994:	8d a9       	ldd	r24, Y+53	; 0x35
    2996:	8f 5f       	subi	r24, 0xFF	; 255
    2998:	8d ab       	std	Y+53, r24	; 0x35
    299a:	8d a9       	ldd	r24, Y+53	; 0x35
    299c:	88 30       	cpi	r24, 0x08	; 8
    299e:	68 f3       	brcs	.-38     	; 0x297a <lcd_8bit_intialize+0x44>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a0 ea       	ldi	r26, 0xA0	; 160
    29a6:	b1 e4       	ldi	r27, 0x41	; 65
    29a8:	89 ab       	std	Y+49, r24	; 0x31
    29aa:	9a ab       	std	Y+50, r25	; 0x32
    29ac:	ab ab       	std	Y+51, r26	; 0x33
    29ae:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b0:	69 a9       	ldd	r22, Y+49	; 0x31
    29b2:	7a a9       	ldd	r23, Y+50	; 0x32
    29b4:	8b a9       	ldd	r24, Y+51	; 0x33
    29b6:	9c a9       	ldd	r25, Y+52	; 0x34
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	4a ef       	ldi	r20, 0xFA	; 250
    29be:	54 e4       	ldi	r21, 0x44	; 68
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	8d a7       	std	Y+45, r24	; 0x2d
    29ca:	9e a7       	std	Y+46, r25	; 0x2e
    29cc:	af a7       	std	Y+47, r26	; 0x2f
    29ce:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    29d0:	6d a5       	ldd	r22, Y+45	; 0x2d
    29d2:	7e a5       	ldd	r23, Y+46	; 0x2e
    29d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d6:	98 a9       	ldd	r25, Y+48	; 0x30
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	5f e3       	ldi	r21, 0x3F	; 63
    29e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e4:	88 23       	and	r24, r24
    29e6:	2c f4       	brge	.+10     	; 0x29f2 <lcd_8bit_intialize+0xbc>
		__ticks = 1;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	9c a7       	std	Y+44, r25	; 0x2c
    29ee:	8b a7       	std	Y+43, r24	; 0x2b
    29f0:	3f c0       	rjmp	.+126    	; 0x2a70 <lcd_8bit_intialize+0x13a>
	else if (__tmp > 65535)
    29f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    29f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    29f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f8:	98 a9       	ldd	r25, Y+48	; 0x30
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	3f ef       	ldi	r19, 0xFF	; 255
    29fe:	4f e7       	ldi	r20, 0x7F	; 127
    2a00:	57 e4       	ldi	r21, 0x47	; 71
    2a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	4c f5       	brge	.+82     	; 0x2a5c <lcd_8bit_intialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a10:	9c a9       	ldd	r25, Y+52	; 0x34
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9c a7       	std	Y+44, r25	; 0x2c
    2a30:	8b a7       	std	Y+43, r24	; 0x2b
    2a32:	0f c0       	rjmp	.+30     	; 0x2a52 <lcd_8bit_intialize+0x11c>
    2a34:	88 ec       	ldi	r24, 0xC8	; 200
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9a a7       	std	Y+42, r25	; 0x2a
    2a3a:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <lcd_8bit_intialize+0x10a>
    2a44:	9a a7       	std	Y+42, r25	; 0x2a
    2a46:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	9c a7       	std	Y+44, r25	; 0x2c
    2a50:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	69 f7       	brne	.-38     	; 0x2a34 <lcd_8bit_intialize+0xfe>
    2a5a:	14 c0       	rjmp	.+40     	; 0x2a84 <lcd_8bit_intialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a62:	98 a9       	ldd	r25, Y+48	; 0x30
    2a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9c a7       	std	Y+44, r25	; 0x2c
    2a6e:	8b a7       	std	Y+43, r24	; 0x2b
    2a70:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a72:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a74:	98 a7       	std	Y+40, r25	; 0x28
    2a76:	8f a3       	std	Y+39, r24	; 0x27
    2a78:	8f a1       	ldd	r24, Y+39	; 0x27
    2a7a:	98 a5       	ldd	r25, Y+40	; 0x28
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <lcd_8bit_intialize+0x146>
    2a80:	98 a7       	std	Y+40, r25	; 0x28
    2a82:	8f a3       	std	Y+39, r24	; 0x27
            ret = gpio_pin_intialize(&(lcd->lcd_data[l_data_pins_counter]));
        }
        _delay_ms(20);
        ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2a84:	8f a9       	ldd	r24, Y+55	; 0x37
    2a86:	98 ad       	ldd	r25, Y+56	; 0x38
    2a88:	68 e3       	ldi	r22, 0x38	; 56
    2a8a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2a8e:	8e ab       	std	Y+54, r24	; 0x36
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	a0 ea       	ldi	r26, 0xA0	; 160
    2a96:	b0 e4       	ldi	r27, 0x40	; 64
    2a98:	8b a3       	std	Y+35, r24	; 0x23
    2a9a:	9c a3       	std	Y+36, r25	; 0x24
    2a9c:	ad a3       	std	Y+37, r26	; 0x25
    2a9e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	4a ef       	ldi	r20, 0xFA	; 250
    2aae:	54 e4       	ldi	r21, 0x44	; 68
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    2aba:	98 a3       	std	Y+32, r25	; 0x20
    2abc:	a9 a3       	std	Y+33, r26	; 0x21
    2abe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ac0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ac2:	78 a1       	ldd	r23, Y+32	; 0x20
    2ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e8       	ldi	r20, 0x80	; 128
    2ace:	5f e3       	ldi	r21, 0x3F	; 63
    2ad0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad4:	88 23       	and	r24, r24
    2ad6:	2c f4       	brge	.+10     	; 0x2ae2 <lcd_8bit_intialize+0x1ac>
		__ticks = 1;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ade:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae0:	3f c0       	rjmp	.+126    	; 0x2b60 <lcd_8bit_intialize+0x22a>
	else if (__tmp > 65535)
    2ae2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ae4:	78 a1       	ldd	r23, Y+32	; 0x20
    2ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	57 e4       	ldi	r21, 0x47	; 71
    2af2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af6:	18 16       	cp	r1, r24
    2af8:	4c f5       	brge	.+82     	; 0x2b4c <lcd_8bit_intialize+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afa:	6b a1       	ldd	r22, Y+35	; 0x23
    2afc:	7c a1       	ldd	r23, Y+36	; 0x24
    2afe:	8d a1       	ldd	r24, Y+37	; 0x25
    2b00:	9e a1       	ldd	r25, Y+38	; 0x26
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e2       	ldi	r20, 0x20	; 32
    2b08:	51 e4       	ldi	r21, 0x41	; 65
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b20:	8d 8f       	std	Y+29, r24	; 0x1d
    2b22:	0f c0       	rjmp	.+30     	; 0x2b42 <lcd_8bit_intialize+0x20c>
    2b24:	88 ec       	ldi	r24, 0xC8	; 200
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9c 8f       	std	Y+28, r25	; 0x1c
    2b2a:	8b 8f       	std	Y+27, r24	; 0x1b
    2b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	f1 f7       	brne	.-4      	; 0x2b30 <lcd_8bit_intialize+0x1fa>
    2b34:	9c 8f       	std	Y+28, r25	; 0x1c
    2b36:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b40:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	69 f7       	brne	.-38     	; 0x2b24 <lcd_8bit_intialize+0x1ee>
    2b4a:	14 c0       	rjmp	.+40     	; 0x2b74 <lcd_8bit_intialize+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b4e:	78 a1       	ldd	r23, Y+32	; 0x20
    2b50:	89 a1       	ldd	r24, Y+33	; 0x21
    2b52:	9a a1       	ldd	r25, Y+34	; 0x22
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5e:	8d 8f       	std	Y+29, r24	; 0x1d
    2b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b64:	9a 8f       	std	Y+26, r25	; 0x1a
    2b66:	89 8f       	std	Y+25, r24	; 0x19
    2b68:	89 8d       	ldd	r24, Y+25	; 0x19
    2b6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <lcd_8bit_intialize+0x236>
    2b70:	9a 8f       	std	Y+26, r25	; 0x1a
    2b72:	89 8f       	std	Y+25, r24	; 0x19
        _delay_ms(5);
        ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2b74:	8f a9       	ldd	r24, Y+55	; 0x37
    2b76:	98 ad       	ldd	r25, Y+56	; 0x38
    2b78:	68 e3       	ldi	r22, 0x38	; 56
    2b7a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2b7e:	8e ab       	std	Y+54, r24	; 0x36
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	a6 e1       	ldi	r26, 0x16	; 22
    2b86:	b3 e4       	ldi	r27, 0x43	; 67
    2b88:	8d 8b       	std	Y+21, r24	; 0x15
    2b8a:	9e 8b       	std	Y+22, r25	; 0x16
    2b8c:	af 8b       	std	Y+23, r26	; 0x17
    2b8e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b90:	6d 89       	ldd	r22, Y+21	; 0x15
    2b92:	7e 89       	ldd	r23, Y+22	; 0x16
    2b94:	8f 89       	ldd	r24, Y+23	; 0x17
    2b96:	98 8d       	ldd	r25, Y+24	; 0x18
    2b98:	2b ea       	ldi	r18, 0xAB	; 171
    2b9a:	3a ea       	ldi	r19, 0xAA	; 170
    2b9c:	4a e2       	ldi	r20, 0x2A	; 42
    2b9e:	50 e4       	ldi	r21, 0x40	; 64
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	89 8b       	std	Y+17, r24	; 0x11
    2baa:	9a 8b       	std	Y+18, r25	; 0x12
    2bac:	ab 8b       	std	Y+19, r26	; 0x13
    2bae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bb0:	69 89       	ldd	r22, Y+17	; 0x11
    2bb2:	7a 89       	ldd	r23, Y+18	; 0x12
    2bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e8       	ldi	r20, 0x80	; 128
    2bbe:	5f e3       	ldi	r21, 0x3F	; 63
    2bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bc4:	88 23       	and	r24, r24
    2bc6:	1c f4       	brge	.+6      	; 0x2bce <lcd_8bit_intialize+0x298>
		__ticks = 1;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	88 8b       	std	Y+16, r24	; 0x10
    2bcc:	91 c0       	rjmp	.+290    	; 0x2cf0 <lcd_8bit_intialize+0x3ba>
	else if (__tmp > 255)
    2bce:	69 89       	ldd	r22, Y+17	; 0x11
    2bd0:	7a 89       	ldd	r23, Y+18	; 0x12
    2bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	53 e4       	ldi	r21, 0x43	; 67
    2bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	0c f0       	brlt	.+2      	; 0x2be8 <lcd_8bit_intialize+0x2b2>
    2be6:	7b c0       	rjmp	.+246    	; 0x2cde <lcd_8bit_intialize+0x3a8>
	{
		_delay_ms(__us / 1000.0);
    2be8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bea:	7e 89       	ldd	r23, Y+22	; 0x16
    2bec:	8f 89       	ldd	r24, Y+23	; 0x17
    2bee:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	4a e7       	ldi	r20, 0x7A	; 122
    2bf6:	54 e4       	ldi	r21, 0x44	; 68
    2bf8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8c 87       	std	Y+12, r24	; 0x0c
    2c02:	9d 87       	std	Y+13, r25	; 0x0d
    2c04:	ae 87       	std	Y+14, r26	; 0x0e
    2c06:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a ef       	ldi	r20, 0xFA	; 250
    2c16:	54 e4       	ldi	r21, 0x44	; 68
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	88 87       	std	Y+8, r24	; 0x08
    2c22:	99 87       	std	Y+9, r25	; 0x09
    2c24:	aa 87       	std	Y+10, r26	; 0x0a
    2c26:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c28:	68 85       	ldd	r22, Y+8	; 0x08
    2c2a:	79 85       	ldd	r23, Y+9	; 0x09
    2c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	2c f4       	brge	.+10     	; 0x2c4a <lcd_8bit_intialize+0x314>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9f 83       	std	Y+7, r25	; 0x07
    2c46:	8e 83       	std	Y+6, r24	; 0x06
    2c48:	3f c0       	rjmp	.+126    	; 0x2cc8 <lcd_8bit_intialize+0x392>
	else if (__tmp > 65535)
    2c4a:	68 85       	ldd	r22, Y+8	; 0x08
    2c4c:	79 85       	ldd	r23, Y+9	; 0x09
    2c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c50:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	3f ef       	ldi	r19, 0xFF	; 255
    2c56:	4f e7       	ldi	r20, 0x7F	; 127
    2c58:	57 e4       	ldi	r21, 0x47	; 71
    2c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	4c f5       	brge	.+82     	; 0x2cb4 <lcd_8bit_intialize+0x37e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c62:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c64:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c66:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c68:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	51 e4       	ldi	r21, 0x41	; 65
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9f 83       	std	Y+7, r25	; 0x07
    2c88:	8e 83       	std	Y+6, r24	; 0x06
    2c8a:	0f c0       	rjmp	.+30     	; 0x2caa <lcd_8bit_intialize+0x374>
    2c8c:	88 ec       	ldi	r24, 0xC8	; 200
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9d 83       	std	Y+5, r25	; 0x05
    2c92:	8c 83       	std	Y+4, r24	; 0x04
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	9d 81       	ldd	r25, Y+5	; 0x05
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <lcd_8bit_intialize+0x362>
    2c9c:	9d 83       	std	Y+5, r25	; 0x05
    2c9e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	9f 83       	std	Y+7, r25	; 0x07
    2ca8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2caa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cac:	9f 81       	ldd	r25, Y+7	; 0x07
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	69 f7       	brne	.-38     	; 0x2c8c <lcd_8bit_intialize+0x356>
    2cb2:	24 c0       	rjmp	.+72     	; 0x2cfc <lcd_8bit_intialize+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb4:	68 85       	ldd	r22, Y+8	; 0x08
    2cb6:	79 85       	ldd	r23, Y+9	; 0x09
    2cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9f 83       	std	Y+7, r25	; 0x07
    2cc6:	8e 83       	std	Y+6, r24	; 0x06
    2cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cca:	9f 81       	ldd	r25, Y+7	; 0x07
    2ccc:	9b 83       	std	Y+3, r25	; 0x03
    2cce:	8a 83       	std	Y+2, r24	; 0x02
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <lcd_8bit_intialize+0x39e>
    2cd8:	9b 83       	std	Y+3, r25	; 0x03
    2cda:	8a 83       	std	Y+2, r24	; 0x02
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <lcd_8bit_intialize+0x3c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cde:	69 89       	ldd	r22, Y+17	; 0x11
    2ce0:	7a 89       	ldd	r23, Y+18	; 0x12
    2ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	88 8b       	std	Y+16, r24	; 0x10
    2cf0:	88 89       	ldd	r24, Y+16	; 0x10
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	8a 95       	dec	r24
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <lcd_8bit_intialize+0x3c0>
    2cfa:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(150);
        ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2cfc:	8f a9       	ldd	r24, Y+55	; 0x37
    2cfe:	98 ad       	ldd	r25, Y+56	; 0x38
    2d00:	68 e3       	ldi	r22, 0x38	; 56
    2d02:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d06:	8e ab       	std	Y+54, r24	; 0x36

        ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    2d08:	8f a9       	ldd	r24, Y+55	; 0x37
    2d0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d12:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
    2d14:	8f a9       	ldd	r24, Y+55	; 0x37
    2d16:	98 ad       	ldd	r25, Y+56	; 0x38
    2d18:	62 e0       	ldi	r22, 0x02	; 2
    2d1a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d1e:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    2d20:	8f a9       	ldd	r24, Y+55	; 0x37
    2d22:	98 ad       	ldd	r25, Y+56	; 0x38
    2d24:	66 e0       	ldi	r22, 0x06	; 6
    2d26:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d2a:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_8bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    2d2c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d2e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d30:	6c e0       	ldi	r22, 0x0C	; 12
    2d32:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d36:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2d38:	8f a9       	ldd	r24, Y+55	; 0x37
    2d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d3c:	68 e3       	ldi	r22, 0x38	; 56
    2d3e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d42:	8e ab       	std	Y+54, r24	; 0x36
        ret = lcd_8bit_send_command(lcd, 0x80);
    2d44:	8f a9       	ldd	r24, Y+55	; 0x37
    2d46:	98 ad       	ldd	r25, Y+56	; 0x38
    2d48:	60 e8       	ldi	r22, 0x80	; 128
    2d4a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    2d4e:	8e ab       	std	Y+54, r24	; 0x36
    }
    return ret;
    2d50:	8e a9       	ldd	r24, Y+54	; 0x36
}
    2d52:	e8 96       	adiw	r28, 0x38	; 56
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <lcd_8bit_send_command>:


Std_ReturnType lcd_8bit_send_command(const chr_lcd_8bit_t *lcd, uint8 command){
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <lcd_8bit_send_command+0x6>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <lcd_8bit_send_command+0x8>
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
    2d76:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_OK;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 l_pin_counter = 0;
    2d7c:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == lcd){
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	9c 81       	ldd	r25, Y+4	; 0x04
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	11 f4       	brne	.+4      	; 0x2d8a <lcd_8bit_send_command+0x26>
        ret = E_NOT_OK;
    2d86:	1a 82       	std	Y+2, r1	; 0x02
    2d88:	32 c0       	rjmp	.+100    	; 0x2dee <lcd_8bit_send_command+0x8a>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
        ret = gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_LOW);
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    2d94:	8a 83       	std	Y+2, r24	; 0x02
        /* Send the Command through the (8-Pins" Data lines */
        for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    2d96:	19 82       	std	Y+1, r1	; 0x01
    2d98:	22 c0       	rjmp	.+68     	; 0x2dde <lcd_8bit_send_command+0x7a>
            ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command >> l_pin_counter) & (uint8)0x01);
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	9c 01       	movw	r18, r24
    2da0:	2e 5f       	subi	r18, 0xFE	; 254
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a9 01       	movw	r20, r18
    2dac:	48 0f       	add	r20, r24
    2dae:	59 1f       	adc	r21, r25
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <lcd_8bit_send_command+0x60>
    2dc0:	75 95       	asr	r23
    2dc2:	67 95       	ror	r22
    2dc4:	8a 95       	dec	r24
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <lcd_8bit_send_command+0x5c>
    2dc8:	cb 01       	movw	r24, r22
    2dca:	28 2f       	mov	r18, r24
    2dcc:	21 70       	andi	r18, 0x01	; 1
    2dce:	ca 01       	movw	r24, r20
    2dd0:	62 2f       	mov	r22, r18
    2dd2:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    2dd6:	8a 83       	std	Y+2, r24	; 0x02
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
        ret = gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_LOW);
        /* Send the Command through the (8-Pins" Data lines */
        for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	88 30       	cpi	r24, 0x08	; 8
    2de2:	d8 f2       	brcs	.-74     	; 0x2d9a <lcd_8bit_send_command+0x36>
            ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command >> l_pin_counter) & (uint8)0x01);
        }
        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_8bit_send_enable_signal(lcd);
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <lcd_8bit_send_enable_signal>
    2dec:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	08 95       	ret

00002e00 <lcd_8bit_send_char_data>:


Std_ReturnType lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd, uint8 data){
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <lcd_8bit_send_char_data+0x6>
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <lcd_8bit_send_char_data+0x8>
    2e08:	0f 92       	push	r0
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	6d 83       	std	Y+5, r22	; 0x05
    Std_ReturnType ret = E_OK;
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	8a 83       	std	Y+2, r24	; 0x02
    uint8 l_pin_counter = 0;
    2e18:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == lcd){
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	11 f4       	brne	.+4      	; 0x2e26 <lcd_8bit_send_char_data+0x26>
        ret = E_NOT_OK;
    2e22:	1a 82       	std	Y+2, r1	; 0x02
    2e24:	32 c0       	rjmp	.+100    	; 0x2e8a <lcd_8bit_send_char_data+0x8a>
    }
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
        ret = gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_HIGH);
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    2e30:	8a 83       	std	Y+2, r24	; 0x02
        /* Send the Data through the (8-Pins" Data lines */
        for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    2e32:	19 82       	std	Y+1, r1	; 0x01
    2e34:	22 c0       	rjmp	.+68     	; 0x2e7a <lcd_8bit_send_char_data+0x7a>
            ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data >> l_pin_counter) & (uint8)0x01);
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	9c 01       	movw	r18, r24
    2e3c:	2e 5f       	subi	r18, 0xFE	; 254
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a9 01       	movw	r20, r18
    2e48:	48 0f       	add	r20, r24
    2e4a:	59 1f       	adc	r21, r25
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	b9 01       	movw	r22, r18
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <lcd_8bit_send_char_data+0x60>
    2e5c:	75 95       	asr	r23
    2e5e:	67 95       	ror	r22
    2e60:	8a 95       	dec	r24
    2e62:	e2 f7       	brpl	.-8      	; 0x2e5c <lcd_8bit_send_char_data+0x5c>
    2e64:	cb 01       	movw	r24, r22
    2e66:	28 2f       	mov	r18, r24
    2e68:	21 70       	andi	r18, 0x01	; 1
    2e6a:	ca 01       	movw	r24, r20
    2e6c:	62 2f       	mov	r22, r18
    2e6e:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    2e72:	8a 83       	std	Y+2, r24	; 0x02
    else{
        /* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
        /* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
        ret = gpio_pin_write_logic(&(lcd->lcd_rs), GPIO_HIGH);
        /* Send the Data through the (8-Pins" Data lines */
        for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	8f 5f       	subi	r24, 0xFF	; 255
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	88 30       	cpi	r24, 0x08	; 8
    2e7e:	d8 f2       	brcs	.-74     	; 0x2e36 <lcd_8bit_send_char_data+0x36>
            ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data >> l_pin_counter) & (uint8)0x01);
        }
        /* Send the Enable Signal on the "E" Pin */
        ret = lcd_8bit_send_enable_signal(lcd);
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <lcd_8bit_send_enable_signal>
    2e88:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <lcd_8bit_send_char_data_pos>:


Std_ReturnType lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row, uint8 column, uint8 data){
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <lcd_8bit_send_char_data_pos+0x6>
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <lcd_8bit_send_char_data_pos+0x8>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <lcd_8bit_send_char_data_pos+0xa>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	9b 83       	std	Y+3, r25	; 0x03
    2eac:	8a 83       	std	Y+2, r24	; 0x02
    2eae:	6c 83       	std	Y+4, r22	; 0x04
    2eb0:	4d 83       	std	Y+5, r20	; 0x05
    2eb2:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_OK;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	11 f4       	brne	.+4      	; 0x2ec4 <lcd_8bit_send_char_data_pos+0x28>
        ret = E_NOT_OK;
    2ec0:	19 82       	std	Y+1, r1	; 0x01
    2ec2:	0d c0       	rjmp	.+26     	; 0x2ede <lcd_8bit_send_char_data_pos+0x42>
    }
    else{
        ret = lcd_8bit_set_cursor(lcd, row, column);
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec8:	6c 81       	ldd	r22, Y+4	; 0x04
    2eca:	4d 81       	ldd	r20, Y+5	; 0x05
    2ecc:	0e 94 44 1b 	call	0x3688	; 0x3688 <lcd_8bit_set_cursor>
    2ed0:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_8bit_send_char_data(lcd, data);
    2ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed6:	6e 81       	ldd	r22, Y+6	; 0x06
    2ed8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <lcd_8bit_send_char_data>
    2edc:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee0:	26 96       	adiw	r28, 0x06	; 6
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <lcd_8bit_send_string>:


Std_ReturnType lcd_8bit_send_string(const chr_lcd_8bit_t *lcd, uint8 *str){
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <lcd_8bit_send_string+0x6>
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <lcd_8bit_send_string+0x8>
    2efa:	0f 92       	push	r0
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	9b 83       	std	Y+3, r25	; 0x03
    2f02:	8a 83       	std	Y+2, r24	; 0x02
    2f04:	7d 83       	std	Y+5, r23	; 0x05
    2f06:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_OK;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f10:	00 97       	sbiw	r24, 0x00	; 0
    2f12:	81 f4       	brne	.+32     	; 0x2f34 <lcd_8bit_send_string+0x42>
        ret = E_NOT_OK;
    2f14:	19 82       	std	Y+1, r1	; 0x01
    2f16:	13 c0       	rjmp	.+38     	; 0x2f3e <lcd_8bit_send_string+0x4c>
    }
    else{
        while(*str){
            ret = lcd_8bit_send_char_data(lcd, *str++);
    2f18:	ec 81       	ldd	r30, Y+4	; 0x04
    2f1a:	fd 81       	ldd	r31, Y+5	; 0x05
    2f1c:	20 81       	ld	r18, Z
    2f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f20:	9d 81       	ldd	r25, Y+5	; 0x05
    2f22:	01 96       	adiw	r24, 0x01	; 1
    2f24:	9d 83       	std	Y+5, r25	; 0x05
    2f26:	8c 83       	std	Y+4, r24	; 0x04
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2c:	62 2f       	mov	r22, r18
    2f2e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <lcd_8bit_send_char_data>
    2f32:	89 83       	std	Y+1, r24	; 0x01
    Std_ReturnType ret = E_OK;
    if(NULL == lcd){
        ret = E_NOT_OK;
    }
    else{
        while(*str){
    2f34:	ec 81       	ldd	r30, Y+4	; 0x04
    2f36:	fd 81       	ldd	r31, Y+5	; 0x05
    2f38:	80 81       	ld	r24, Z
    2f3a:	88 23       	and	r24, r24
    2f3c:	69 f7       	brne	.-38     	; 0x2f18 <lcd_8bit_send_string+0x26>
            ret = lcd_8bit_send_char_data(lcd, *str++);
        }
    }
    return ret;
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <lcd_8bit_send_string_pos>:


Std_ReturnType lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd, uint8 row, uint8 column, uint8 *str){
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	27 97       	sbiw	r28, 0x07	; 7
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	9b 83       	std	Y+3, r25	; 0x03
    2f66:	8a 83       	std	Y+2, r24	; 0x02
    2f68:	6c 83       	std	Y+4, r22	; 0x04
    2f6a:	4d 83       	std	Y+5, r20	; 0x05
    2f6c:	3f 83       	std	Y+7, r19	; 0x07
    2f6e:	2e 83       	std	Y+6, r18	; 0x06
    Std_ReturnType ret = E_OK;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == lcd){
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	11 f4       	brne	.+4      	; 0x2f80 <lcd_8bit_send_string_pos+0x30>
        ret = E_NOT_OK;
    2f7c:	19 82       	std	Y+1, r1	; 0x01
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <lcd_8bit_send_string_pos+0x4e>
    }
    else{
        ret = lcd_8bit_set_cursor(lcd, row, column);
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	9b 81       	ldd	r25, Y+3	; 0x03
    2f84:	6c 81       	ldd	r22, Y+4	; 0x04
    2f86:	4d 81       	ldd	r20, Y+5	; 0x05
    2f88:	0e 94 44 1b 	call	0x3688	; 0x3688 <lcd_8bit_set_cursor>
    2f8c:	89 83       	std	Y+1, r24	; 0x01
        ret = lcd_8bit_send_string(lcd, str);
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	9b 81       	ldd	r25, Y+3	; 0x03
    2f92:	2e 81       	ldd	r18, Y+6	; 0x06
    2f94:	3f 81       	ldd	r19, Y+7	; 0x07
    2f96:	b9 01       	movw	r22, r18
    2f98:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <lcd_8bit_send_string>
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fa0:	27 96       	adiw	r28, 0x07	; 7
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <lcd_8bit_send_custom_char>:


Std_ReturnType lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd, uint8 row, uint8 column,
                                         const uint8 _chr[], uint8 mem_pos){
    2fb2:	0f 93       	push	r16
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	29 97       	sbiw	r28, 0x09	; 9
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
    2fcc:	6d 83       	std	Y+5, r22	; 0x05
    2fce:	4e 83       	std	Y+6, r20	; 0x06
    2fd0:	38 87       	std	Y+8, r19	; 0x08
    2fd2:	2f 83       	std	Y+7, r18	; 0x07
    2fd4:	09 87       	std	Y+9, r16	; 0x09
    Std_ReturnType ret = E_OK;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 lcd_counter = 0;
    2fda:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == lcd){
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	11 f4       	brne	.+4      	; 0x2fe8 <lcd_8bit_send_custom_char+0x36>
        ret = E_NOT_OK;
    2fe4:	1a 82       	std	Y+2, r1	; 0x02
    2fe6:	30 c0       	rjmp	.+96     	; 0x3048 <lcd_8bit_send_custom_char+0x96>
    }
    else{
        ret = lcd_8bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
    2fe8:	89 85       	ldd	r24, Y+9	; 0x09
    2fea:	88 2f       	mov	r24, r24
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	08 96       	adiw	r24, 0x08	; 8
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	62 2f       	mov	r22, r18
    3004:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    3008:	8a 83       	std	Y+2, r24	; 0x02
        for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    300a:	19 82       	std	Y+1, r1	; 0x01
    300c:	12 c0       	rjmp	.+36     	; 0x3032 <lcd_8bit_send_custom_char+0x80>
            ret = lcd_8bit_send_char_data(lcd, _chr[lcd_counter]);
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	8f 81       	ldd	r24, Y+7	; 0x07
    3016:	98 85       	ldd	r25, Y+8	; 0x08
    3018:	fc 01       	movw	r30, r24
    301a:	e2 0f       	add	r30, r18
    301c:	f3 1f       	adc	r31, r19
    301e:	20 81       	ld	r18, Z
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	9c 81       	ldd	r25, Y+4	; 0x04
    3024:	62 2f       	mov	r22, r18
    3026:	0e 94 00 17 	call	0x2e00	; 0x2e00 <lcd_8bit_send_char_data>
    302a:	8a 83       	std	Y+2, r24	; 0x02
    if(NULL == lcd){
        ret = E_NOT_OK;
    }
    else{
        ret = lcd_8bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
        for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	88 30       	cpi	r24, 0x08	; 8
    3036:	58 f3       	brcs	.-42     	; 0x300e <lcd_8bit_send_custom_char+0x5c>
            ret = lcd_8bit_send_char_data(lcd, _chr[lcd_counter]);
        }
        ret = lcd_8bit_send_char_data_pos(lcd, row, column, mem_pos);
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	6d 81       	ldd	r22, Y+5	; 0x05
    303e:	4e 81       	ldd	r20, Y+6	; 0x06
    3040:	29 85       	ldd	r18, Y+9	; 0x09
    3042:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <lcd_8bit_send_char_data_pos>
    3046:	8a 83       	std	Y+2, r24	; 0x02
    }
    return ret;
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
}
    304a:	29 96       	adiw	r28, 0x09	; 9
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	0f 91       	pop	r16
    305c:	08 95       	ret

0000305e <convert_uint8_to_string>:


Std_ReturnType convert_uint8_to_string(uint8 value, uint8 *str){
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	00 d0       	rcall	.+0      	; 0x3064 <convert_uint8_to_string+0x6>
    3064:	00 d0       	rcall	.+0      	; 0x3066 <convert_uint8_to_string+0x8>
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	8a 83       	std	Y+2, r24	; 0x02
    306c:	7c 83       	std	Y+4, r23	; 0x04
    306e:	6b 83       	std	Y+3, r22	; 0x03
    Std_ReturnType ret = E_OK;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == str){
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	9c 81       	ldd	r25, Y+4	; 0x04
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	11 f4       	brne	.+4      	; 0x3080 <convert_uint8_to_string+0x22>
        ret = E_NOT_OK;
    307c:	19 82       	std	Y+1, r1	; 0x01
    307e:	25 c0       	rjmp	.+74     	; 0x30ca <convert_uint8_to_string+0x6c>
    }
    else{
        memset((char *)str, '\0', 4);
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	9c 81       	ldd	r25, Y+4	; 0x04
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	44 e0       	ldi	r20, 0x04	; 4
    308a:	50 e0       	ldi	r21, 0x00	; 0
    308c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <memset>
        sprintf(str, "%i", value);
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	00 d0       	rcall	.+0      	; 0x3098 <convert_uint8_to_string+0x3a>
    3098:	00 d0       	rcall	.+0      	; 0x309a <convert_uint8_to_string+0x3c>
    309a:	00 d0       	rcall	.+0      	; 0x309c <convert_uint8_to_string+0x3e>
    309c:	ed b7       	in	r30, 0x3d	; 61
    309e:	fe b7       	in	r31, 0x3e	; 62
    30a0:	31 96       	adiw	r30, 0x01	; 1
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	9c 81       	ldd	r25, Y+4	; 0x04
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	80 83       	st	Z, r24
    30aa:	80 e6       	ldi	r24, 0x60	; 96
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	93 83       	std	Z+3, r25	; 0x03
    30b0:	82 83       	std	Z+2, r24	; 0x02
    30b2:	35 83       	std	Z+5, r19	; 0x05
    30b4:	24 83       	std	Z+4, r18	; 0x04
    30b6:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <sprintf>
    30ba:	8d b7       	in	r24, 0x3d	; 61
    30bc:	9e b7       	in	r25, 0x3e	; 62
    30be:	06 96       	adiw	r24, 0x06	; 6
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	9e bf       	out	0x3e, r25	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	8d bf       	out	0x3d, r24	; 61
    }
    return ret;
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <convert_uint16_to_string>:


Std_ReturnType convert_uint16_to_string(uint16 value, uint8 *str){
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	2c 97       	sbiw	r28, 0x0c	; 12
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	9a 87       	std	Y+10, r25	; 0x0a
    30f0:	89 87       	std	Y+9, r24	; 0x09
    30f2:	7c 87       	std	Y+12, r23	; 0x0c
    30f4:	6b 87       	std	Y+11, r22	; 0x0b
    Std_ReturnType ret = E_OK;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	8a 83       	std	Y+2, r24	; 0x02
    uint8 Temp_String[6] = {0};
    30fa:	86 e0       	ldi	r24, 0x06	; 6
    30fc:	fe 01       	movw	r30, r28
    30fe:	33 96       	adiw	r30, 0x03	; 3
    3100:	df 01       	movw	r26, r30
    3102:	98 2f       	mov	r25, r24
    3104:	1d 92       	st	X+, r1
    3106:	9a 95       	dec	r25
    3108:	e9 f7       	brne	.-6      	; 0x3104 <convert_uint16_to_string+0x2a>
    uint8 DataCounter = 0;
    310a:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == str){
    310c:	8b 85       	ldd	r24, Y+11	; 0x0b
    310e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	11 f4       	brne	.+4      	; 0x3118 <convert_uint16_to_string+0x3e>
        ret = E_NOT_OK;
    3114:	1a 82       	std	Y+2, r1	; 0x02
    3116:	4a c0       	rjmp	.+148    	; 0x31ac <convert_uint16_to_string+0xd2>
    }
    else{
        memset(str, ' ', 5);
    3118:	8b 85       	ldd	r24, Y+11	; 0x0b
    311a:	9c 85       	ldd	r25, Y+12	; 0x0c
    311c:	60 e2       	ldi	r22, 0x20	; 32
    311e:	70 e0       	ldi	r23, 0x00	; 0
    3120:	45 e0       	ldi	r20, 0x05	; 5
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <memset>
        str[5] = '\0';
    3128:	8b 85       	ldd	r24, Y+11	; 0x0b
    312a:	9c 85       	ldd	r25, Y+12	; 0x0c
    312c:	fc 01       	movw	r30, r24
    312e:	35 96       	adiw	r30, 0x05	; 5
    3130:	10 82       	st	Z, r1
        sprintf((char *)Temp_String, "%i", value);
    3132:	00 d0       	rcall	.+0      	; 0x3134 <convert_uint16_to_string+0x5a>
    3134:	00 d0       	rcall	.+0      	; 0x3136 <convert_uint16_to_string+0x5c>
    3136:	00 d0       	rcall	.+0      	; 0x3138 <convert_uint16_to_string+0x5e>
    3138:	ed b7       	in	r30, 0x3d	; 61
    313a:	fe b7       	in	r31, 0x3e	; 62
    313c:	31 96       	adiw	r30, 0x01	; 1
    313e:	ce 01       	movw	r24, r28
    3140:	03 96       	adiw	r24, 0x03	; 3
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
    3146:	80 e6       	ldi	r24, 0x60	; 96
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	93 83       	std	Z+3, r25	; 0x03
    314c:	82 83       	std	Z+2, r24	; 0x02
    314e:	89 85       	ldd	r24, Y+9	; 0x09
    3150:	9a 85       	ldd	r25, Y+10	; 0x0a
    3152:	95 83       	std	Z+5, r25	; 0x05
    3154:	84 83       	std	Z+4, r24	; 0x04
    3156:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <sprintf>
    315a:	ad b7       	in	r26, 0x3d	; 61
    315c:	be b7       	in	r27, 0x3e	; 62
    315e:	16 96       	adiw	r26, 0x06	; 6
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	be bf       	out	0x3e, r27	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	ad bf       	out	0x3d, r26	; 61
    316a:	15 c0       	rjmp	.+42     	; 0x3196 <convert_uint16_to_string+0xbc>
        while(Temp_String[DataCounter] != '\0'){
            str[DataCounter] = Temp_String[DataCounter];
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	8b 85       	ldd	r24, Y+11	; 0x0b
    3174:	9c 85       	ldd	r25, Y+12	; 0x0c
    3176:	dc 01       	movw	r26, r24
    3178:	a2 0f       	add	r26, r18
    317a:	b3 1f       	adc	r27, r19
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	28 2f       	mov	r18, r24
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	ce 01       	movw	r24, r28
    3184:	03 96       	adiw	r24, 0x03	; 3
    3186:	fc 01       	movw	r30, r24
    3188:	e2 0f       	add	r30, r18
    318a:	f3 1f       	adc	r31, r19
    318c:	80 81       	ld	r24, Z
    318e:	8c 93       	st	X, r24
            DataCounter++;
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	8f 5f       	subi	r24, 0xFF	; 255
    3194:	89 83       	std	Y+1, r24	; 0x01
    }
    else{
        memset(str, ' ', 5);
        str[5] = '\0';
        sprintf((char *)Temp_String, "%i", value);
        while(Temp_String[DataCounter] != '\0'){
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	ce 01       	movw	r24, r28
    319e:	03 96       	adiw	r24, 0x03	; 3
    31a0:	fc 01       	movw	r30, r24
    31a2:	e2 0f       	add	r30, r18
    31a4:	f3 1f       	adc	r31, r19
    31a6:	80 81       	ld	r24, Z
    31a8:	88 23       	and	r24, r24
    31aa:	01 f7       	brne	.-64     	; 0x316c <convert_uint16_to_string+0x92>
            str[DataCounter] = Temp_String[DataCounter];
            DataCounter++;
        }
    }
    return ret;
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31ae:	2c 96       	adiw	r28, 0x0c	; 12
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <convert_uint32_to_string>:


Std_ReturnType convert_uint32_to_string(uint32 value, uint8 *str){
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	27 97       	sbiw	r28, 0x07	; 7
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	6a 83       	std	Y+2, r22	; 0x02
    31d6:	7b 83       	std	Y+3, r23	; 0x03
    31d8:	8c 83       	std	Y+4, r24	; 0x04
    31da:	9d 83       	std	Y+5, r25	; 0x05
    31dc:	5f 83       	std	Y+7, r21	; 0x07
    31de:	4e 83       	std	Y+6, r20	; 0x06
    Std_ReturnType ret = E_OK;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	89 83       	std	Y+1, r24	; 0x01
    if(NULL == str){
    31e4:	8e 81       	ldd	r24, Y+6	; 0x06
    31e6:	9f 81       	ldd	r25, Y+7	; 0x07
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	11 f4       	brne	.+4      	; 0x31f0 <convert_uint32_to_string+0x30>
        ret = E_NOT_OK;
    31ec:	19 82       	std	Y+1, r1	; 0x01
    31ee:	2d c0       	rjmp	.+90     	; 0x324a <convert_uint32_to_string+0x8a>
    }
    else{
        memset((char *)str, '\0', 11);
    31f0:	8e 81       	ldd	r24, Y+6	; 0x06
    31f2:	9f 81       	ldd	r25, Y+7	; 0x07
    31f4:	60 e0       	ldi	r22, 0x00	; 0
    31f6:	70 e0       	ldi	r23, 0x00	; 0
    31f8:	4b e0       	ldi	r20, 0x0B	; 11
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <memset>
        sprintf(str, "%i", value);
    3200:	8d b7       	in	r24, 0x3d	; 61
    3202:	9e b7       	in	r25, 0x3e	; 62
    3204:	08 97       	sbiw	r24, 0x08	; 8
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	9e bf       	out	0x3e, r25	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	8d bf       	out	0x3d, r24	; 61
    3210:	ed b7       	in	r30, 0x3d	; 61
    3212:	fe b7       	in	r31, 0x3e	; 62
    3214:	31 96       	adiw	r30, 0x01	; 1
    3216:	8e 81       	ldd	r24, Y+6	; 0x06
    3218:	9f 81       	ldd	r25, Y+7	; 0x07
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	80 83       	st	Z, r24
    321e:	80 e6       	ldi	r24, 0x60	; 96
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	93 83       	std	Z+3, r25	; 0x03
    3224:	82 83       	std	Z+2, r24	; 0x02
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	9b 81       	ldd	r25, Y+3	; 0x03
    322a:	ac 81       	ldd	r26, Y+4	; 0x04
    322c:	bd 81       	ldd	r27, Y+5	; 0x05
    322e:	84 83       	std	Z+4, r24	; 0x04
    3230:	95 83       	std	Z+5, r25	; 0x05
    3232:	a6 83       	std	Z+6, r26	; 0x06
    3234:	b7 83       	std	Z+7, r27	; 0x07
    3236:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <sprintf>
    323a:	8d b7       	in	r24, 0x3d	; 61
    323c:	9e b7       	in	r25, 0x3e	; 62
    323e:	08 96       	adiw	r24, 0x08	; 8
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	9e bf       	out	0x3e, r25	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	8d bf       	out	0x3d, r24	; 61
    }
    return ret;
    324a:	89 81       	ldd	r24, Y+1	; 0x01
}
    324c:	27 96       	adiw	r28, 0x07	; 7
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	cd bf       	out	0x3d, r28	; 61
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <lcd_send_4bits>:


static Std_ReturnType lcd_send_4bits(const chr_lcd_4bit_t *lcd, uint8 _data_command){
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	00 d0       	rcall	.+0      	; 0x3264 <lcd_send_4bits+0x6>
    3264:	00 d0       	rcall	.+0      	; 0x3266 <lcd_send_4bits+0x8>
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	9b 83       	std	Y+3, r25	; 0x03
    326c:	8a 83       	std	Y+2, r24	; 0x02
    326e:	6c 83       	std	Y+4, r22	; 0x04
    Std_ReturnType ret = E_OK;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	89 83       	std	Y+1, r24	; 0x01
    ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	9c 01       	movw	r18, r24
    327a:	2e 5f       	subi	r18, 0xFE	; 254
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	8c 81       	ldd	r24, Y+4	; 0x04
    3280:	48 2f       	mov	r20, r24
    3282:	41 70       	andi	r20, 0x01	; 1
    3284:	c9 01       	movw	r24, r18
    3286:	64 2f       	mov	r22, r20
    3288:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    328c:	89 83       	std	Y+1, r24	; 0x01
    ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	9b 81       	ldd	r25, Y+3	; 0x03
    3292:	9c 01       	movw	r18, r24
    3294:	2d 5f       	subi	r18, 0xFD	; 253
    3296:	3f 4f       	sbci	r19, 0xFF	; 255
    3298:	8c 81       	ldd	r24, Y+4	; 0x04
    329a:	86 95       	lsr	r24
    329c:	48 2f       	mov	r20, r24
    329e:	41 70       	andi	r20, 0x01	; 1
    32a0:	c9 01       	movw	r24, r18
    32a2:	64 2f       	mov	r22, r20
    32a4:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    32a8:	89 83       	std	Y+1, r24	; 0x01
    ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	9b 81       	ldd	r25, Y+3	; 0x03
    32ae:	9c 01       	movw	r18, r24
    32b0:	2c 5f       	subi	r18, 0xFC	; 252
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	8c 81       	ldd	r24, Y+4	; 0x04
    32b6:	86 95       	lsr	r24
    32b8:	86 95       	lsr	r24
    32ba:	48 2f       	mov	r20, r24
    32bc:	41 70       	andi	r20, 0x01	; 1
    32be:	c9 01       	movw	r24, r18
    32c0:	64 2f       	mov	r22, r20
    32c2:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    32c6:	89 83       	std	Y+1, r24	; 0x01
    ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	9c 01       	movw	r18, r24
    32ce:	2b 5f       	subi	r18, 0xFB	; 251
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	8c 81       	ldd	r24, Y+4	; 0x04
    32d4:	86 95       	lsr	r24
    32d6:	86 95       	lsr	r24
    32d8:	86 95       	lsr	r24
    32da:	48 2f       	mov	r20, r24
    32dc:	41 70       	andi	r20, 0x01	; 1
    32de:	c9 01       	movw	r24, r18
    32e0:	64 2f       	mov	r22, r20
    32e2:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    32e6:	89 83       	std	Y+1, r24	; 0x01
    return ret;
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <lcd_4bit_send_enable_signal>:


static Std_ReturnType lcd_4bit_send_enable_signal(const chr_lcd_4bit_t *lcd){
    32f8:	df 93       	push	r29
    32fa:	cf 93       	push	r28
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	6b 97       	sbiw	r28, 0x1b	; 27
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	9b 8f       	std	Y+27, r25	; 0x1b
    330e:	8a 8f       	std	Y+26, r24	; 0x1a
    Std_ReturnType ret = E_OK;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	89 8f       	std	Y+25, r24	; 0x19
    ret = gpio_pin_write_logic(&(lcd->lcd_en), GPIO_HIGH);
    3314:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3316:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3318:	01 96       	adiw	r24, 0x01	; 1
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    3320:	89 8f       	std	Y+25, r24	; 0x19
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	a0 ea       	ldi	r26, 0xA0	; 160
    3328:	b0 e4       	ldi	r27, 0x40	; 64
    332a:	8d 8b       	std	Y+21, r24	; 0x15
    332c:	9e 8b       	std	Y+22, r25	; 0x16
    332e:	af 8b       	std	Y+23, r26	; 0x17
    3330:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3332:	6d 89       	ldd	r22, Y+21	; 0x15
    3334:	7e 89       	ldd	r23, Y+22	; 0x16
    3336:	8f 89       	ldd	r24, Y+23	; 0x17
    3338:	98 8d       	ldd	r25, Y+24	; 0x18
    333a:	2b ea       	ldi	r18, 0xAB	; 171
    333c:	3a ea       	ldi	r19, 0xAA	; 170
    333e:	4a e2       	ldi	r20, 0x2A	; 42
    3340:	50 e4       	ldi	r21, 0x40	; 64
    3342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	89 8b       	std	Y+17, r24	; 0x11
    334c:	9a 8b       	std	Y+18, r25	; 0x12
    334e:	ab 8b       	std	Y+19, r26	; 0x13
    3350:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3352:	69 89       	ldd	r22, Y+17	; 0x11
    3354:	7a 89       	ldd	r23, Y+18	; 0x12
    3356:	8b 89       	ldd	r24, Y+19	; 0x13
    3358:	9c 89       	ldd	r25, Y+20	; 0x14
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e8       	ldi	r20, 0x80	; 128
    3360:	5f e3       	ldi	r21, 0x3F	; 63
    3362:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3366:	88 23       	and	r24, r24
    3368:	1c f4       	brge	.+6      	; 0x3370 <lcd_4bit_send_enable_signal+0x78>
		__ticks = 1;
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	88 8b       	std	Y+16, r24	; 0x10
    336e:	91 c0       	rjmp	.+290    	; 0x3492 <lcd_4bit_send_enable_signal+0x19a>
	else if (__tmp > 255)
    3370:	69 89       	ldd	r22, Y+17	; 0x11
    3372:	7a 89       	ldd	r23, Y+18	; 0x12
    3374:	8b 89       	ldd	r24, Y+19	; 0x13
    3376:	9c 89       	ldd	r25, Y+20	; 0x14
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	53 e4       	ldi	r21, 0x43	; 67
    3380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	0c f0       	brlt	.+2      	; 0x338a <lcd_4bit_send_enable_signal+0x92>
    3388:	7b c0       	rjmp	.+246    	; 0x3480 <lcd_4bit_send_enable_signal+0x188>
	{
		_delay_ms(__us / 1000.0);
    338a:	6d 89       	ldd	r22, Y+21	; 0x15
    338c:	7e 89       	ldd	r23, Y+22	; 0x16
    338e:	8f 89       	ldd	r24, Y+23	; 0x17
    3390:	98 8d       	ldd	r25, Y+24	; 0x18
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a e7       	ldi	r20, 0x7A	; 122
    3398:	54 e4       	ldi	r21, 0x44	; 68
    339a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8c 87       	std	Y+12, r24	; 0x0c
    33a4:	9d 87       	std	Y+13, r25	; 0x0d
    33a6:	ae 87       	std	Y+14, r26	; 0x0e
    33a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    33ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    33ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    33b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	4a ef       	ldi	r20, 0xFA	; 250
    33b8:	54 e4       	ldi	r21, 0x44	; 68
    33ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	88 87       	std	Y+8, r24	; 0x08
    33c4:	99 87       	std	Y+9, r25	; 0x09
    33c6:	aa 87       	std	Y+10, r26	; 0x0a
    33c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33ca:	68 85       	ldd	r22, Y+8	; 0x08
    33cc:	79 85       	ldd	r23, Y+9	; 0x09
    33ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    33d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	40 e8       	ldi	r20, 0x80	; 128
    33d8:	5f e3       	ldi	r21, 0x3F	; 63
    33da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33de:	88 23       	and	r24, r24
    33e0:	2c f4       	brge	.+10     	; 0x33ec <lcd_4bit_send_enable_signal+0xf4>
		__ticks = 1;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	9f 83       	std	Y+7, r25	; 0x07
    33e8:	8e 83       	std	Y+6, r24	; 0x06
    33ea:	3f c0       	rjmp	.+126    	; 0x346a <lcd_4bit_send_enable_signal+0x172>
	else if (__tmp > 65535)
    33ec:	68 85       	ldd	r22, Y+8	; 0x08
    33ee:	79 85       	ldd	r23, Y+9	; 0x09
    33f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	3f ef       	ldi	r19, 0xFF	; 255
    33f8:	4f e7       	ldi	r20, 0x7F	; 127
    33fa:	57 e4       	ldi	r21, 0x47	; 71
    33fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3400:	18 16       	cp	r1, r24
    3402:	4c f5       	brge	.+82     	; 0x3456 <lcd_4bit_send_enable_signal+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3404:	6c 85       	ldd	r22, Y+12	; 0x0c
    3406:	7d 85       	ldd	r23, Y+13	; 0x0d
    3408:	8e 85       	ldd	r24, Y+14	; 0x0e
    340a:	9f 85       	ldd	r25, Y+15	; 0x0f
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 e2       	ldi	r20, 0x20	; 32
    3412:	51 e4       	ldi	r21, 0x41	; 65
    3414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	9f 83       	std	Y+7, r25	; 0x07
    342a:	8e 83       	std	Y+6, r24	; 0x06
    342c:	0f c0       	rjmp	.+30     	; 0x344c <lcd_4bit_send_enable_signal+0x154>
    342e:	88 ec       	ldi	r24, 0xC8	; 200
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9d 83       	std	Y+5, r25	; 0x05
    3434:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3436:	8c 81       	ldd	r24, Y+4	; 0x04
    3438:	9d 81       	ldd	r25, Y+5	; 0x05
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <lcd_4bit_send_enable_signal+0x142>
    343e:	9d 83       	std	Y+5, r25	; 0x05
    3440:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3442:	8e 81       	ldd	r24, Y+6	; 0x06
    3444:	9f 81       	ldd	r25, Y+7	; 0x07
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	9f 83       	std	Y+7, r25	; 0x07
    344a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344c:	8e 81       	ldd	r24, Y+6	; 0x06
    344e:	9f 81       	ldd	r25, Y+7	; 0x07
    3450:	00 97       	sbiw	r24, 0x00	; 0
    3452:	69 f7       	brne	.-38     	; 0x342e <lcd_4bit_send_enable_signal+0x136>
    3454:	24 c0       	rjmp	.+72     	; 0x349e <lcd_4bit_send_enable_signal+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3456:	68 85       	ldd	r22, Y+8	; 0x08
    3458:	79 85       	ldd	r23, Y+9	; 0x09
    345a:	8a 85       	ldd	r24, Y+10	; 0x0a
    345c:	9b 85       	ldd	r25, Y+11	; 0x0b
    345e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	9f 83       	std	Y+7, r25	; 0x07
    3468:	8e 83       	std	Y+6, r24	; 0x06
    346a:	8e 81       	ldd	r24, Y+6	; 0x06
    346c:	9f 81       	ldd	r25, Y+7	; 0x07
    346e:	9b 83       	std	Y+3, r25	; 0x03
    3470:	8a 83       	std	Y+2, r24	; 0x02
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <lcd_4bit_send_enable_signal+0x17e>
    347a:	9b 83       	std	Y+3, r25	; 0x03
    347c:	8a 83       	std	Y+2, r24	; 0x02
    347e:	0f c0       	rjmp	.+30     	; 0x349e <lcd_4bit_send_enable_signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3480:	69 89       	ldd	r22, Y+17	; 0x11
    3482:	7a 89       	ldd	r23, Y+18	; 0x12
    3484:	8b 89       	ldd	r24, Y+19	; 0x13
    3486:	9c 89       	ldd	r25, Y+20	; 0x14
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	88 8b       	std	Y+16, r24	; 0x10
    3492:	88 89       	ldd	r24, Y+16	; 0x10
    3494:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	8a 95       	dec	r24
    349a:	f1 f7       	brne	.-4      	; 0x3498 <lcd_4bit_send_enable_signal+0x1a0>
    349c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    ret = gpio_pin_write_logic(&(lcd->lcd_en), GPIO_LOW);
    349e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34a2:	01 96       	adiw	r24, 0x01	; 1
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    34aa:	89 8f       	std	Y+25, r24	; 0x19
    return ret;
    34ac:	89 8d       	ldd	r24, Y+25	; 0x19
}
    34ae:	6b 96       	adiw	r28, 0x1b	; 27
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <lcd_8bit_send_enable_signal>:


static Std_ReturnType lcd_8bit_send_enable_signal(const chr_lcd_8bit_t *lcd){
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	6b 97       	sbiw	r28, 0x1b	; 27
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	9b 8f       	std	Y+27, r25	; 0x1b
    34d6:	8a 8f       	std	Y+26, r24	; 0x1a
    Std_ReturnType ret = E_OK;
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	89 8f       	std	Y+25, r24	; 0x19
    ret = gpio_pin_write_logic(&(lcd->lcd_en), GPIO_HIGH);
    34dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34e0:	01 96       	adiw	r24, 0x01	; 1
    34e2:	61 e0       	ldi	r22, 0x01	; 1
    34e4:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    34e8:	89 8f       	std	Y+25, r24	; 0x19
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	a0 ea       	ldi	r26, 0xA0	; 160
    34f0:	b0 e4       	ldi	r27, 0x40	; 64
    34f2:	8d 8b       	std	Y+21, r24	; 0x15
    34f4:	9e 8b       	std	Y+22, r25	; 0x16
    34f6:	af 8b       	std	Y+23, r26	; 0x17
    34f8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34fa:	6d 89       	ldd	r22, Y+21	; 0x15
    34fc:	7e 89       	ldd	r23, Y+22	; 0x16
    34fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3500:	98 8d       	ldd	r25, Y+24	; 0x18
    3502:	2b ea       	ldi	r18, 0xAB	; 171
    3504:	3a ea       	ldi	r19, 0xAA	; 170
    3506:	4a e2       	ldi	r20, 0x2A	; 42
    3508:	50 e4       	ldi	r21, 0x40	; 64
    350a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	89 8b       	std	Y+17, r24	; 0x11
    3514:	9a 8b       	std	Y+18, r25	; 0x12
    3516:	ab 8b       	std	Y+19, r26	; 0x13
    3518:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    351a:	69 89       	ldd	r22, Y+17	; 0x11
    351c:	7a 89       	ldd	r23, Y+18	; 0x12
    351e:	8b 89       	ldd	r24, Y+19	; 0x13
    3520:	9c 89       	ldd	r25, Y+20	; 0x14
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	40 e8       	ldi	r20, 0x80	; 128
    3528:	5f e3       	ldi	r21, 0x3F	; 63
    352a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    352e:	88 23       	and	r24, r24
    3530:	1c f4       	brge	.+6      	; 0x3538 <lcd_8bit_send_enable_signal+0x78>
		__ticks = 1;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	88 8b       	std	Y+16, r24	; 0x10
    3536:	91 c0       	rjmp	.+290    	; 0x365a <lcd_8bit_send_enable_signal+0x19a>
	else if (__tmp > 255)
    3538:	69 89       	ldd	r22, Y+17	; 0x11
    353a:	7a 89       	ldd	r23, Y+18	; 0x12
    353c:	8b 89       	ldd	r24, Y+19	; 0x13
    353e:	9c 89       	ldd	r25, Y+20	; 0x14
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	4f e7       	ldi	r20, 0x7F	; 127
    3546:	53 e4       	ldi	r21, 0x43	; 67
    3548:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    354c:	18 16       	cp	r1, r24
    354e:	0c f0       	brlt	.+2      	; 0x3552 <lcd_8bit_send_enable_signal+0x92>
    3550:	7b c0       	rjmp	.+246    	; 0x3648 <lcd_8bit_send_enable_signal+0x188>
	{
		_delay_ms(__us / 1000.0);
    3552:	6d 89       	ldd	r22, Y+21	; 0x15
    3554:	7e 89       	ldd	r23, Y+22	; 0x16
    3556:	8f 89       	ldd	r24, Y+23	; 0x17
    3558:	98 8d       	ldd	r25, Y+24	; 0x18
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a e7       	ldi	r20, 0x7A	; 122
    3560:	54 e4       	ldi	r21, 0x44	; 68
    3562:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8c 87       	std	Y+12, r24	; 0x0c
    356c:	9d 87       	std	Y+13, r25	; 0x0d
    356e:	ae 87       	std	Y+14, r26	; 0x0e
    3570:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3572:	6c 85       	ldd	r22, Y+12	; 0x0c
    3574:	7d 85       	ldd	r23, Y+13	; 0x0d
    3576:	8e 85       	ldd	r24, Y+14	; 0x0e
    3578:	9f 85       	ldd	r25, Y+15	; 0x0f
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4a ef       	ldi	r20, 0xFA	; 250
    3580:	54 e4       	ldi	r21, 0x44	; 68
    3582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	88 87       	std	Y+8, r24	; 0x08
    358c:	99 87       	std	Y+9, r25	; 0x09
    358e:	aa 87       	std	Y+10, r26	; 0x0a
    3590:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3592:	68 85       	ldd	r22, Y+8	; 0x08
    3594:	79 85       	ldd	r23, Y+9	; 0x09
    3596:	8a 85       	ldd	r24, Y+10	; 0x0a
    3598:	9b 85       	ldd	r25, Y+11	; 0x0b
    359a:	20 e0       	ldi	r18, 0x00	; 0
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	40 e8       	ldi	r20, 0x80	; 128
    35a0:	5f e3       	ldi	r21, 0x3F	; 63
    35a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <lcd_8bit_send_enable_signal+0xf4>
		__ticks = 1;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9f 83       	std	Y+7, r25	; 0x07
    35b0:	8e 83       	std	Y+6, r24	; 0x06
    35b2:	3f c0       	rjmp	.+126    	; 0x3632 <lcd_8bit_send_enable_signal+0x172>
	else if (__tmp > 65535)
    35b4:	68 85       	ldd	r22, Y+8	; 0x08
    35b6:	79 85       	ldd	r23, Y+9	; 0x09
    35b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	3f ef       	ldi	r19, 0xFF	; 255
    35c0:	4f e7       	ldi	r20, 0x7F	; 127
    35c2:	57 e4       	ldi	r21, 0x47	; 71
    35c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35c8:	18 16       	cp	r1, r24
    35ca:	4c f5       	brge	.+82     	; 0x361e <lcd_8bit_send_enable_signal+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    35ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    35d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e2       	ldi	r20, 0x20	; 32
    35da:	51 e4       	ldi	r21, 0x41	; 65
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9f 83       	std	Y+7, r25	; 0x07
    35f2:	8e 83       	std	Y+6, r24	; 0x06
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <lcd_8bit_send_enable_signal+0x154>
    35f6:	88 ec       	ldi	r24, 0xC8	; 200
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9d 83       	std	Y+5, r25	; 0x05
    35fc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3600:	9d 81       	ldd	r25, Y+5	; 0x05
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <lcd_8bit_send_enable_signal+0x142>
    3606:	9d 83       	std	Y+5, r25	; 0x05
    3608:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	8e 81       	ldd	r24, Y+6	; 0x06
    360c:	9f 81       	ldd	r25, Y+7	; 0x07
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9f 83       	std	Y+7, r25	; 0x07
    3612:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3614:	8e 81       	ldd	r24, Y+6	; 0x06
    3616:	9f 81       	ldd	r25, Y+7	; 0x07
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f7       	brne	.-38     	; 0x35f6 <lcd_8bit_send_enable_signal+0x136>
    361c:	24 c0       	rjmp	.+72     	; 0x3666 <lcd_8bit_send_enable_signal+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	68 85       	ldd	r22, Y+8	; 0x08
    3620:	79 85       	ldd	r23, Y+9	; 0x09
    3622:	8a 85       	ldd	r24, Y+10	; 0x0a
    3624:	9b 85       	ldd	r25, Y+11	; 0x0b
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9f 83       	std	Y+7, r25	; 0x07
    3630:	8e 83       	std	Y+6, r24	; 0x06
    3632:	8e 81       	ldd	r24, Y+6	; 0x06
    3634:	9f 81       	ldd	r25, Y+7	; 0x07
    3636:	9b 83       	std	Y+3, r25	; 0x03
    3638:	8a 83       	std	Y+2, r24	; 0x02
    363a:	8a 81       	ldd	r24, Y+2	; 0x02
    363c:	9b 81       	ldd	r25, Y+3	; 0x03
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <lcd_8bit_send_enable_signal+0x17e>
    3642:	9b 83       	std	Y+3, r25	; 0x03
    3644:	8a 83       	std	Y+2, r24	; 0x02
    3646:	0f c0       	rjmp	.+30     	; 0x3666 <lcd_8bit_send_enable_signal+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3648:	69 89       	ldd	r22, Y+17	; 0x11
    364a:	7a 89       	ldd	r23, Y+18	; 0x12
    364c:	8b 89       	ldd	r24, Y+19	; 0x13
    364e:	9c 89       	ldd	r25, Y+20	; 0x14
    3650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	88 8b       	std	Y+16, r24	; 0x10
    365a:	88 89       	ldd	r24, Y+16	; 0x10
    365c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	8a 95       	dec	r24
    3662:	f1 f7       	brne	.-4      	; 0x3660 <lcd_8bit_send_enable_signal+0x1a0>
    3664:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
    ret = gpio_pin_write_logic(&(lcd->lcd_en), GPIO_LOW);
    3666:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3668:	9b 8d       	ldd	r25, Y+27	; 0x1b
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    3672:	89 8f       	std	Y+25, r24	; 0x19
    return ret;
    3674:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3676:	6b 96       	adiw	r28, 0x1b	; 27
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <lcd_8bit_set_cursor>:


static Std_ReturnType lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd, uint8 row, uint8 coulmn){
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	27 97       	sbiw	r28, 0x07	; 7
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	9b 83       	std	Y+3, r25	; 0x03
    369e:	8a 83       	std	Y+2, r24	; 0x02
    36a0:	6c 83       	std	Y+4, r22	; 0x04
    36a2:	4d 83       	std	Y+5, r20	; 0x05
    Std_ReturnType ret = E_OK;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	89 83       	std	Y+1, r24	; 0x01
    coulmn--;
    36a8:	8d 81       	ldd	r24, Y+5	; 0x05
    36aa:	81 50       	subi	r24, 0x01	; 1
    36ac:	8d 83       	std	Y+5, r24	; 0x05
    switch(row){
    36ae:	8c 81       	ldd	r24, Y+4	; 0x04
    36b0:	28 2f       	mov	r18, r24
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	3f 83       	std	Y+7, r19	; 0x07
    36b6:	2e 83       	std	Y+6, r18	; 0x06
    36b8:	8e 81       	ldd	r24, Y+6	; 0x06
    36ba:	9f 81       	ldd	r25, Y+7	; 0x07
    36bc:	82 30       	cpi	r24, 0x02	; 2
    36be:	91 05       	cpc	r25, r1
    36c0:	01 f1       	breq	.+64     	; 0x3702 <lcd_8bit_set_cursor+0x7a>
    36c2:	2e 81       	ldd	r18, Y+6	; 0x06
    36c4:	3f 81       	ldd	r19, Y+7	; 0x07
    36c6:	23 30       	cpi	r18, 0x03	; 3
    36c8:	31 05       	cpc	r19, r1
    36ca:	34 f4       	brge	.+12     	; 0x36d8 <lcd_8bit_set_cursor+0x50>
    36cc:	8e 81       	ldd	r24, Y+6	; 0x06
    36ce:	9f 81       	ldd	r25, Y+7	; 0x07
    36d0:	81 30       	cpi	r24, 0x01	; 1
    36d2:	91 05       	cpc	r25, r1
    36d4:	61 f0       	breq	.+24     	; 0x36ee <lcd_8bit_set_cursor+0x66>
    36d6:	32 c0       	rjmp	.+100    	; 0x373c <lcd_8bit_set_cursor+0xb4>
    36d8:	2e 81       	ldd	r18, Y+6	; 0x06
    36da:	3f 81       	ldd	r19, Y+7	; 0x07
    36dc:	23 30       	cpi	r18, 0x03	; 3
    36de:	31 05       	cpc	r19, r1
    36e0:	d1 f0       	breq	.+52     	; 0x3716 <lcd_8bit_set_cursor+0x8e>
    36e2:	8e 81       	ldd	r24, Y+6	; 0x06
    36e4:	9f 81       	ldd	r25, Y+7	; 0x07
    36e6:	84 30       	cpi	r24, 0x04	; 4
    36e8:	91 05       	cpc	r25, r1
    36ea:	f9 f0       	breq	.+62     	; 0x372a <lcd_8bit_set_cursor+0xa2>
    36ec:	27 c0       	rjmp	.+78     	; 0x373c <lcd_8bit_set_cursor+0xb4>
        case ROW1 : ret = lcd_8bit_send_command(lcd, (0x80 + coulmn)); break; /* 0x00 -> Decimal : 0  */
    36ee:	8d 81       	ldd	r24, Y+5	; 0x05
    36f0:	28 2f       	mov	r18, r24
    36f2:	20 58       	subi	r18, 0x80	; 128
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	62 2f       	mov	r22, r18
    36fa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	1d c0       	rjmp	.+58     	; 0x373c <lcd_8bit_set_cursor+0xb4>
        case ROW2 : ret = lcd_8bit_send_command(lcd, (0xc0 + coulmn)); break; /* 0x40 -> Decimal : 64 */
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	28 2f       	mov	r18, r24
    3706:	20 54       	subi	r18, 0x40	; 64
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	9b 81       	ldd	r25, Y+3	; 0x03
    370c:	62 2f       	mov	r22, r18
    370e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    3712:	89 83       	std	Y+1, r24	; 0x01
    3714:	13 c0       	rjmp	.+38     	; 0x373c <lcd_8bit_set_cursor+0xb4>
        case ROW3 : ret = lcd_8bit_send_command(lcd, (0x94 + coulmn)); break; /* 0x14 -> Decimal : 20 */
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	28 2f       	mov	r18, r24
    371a:	2c 56       	subi	r18, 0x6C	; 108
    371c:	8a 81       	ldd	r24, Y+2	; 0x02
    371e:	9b 81       	ldd	r25, Y+3	; 0x03
    3720:	62 2f       	mov	r22, r18
    3722:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	09 c0       	rjmp	.+18     	; 0x373c <lcd_8bit_set_cursor+0xb4>
        case ROW4 : ret = lcd_8bit_send_command(lcd, (0xd4 + coulmn)); break; /* 0x54 -> Decimal : 84 */
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	28 2f       	mov	r18, r24
    372e:	2c 52       	subi	r18, 0x2C	; 44
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	9b 81       	ldd	r25, Y+3	; 0x03
    3734:	62 2f       	mov	r22, r18
    3736:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <lcd_8bit_send_command>
    373a:	89 83       	std	Y+1, r24	; 0x01
        default : ;
    }
    return ret;
    373c:	89 81       	ldd	r24, Y+1	; 0x01
}
    373e:	27 96       	adiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	cf 91       	pop	r28
    374c:	df 91       	pop	r29
    374e:	08 95       	ret

00003750 <lcd_4bit_set_cursor>:


static Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn){
    3750:	df 93       	push	r29
    3752:	cf 93       	push	r28
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	27 97       	sbiw	r28, 0x07	; 7
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	9b 83       	std	Y+3, r25	; 0x03
    3766:	8a 83       	std	Y+2, r24	; 0x02
    3768:	6c 83       	std	Y+4, r22	; 0x04
    376a:	4d 83       	std	Y+5, r20	; 0x05
    Std_ReturnType ret = E_OK;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	89 83       	std	Y+1, r24	; 0x01
    coulmn--;
    3770:	8d 81       	ldd	r24, Y+5	; 0x05
    3772:	81 50       	subi	r24, 0x01	; 1
    3774:	8d 83       	std	Y+5, r24	; 0x05
    switch(row){
    3776:	8c 81       	ldd	r24, Y+4	; 0x04
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	3f 83       	std	Y+7, r19	; 0x07
    377e:	2e 83       	std	Y+6, r18	; 0x06
    3780:	8e 81       	ldd	r24, Y+6	; 0x06
    3782:	9f 81       	ldd	r25, Y+7	; 0x07
    3784:	82 30       	cpi	r24, 0x02	; 2
    3786:	91 05       	cpc	r25, r1
    3788:	01 f1       	breq	.+64     	; 0x37ca <lcd_4bit_set_cursor+0x7a>
    378a:	2e 81       	ldd	r18, Y+6	; 0x06
    378c:	3f 81       	ldd	r19, Y+7	; 0x07
    378e:	23 30       	cpi	r18, 0x03	; 3
    3790:	31 05       	cpc	r19, r1
    3792:	34 f4       	brge	.+12     	; 0x37a0 <lcd_4bit_set_cursor+0x50>
    3794:	8e 81       	ldd	r24, Y+6	; 0x06
    3796:	9f 81       	ldd	r25, Y+7	; 0x07
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	91 05       	cpc	r25, r1
    379c:	61 f0       	breq	.+24     	; 0x37b6 <lcd_4bit_set_cursor+0x66>
    379e:	32 c0       	rjmp	.+100    	; 0x3804 <lcd_4bit_set_cursor+0xb4>
    37a0:	2e 81       	ldd	r18, Y+6	; 0x06
    37a2:	3f 81       	ldd	r19, Y+7	; 0x07
    37a4:	23 30       	cpi	r18, 0x03	; 3
    37a6:	31 05       	cpc	r19, r1
    37a8:	d1 f0       	breq	.+52     	; 0x37de <lcd_4bit_set_cursor+0x8e>
    37aa:	8e 81       	ldd	r24, Y+6	; 0x06
    37ac:	9f 81       	ldd	r25, Y+7	; 0x07
    37ae:	84 30       	cpi	r24, 0x04	; 4
    37b0:	91 05       	cpc	r25, r1
    37b2:	f9 f0       	breq	.+62     	; 0x37f2 <lcd_4bit_set_cursor+0xa2>
    37b4:	27 c0       	rjmp	.+78     	; 0x3804 <lcd_4bit_set_cursor+0xb4>
        case ROW1 : ret = lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
    37b6:	8d 81       	ldd	r24, Y+5	; 0x05
    37b8:	28 2f       	mov	r18, r24
    37ba:	20 58       	subi	r18, 0x80	; 128
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	9b 81       	ldd	r25, Y+3	; 0x03
    37c0:	62 2f       	mov	r22, r18
    37c2:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    37c6:	89 83       	std	Y+1, r24	; 0x01
    37c8:	1d c0       	rjmp	.+58     	; 0x3804 <lcd_4bit_set_cursor+0xb4>
        case ROW2 : ret = lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	28 2f       	mov	r18, r24
    37ce:	20 54       	subi	r18, 0x40	; 64
    37d0:	8a 81       	ldd	r24, Y+2	; 0x02
    37d2:	9b 81       	ldd	r25, Y+3	; 0x03
    37d4:	62 2f       	mov	r22, r18
    37d6:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	13 c0       	rjmp	.+38     	; 0x3804 <lcd_4bit_set_cursor+0xb4>
        case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
    37de:	8d 81       	ldd	r24, Y+5	; 0x05
    37e0:	28 2f       	mov	r18, r24
    37e2:	2c 56       	subi	r18, 0x6C	; 108
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	9b 81       	ldd	r25, Y+3	; 0x03
    37e8:	62 2f       	mov	r22, r18
    37ea:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    37ee:	89 83       	std	Y+1, r24	; 0x01
    37f0:	09 c0       	rjmp	.+18     	; 0x3804 <lcd_4bit_set_cursor+0xb4>
        case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	28 2f       	mov	r18, r24
    37f6:	2c 52       	subi	r18, 0x2C	; 44
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	9b 81       	ldd	r25, Y+3	; 0x03
    37fc:	62 2f       	mov	r22, r18
    37fe:	0e 94 3c 13 	call	0x2678	; 0x2678 <lcd_4bit_send_command>
    3802:	89 83       	std	Y+1, r24	; 0x01
        default : ;
    }
    return ret;
    3804:	89 81       	ldd	r24, Y+1	; 0x01
}
    3806:	27 96       	adiw	r28, 0x07	; 7
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <keypad_initialize>:
};



Std_ReturnType keypad_initialize(const keypad_t *keypad_obj)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	00 d0       	rcall	.+0      	; 0x381e <keypad_initialize+0x6>
    381e:	00 d0       	rcall	.+0      	; 0x3820 <keypad_initialize+0x8>
    3820:	0f 92       	push	r0
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	9d 83       	std	Y+5, r25	; 0x05
    3828:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_OK;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 local_row_counter =0;
    382e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 local_col_counter =0;
    3830:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == keypad_obj)
    3832:	8c 81       	ldd	r24, Y+4	; 0x04
    3834:	9d 81       	ldd	r25, Y+5	; 0x05
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	11 f4       	brne	.+4      	; 0x383e <keypad_initialize+0x26>
	{
		ret  = E_NOT_OK ;
    383a:	1b 82       	std	Y+3, r1	; 0x03
    383c:	37 c0       	rjmp	.+110    	; 0x38ac <keypad_initialize+0x94>
	}
	else
	{
		for(local_row_counter = 0 ; local_row_counter < KEYPAD_ROWS ; local_row_counter++)
    383e:	1a 82       	std	Y+2, r1	; 0x02
    3840:	0d c0       	rjmp	.+26     	; 0x385c <keypad_initialize+0x44>
		{
			ret = gpio_pin_intialize(&(keypad_obj->kpd_row_pins[local_row_counter]));
    3842:	2c 81       	ldd	r18, Y+4	; 0x04
    3844:	3d 81       	ldd	r19, Y+5	; 0x05
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	88 2f       	mov	r24, r24
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	82 0f       	add	r24, r18
    384e:	93 1f       	adc	r25, r19
    3850:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    3854:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret  = E_NOT_OK ;
	}
	else
	{
		for(local_row_counter = 0 ; local_row_counter < KEYPAD_ROWS ; local_row_counter++)
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	8f 5f       	subi	r24, 0xFF	; 255
    385a:	8a 83       	std	Y+2, r24	; 0x02
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
    385e:	84 30       	cpi	r24, 0x04	; 4
    3860:	80 f3       	brcs	.-32     	; 0x3842 <keypad_initialize+0x2a>
		{
			ret = gpio_pin_intialize(&(keypad_obj->kpd_row_pins[local_row_counter]));
		}
		for(local_col_counter = 0 ; local_col_counter < KEYPAD_COLUMNS ; local_col_counter++)
    3862:	19 82       	std	Y+1, r1	; 0x01
    3864:	1e c0       	rjmp	.+60     	; 0x38a2 <keypad_initialize+0x8a>
		{
			ret = gpio_pin_intialize(&(keypad_obj->kpd_col_pins[local_col_counter]));
    3866:	8c 81       	ldd	r24, Y+4	; 0x04
    3868:	9d 81       	ldd	r25, Y+5	; 0x05
    386a:	9c 01       	movw	r18, r24
    386c:	2c 5f       	subi	r18, 0xFC	; 252
    386e:	3f 4f       	sbci	r19, 0xFF	; 255
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	82 0f       	add	r24, r18
    3878:	93 1f       	adc	r25, r19
    387a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    387e:	8b 83       	std	Y+3, r24	; 0x03
			ret = gpio_pin_write_logic(&(keypad_obj->kpd_col_pins[local_col_counter]),GPIO_HIGH);
    3880:	8c 81       	ldd	r24, Y+4	; 0x04
    3882:	9d 81       	ldd	r25, Y+5	; 0x05
    3884:	9c 01       	movw	r18, r24
    3886:	2c 5f       	subi	r18, 0xFC	; 252
    3888:	3f 4f       	sbci	r19, 0xFF	; 255
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	88 2f       	mov	r24, r24
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	82 0f       	add	r24, r18
    3892:	93 1f       	adc	r25, r19
    3894:	61 e0       	ldi	r22, 0x01	; 1
    3896:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    389a:	8b 83       	std	Y+3, r24	; 0x03
	{
		for(local_row_counter = 0 ; local_row_counter < KEYPAD_ROWS ; local_row_counter++)
		{
			ret = gpio_pin_intialize(&(keypad_obj->kpd_row_pins[local_row_counter]));
		}
		for(local_col_counter = 0 ; local_col_counter < KEYPAD_COLUMNS ; local_col_counter++)
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	89 83       	std	Y+1, r24	; 0x01
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	84 30       	cpi	r24, 0x04	; 4
    38a6:	f8 f2       	brcs	.-66     	; 0x3866 <keypad_initialize+0x4e>
		{
			ret = gpio_pin_intialize(&(keypad_obj->kpd_col_pins[local_col_counter]));
			ret = gpio_pin_write_logic(&(keypad_obj->kpd_col_pins[local_col_counter]),GPIO_HIGH);
		}
		ret = E_OK;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	8b 83       	std	Y+3, r24	; 0x03
	}
	return ret;
    38ac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <keypad_get_value>:

Std_ReturnType keypad_get_value(const keypad_t *keypad_obj , uint8 *value)
{
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	67 97       	sbiw	r28, 0x17	; 23
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
    38d2:	9d 8b       	std	Y+21, r25	; 0x15
    38d4:	8c 8b       	std	Y+20, r24	; 0x14
    38d6:	7f 8b       	std	Y+23, r23	; 0x17
    38d8:	6e 8b       	std	Y+22, r22	; 0x16
	Std_ReturnType ret = E_OK;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 local_row_counter =0;
    38de:	19 8a       	std	Y+17, r1	; 0x11
	uint8 local_col_counter =0;
    38e0:	18 8a       	std	Y+16, r1	; 0x10
	uint8 local_counter =0;
    38e2:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 logic;

	if((NULL == keypad_obj) || (NULL == value))
    38e4:	8c 89       	ldd	r24, Y+20	; 0x14
    38e6:	9d 89       	ldd	r25, Y+21	; 0x15
    38e8:	00 97       	sbiw	r24, 0x00	; 0
    38ea:	21 f0       	breq	.+8      	; 0x38f4 <keypad_get_value+0x36>
    38ec:	8e 89       	ldd	r24, Y+22	; 0x16
    38ee:	9f 89       	ldd	r25, Y+23	; 0x17
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	11 f4       	brne	.+4      	; 0x38f8 <keypad_get_value+0x3a>
	{
		ret  = E_NOT_OK ;
    38f4:	1a 8a       	std	Y+18, r1	; 0x12
    38f6:	cb c0       	rjmp	.+406    	; 0x3a8e <keypad_get_value+0x1d0>
	}
	else
	{
		for(local_row_counter = 0 ; local_row_counter < KEYPAD_ROWS ; local_row_counter++)
    38f8:	19 8a       	std	Y+17, r1	; 0x11
    38fa:	c3 c0       	rjmp	.+390    	; 0x3a82 <keypad_get_value+0x1c4>
		{
			for(local_counter= 0 ; local_counter < KEYPAD_ROWS ; local_counter++)
    38fc:	1f 86       	std	Y+15, r1	; 0x0f
    38fe:	0e c0       	rjmp	.+28     	; 0x391c <keypad_get_value+0x5e>
			{
				ret = gpio_pin_write_logic(&(keypad_obj->kpd_row_pins[local_counter]) , GPIO_HIGH);
    3900:	2c 89       	ldd	r18, Y+20	; 0x14
    3902:	3d 89       	ldd	r19, Y+21	; 0x15
    3904:	8f 85       	ldd	r24, Y+15	; 0x0f
    3906:	88 2f       	mov	r24, r24
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	82 0f       	add	r24, r18
    390c:	93 1f       	adc	r25, r19
    390e:	61 e0       	ldi	r22, 0x01	; 1
    3910:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    3914:	8a 8b       	std	Y+18, r24	; 0x12
	}
	else
	{
		for(local_row_counter = 0 ; local_row_counter < KEYPAD_ROWS ; local_row_counter++)
		{
			for(local_counter= 0 ; local_counter < KEYPAD_ROWS ; local_counter++)
    3916:	8f 85       	ldd	r24, Y+15	; 0x0f
    3918:	8f 5f       	subi	r24, 0xFF	; 255
    391a:	8f 87       	std	Y+15, r24	; 0x0f
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	84 30       	cpi	r24, 0x04	; 4
    3920:	78 f3       	brcs	.-34     	; 0x3900 <keypad_get_value+0x42>
			{
				ret = gpio_pin_write_logic(&(keypad_obj->kpd_row_pins[local_counter]) , GPIO_HIGH);
			}
			ret = gpio_pin_write_logic(&(keypad_obj->kpd_row_pins[local_row_counter]) , GPIO_LOW);
    3922:	2c 89       	ldd	r18, Y+20	; 0x14
    3924:	3d 89       	ldd	r19, Y+21	; 0x15
    3926:	89 89       	ldd	r24, Y+17	; 0x11
    3928:	88 2f       	mov	r24, r24
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	82 0f       	add	r24, r18
    392e:	93 1f       	adc	r25, r19
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    3936:	8a 8b       	std	Y+18, r24	; 0x12
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	a0 e2       	ldi	r26, 0x20	; 32
    393e:	b1 e4       	ldi	r27, 0x41	; 65
    3940:	8b 87       	std	Y+11, r24	; 0x0b
    3942:	9c 87       	std	Y+12, r25	; 0x0c
    3944:	ad 87       	std	Y+13, r26	; 0x0d
    3946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	6b 85       	ldd	r22, Y+11	; 0x0b
    394a:	7c 85       	ldd	r23, Y+12	; 0x0c
    394c:	8d 85       	ldd	r24, Y+13	; 0x0d
    394e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	4a ef       	ldi	r20, 0xFA	; 250
    3956:	54 e4       	ldi	r21, 0x44	; 68
    3958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8f 83       	std	Y+7, r24	; 0x07
    3962:	98 87       	std	Y+8, r25	; 0x08
    3964:	a9 87       	std	Y+9, r26	; 0x09
    3966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3968:	6f 81       	ldd	r22, Y+7	; 0x07
    396a:	78 85       	ldd	r23, Y+8	; 0x08
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <keypad_get_value+0xcc>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	8d 83       	std	Y+5, r24	; 0x05
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <keypad_get_value+0x14a>
	else if (__tmp > 65535)
    398a:	6f 81       	ldd	r22, Y+7	; 0x07
    398c:	78 85       	ldd	r23, Y+8	; 0x08
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	4c f5       	brge	.+82     	; 0x39f4 <keypad_get_value+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e2       	ldi	r20, 0x20	; 32
    39b0:	51 e4       	ldi	r21, 0x41	; 65
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <keypad_get_value+0x12c>
    39cc:	88 ec       	ldi	r24, 0xC8	; 200
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	9c 83       	std	Y+4, r25	; 0x04
    39d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39d4:	8b 81       	ldd	r24, Y+3	; 0x03
    39d6:	9c 81       	ldd	r25, Y+4	; 0x04
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <keypad_get_value+0x11a>
    39dc:	9c 83       	std	Y+4, r25	; 0x04
    39de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	9e 83       	std	Y+6, r25	; 0x06
    39e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	8d 81       	ldd	r24, Y+5	; 0x05
    39ec:	9e 81       	ldd	r25, Y+6	; 0x06
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	69 f7       	brne	.-38     	; 0x39cc <keypad_get_value+0x10e>
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <keypad_get_value+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9e 83       	std	Y+6, r25	; 0x06
    3a06:	8d 83       	std	Y+5, r24	; 0x05
    3a08:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0c:	9a 83       	std	Y+2, r25	; 0x02
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	89 81       	ldd	r24, Y+1	; 0x01
    3a12:	9a 81       	ldd	r25, Y+2	; 0x02
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <keypad_get_value+0x156>
    3a18:	9a 83       	std	Y+2, r25	; 0x02
    3a1a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			for(local_col_counter=0;local_col_counter<KEYPAD_COLUMNS ; local_col_counter++)
    3a1c:	18 8a       	std	Y+16, r1	; 0x10
    3a1e:	2b c0       	rjmp	.+86     	; 0x3a76 <keypad_get_value+0x1b8>
			{
				ret = gpio_pin_read_logic(&(keypad_obj->kpd_col_pins[local_col_counter]) , &logic);
    3a20:	8c 89       	ldd	r24, Y+20	; 0x14
    3a22:	9d 89       	ldd	r25, Y+21	; 0x15
    3a24:	9c 01       	movw	r18, r24
    3a26:	2c 5f       	subi	r18, 0xFC	; 252
    3a28:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2a:	88 89       	ldd	r24, Y+16	; 0x10
    3a2c:	88 2f       	mov	r24, r24
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	82 0f       	add	r24, r18
    3a32:	93 1f       	adc	r25, r19
    3a34:	9e 01       	movw	r18, r28
    3a36:	2d 5e       	subi	r18, 0xED	; 237
    3a38:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3a:	b9 01       	movw	r22, r18
    3a3c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <gpio_pin_read_logic>
    3a40:	8a 8b       	std	Y+18, r24	; 0x12
				if(GPIO_LOW== logic)
    3a42:	8b 89       	ldd	r24, Y+19	; 0x13
    3a44:	88 23       	and	r24, r24
    3a46:	a1 f4       	brne	.+40     	; 0x3a70 <keypad_get_value+0x1b2>
				{
					*value = button_values[local_row_counter][local_col_counter];
    3a48:	89 89       	ldd	r24, Y+17	; 0x11
    3a4a:	48 2f       	mov	r20, r24
    3a4c:	50 e0       	ldi	r21, 0x00	; 0
    3a4e:	88 89       	ldd	r24, Y+16	; 0x10
    3a50:	28 2f       	mov	r18, r24
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	ca 01       	movw	r24, r20
    3a56:	88 0f       	add	r24, r24
    3a58:	99 1f       	adc	r25, r25
    3a5a:	88 0f       	add	r24, r24
    3a5c:	99 1f       	adc	r25, r25
    3a5e:	82 0f       	add	r24, r18
    3a60:	93 1f       	adc	r25, r19
    3a62:	fc 01       	movw	r30, r24
    3a64:	ed 57       	subi	r30, 0x7D	; 125
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	80 81       	ld	r24, Z
    3a6a:	ee 89       	ldd	r30, Y+22	; 0x16
    3a6c:	ff 89       	ldd	r31, Y+23	; 0x17
    3a6e:	80 83       	st	Z, r24
			{
				ret = gpio_pin_write_logic(&(keypad_obj->kpd_row_pins[local_counter]) , GPIO_HIGH);
			}
			ret = gpio_pin_write_logic(&(keypad_obj->kpd_row_pins[local_row_counter]) , GPIO_LOW);
			_delay_ms(10);
			for(local_col_counter=0;local_col_counter<KEYPAD_COLUMNS ; local_col_counter++)
    3a70:	88 89       	ldd	r24, Y+16	; 0x10
    3a72:	8f 5f       	subi	r24, 0xFF	; 255
    3a74:	88 8b       	std	Y+16, r24	; 0x10
    3a76:	88 89       	ldd	r24, Y+16	; 0x10
    3a78:	84 30       	cpi	r24, 0x04	; 4
    3a7a:	90 f2       	brcs	.-92     	; 0x3a20 <keypad_get_value+0x162>
	{
		ret  = E_NOT_OK ;
	}
	else
	{
		for(local_row_counter = 0 ; local_row_counter < KEYPAD_ROWS ; local_row_counter++)
    3a7c:	89 89       	ldd	r24, Y+17	; 0x11
    3a7e:	8f 5f       	subi	r24, 0xFF	; 255
    3a80:	89 8b       	std	Y+17, r24	; 0x11
    3a82:	89 89       	ldd	r24, Y+17	; 0x11
    3a84:	84 30       	cpi	r24, 0x04	; 4
    3a86:	08 f4       	brcc	.+2      	; 0x3a8a <keypad_get_value+0x1cc>
    3a88:	39 cf       	rjmp	.-398    	; 0x38fc <keypad_get_value+0x3e>
					*value = button_values[local_row_counter][local_col_counter];
				}
			}
		}

		ret = E_OK;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	8a 8b       	std	Y+18, r24	; 0x12
	}
	return ret;
    3a8e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3a90:	67 96       	adiw	r28, 0x17	; 23
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <button_init>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType button_init(const button_t *btn)
{
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <button_init+0x6>
    3aa8:	0f 92       	push	r0
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
    3aae:	9b 83       	std	Y+3, r25	; 0x03
    3ab0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == btn)
    3ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	11 f4       	brne	.+4      	; 0x3ac2 <button_init+0x20>
	{
		ret = E_NOT_OK;
    3abe:	19 82       	std	Y+1, r1	; 0x01
    3ac0:	12 c0       	rjmp	.+36     	; 0x3ae6 <button_init+0x44>
	}
	else
	{
		ret = gpio_pin_intialize(&(btn->btn_pin));
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <gpio_pin_intialize>
    3aca:	89 83       	std	Y+1, r24	; 0x01

		if(PULL_UP_RESISTOR == btn->btn_connection)
    3acc:	ea 81       	ldd	r30, Y+2	; 0x02
    3ace:	fb 81       	ldd	r31, Y+3	; 0x03
    3ad0:	82 81       	ldd	r24, Z+2	; 0x02
    3ad2:	82 30       	cpi	r24, 0x02	; 2
    3ad4:	31 f4       	brne	.+12     	; 0x3ae2 <button_init+0x40>
		{
			ret = gpio_pin_write_logic(&(btn->btn_pin) , GPIO_HIGH);
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    3ada:	61 e0       	ldi	r22, 0x01	; 1
    3adc:	0e 94 44 0c 	call	0x1888	; 0x1888 <gpio_pin_write_logic>
    3ae0:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			/* Nothing */
		}
		ret = E_OK;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <button_read_state>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType button_read_state(const button_t *btn ,button_state_t *btn_state)
{
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	00 d0       	rcall	.+0      	; 0x3afa <button_read_state+0x6>
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <button_read_state+0x8>
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <button_read_state+0xa>
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	8b 83       	std	Y+3, r24	; 0x03
    3b06:	7e 83       	std	Y+6, r23	; 0x06
    3b08:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	89 83       	std	Y+1, r24	; 0x01
	logic_t logic ;
	if((NULL == btn) || (NULL == btn_state))
    3b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b10:	9c 81       	ldd	r25, Y+4	; 0x04
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	21 f0       	breq	.+8      	; 0x3b1e <button_read_state+0x2a>
    3b16:	8d 81       	ldd	r24, Y+5	; 0x05
    3b18:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	11 f4       	brne	.+4      	; 0x3b22 <button_read_state+0x2e>
	{
		ret = E_NOT_OK;
    3b1e:	19 82       	std	Y+1, r1	; 0x01
    3b20:	46 c0       	rjmp	.+140    	; 0x3bae <button_read_state+0xba>
	}
	else
	{
		ret = gpio_pin_read_logic(&(btn->btn_pin) , &logic);
    3b22:	8b 81       	ldd	r24, Y+3	; 0x03
    3b24:	9c 81       	ldd	r25, Y+4	; 0x04
    3b26:	9e 01       	movw	r18, r28
    3b28:	2e 5f       	subi	r18, 0xFE	; 254
    3b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2c:	b9 01       	movw	r22, r18
    3b2e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <gpio_pin_read_logic>
    3b32:	89 83       	std	Y+1, r24	; 0x01

		if(PULL_UP_RESISTOR == btn->btn_connection)
    3b34:	eb 81       	ldd	r30, Y+3	; 0x03
    3b36:	fc 81       	ldd	r31, Y+4	; 0x04
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	82 30       	cpi	r24, 0x02	; 2
    3b3c:	79 f4       	brne	.+30     	; 0x3b5c <button_read_state+0x68>
		{
			if(GPIO_HIGH == logic)
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	81 30       	cpi	r24, 0x01	; 1
    3b42:	29 f4       	brne	.+10     	; 0x3b4e <button_read_state+0x5a>
			{
				*btn_state = BUTTON_RELEASED;
    3b44:	ed 81       	ldd	r30, Y+5	; 0x05
    3b46:	fe 81       	ldd	r31, Y+6	; 0x06
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	80 83       	st	Z, r24
    3b4c:	2e c0       	rjmp	.+92     	; 0x3baa <button_read_state+0xb6>
			}
			else if(GPIO_LOW ==logic)
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	88 23       	and	r24, r24
    3b52:	59 f5       	brne	.+86     	; 0x3baa <button_read_state+0xb6>
			{
				*btn_state = BUTTON_PRESSED;
    3b54:	ed 81       	ldd	r30, Y+5	; 0x05
    3b56:	fe 81       	ldd	r31, Y+6	; 0x06
    3b58:	10 82       	st	Z, r1
    3b5a:	27 c0       	rjmp	.+78     	; 0x3baa <button_read_state+0xb6>
			}
		}
		else if(BUTTON_ACTIVE_HIGH == btn->btn_connection)
    3b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	81 30       	cpi	r24, 0x01	; 1
    3b64:	79 f4       	brne	.+30     	; 0x3b84 <button_read_state+0x90>
		{
			if(GPIO_HIGH == logic)
    3b66:	8a 81       	ldd	r24, Y+2	; 0x02
    3b68:	81 30       	cpi	r24, 0x01	; 1
    3b6a:	21 f4       	brne	.+8      	; 0x3b74 <button_read_state+0x80>
			{
				*btn_state = BUTTON_PRESSED;
    3b6c:	ed 81       	ldd	r30, Y+5	; 0x05
    3b6e:	fe 81       	ldd	r31, Y+6	; 0x06
    3b70:	10 82       	st	Z, r1
    3b72:	1b c0       	rjmp	.+54     	; 0x3baa <button_read_state+0xb6>
			}
			else if(GPIO_LOW ==logic)
    3b74:	8a 81       	ldd	r24, Y+2	; 0x02
    3b76:	88 23       	and	r24, r24
    3b78:	c1 f4       	brne	.+48     	; 0x3baa <button_read_state+0xb6>
			{
				*btn_state = BUTTON_RELEASED;
    3b7a:	ed 81       	ldd	r30, Y+5	; 0x05
    3b7c:	fe 81       	ldd	r31, Y+6	; 0x06
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	80 83       	st	Z, r24
    3b82:	13 c0       	rjmp	.+38     	; 0x3baa <button_read_state+0xb6>
			}
		}
		else if(BUTTON_ACTIVE_LOW == btn->btn_connection)
    3b84:	eb 81       	ldd	r30, Y+3	; 0x03
    3b86:	fc 81       	ldd	r31, Y+4	; 0x04
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	88 23       	and	r24, r24
    3b8c:	71 f4       	brne	.+28     	; 0x3baa <button_read_state+0xb6>
		{
			if(GPIO_HIGH == logic)
    3b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b90:	81 30       	cpi	r24, 0x01	; 1
    3b92:	29 f4       	brne	.+10     	; 0x3b9e <button_read_state+0xaa>
			{
				*btn_state = BUTTON_RELEASED;
    3b94:	ed 81       	ldd	r30, Y+5	; 0x05
    3b96:	fe 81       	ldd	r31, Y+6	; 0x06
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	80 83       	st	Z, r24
    3b9c:	06 c0       	rjmp	.+12     	; 0x3baa <button_read_state+0xb6>
			}
			else if(GPIO_LOW ==logic)
    3b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba0:	88 23       	and	r24, r24
    3ba2:	19 f4       	brne	.+6      	; 0x3baa <button_read_state+0xb6>
			{
				*btn_state = BUTTON_PRESSED;
    3ba4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ba6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ba8:	10 82       	st	Z, r1
		}
		else
		{
			/* Nothing */
		}
		ret = E_OK;
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bb0:	26 96       	adiw	r28, 0x06	; 6
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <main>:

chr_lcd_4bit_t lcd ;


int main(void)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
	components_init();
    3bca:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <components_init>
    3bce:	ff cf       	rjmp	.-2      	; 0x3bce <main+0xc>

00003bd0 <components_init>:
 * @return :
 * 			(E_OK) : The function done successfully
 * 			(E_NOT_OK) : The function has a problem to perform this action
 * */
Std_ReturnType components_init(void)
{
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62

	{
		// lcd initialization
		lcd.lcd_rs.port = PORTC_INDEX;
    3bd8:	80 91 9a 00 	lds	r24, 0x009A
    3bdc:	88 7f       	andi	r24, 0xF8	; 248
    3bde:	82 60       	ori	r24, 0x02	; 2
    3be0:	80 93 9a 00 	sts	0x009A, r24
		lcd.lcd_rs.pin = GPIO_PIN0 ;
    3be4:	80 91 9a 00 	lds	r24, 0x009A
    3be8:	87 7c       	andi	r24, 0xC7	; 199
    3bea:	80 93 9a 00 	sts	0x009A, r24
		lcd.lcd_rs.direction = GPIO_DIRECTION_OUTPUT;
    3bee:	80 91 9a 00 	lds	r24, 0x009A
    3bf2:	80 64       	ori	r24, 0x40	; 64
    3bf4:	80 93 9a 00 	sts	0x009A, r24
		lcd.lcd_rs.logic = GPIO_LOW;
    3bf8:	80 91 9a 00 	lds	r24, 0x009A
    3bfc:	8f 77       	andi	r24, 0x7F	; 127
    3bfe:	80 93 9a 00 	sts	0x009A, r24

		lcd.lcd_en.port = PORTC_INDEX;
    3c02:	80 91 9b 00 	lds	r24, 0x009B
    3c06:	88 7f       	andi	r24, 0xF8	; 248
    3c08:	82 60       	ori	r24, 0x02	; 2
    3c0a:	80 93 9b 00 	sts	0x009B, r24
		lcd.lcd_en.pin = GPIO_PIN1 ;
    3c0e:	80 91 9b 00 	lds	r24, 0x009B
    3c12:	87 7c       	andi	r24, 0xC7	; 199
    3c14:	88 60       	ori	r24, 0x08	; 8
    3c16:	80 93 9b 00 	sts	0x009B, r24
		lcd.lcd_en.direction = GPIO_DIRECTION_OUTPUT;
    3c1a:	80 91 9b 00 	lds	r24, 0x009B
    3c1e:	80 64       	ori	r24, 0x40	; 64
    3c20:	80 93 9b 00 	sts	0x009B, r24
		lcd.lcd_en.logic = GPIO_LOW;
    3c24:	80 91 9b 00 	lds	r24, 0x009B
    3c28:	8f 77       	andi	r24, 0x7F	; 127
    3c2a:	80 93 9b 00 	sts	0x009B, r24

		lcd.lcd_data[0].port = PORTC_INDEX ;
    3c2e:	80 91 9c 00 	lds	r24, 0x009C
    3c32:	88 7f       	andi	r24, 0xF8	; 248
    3c34:	82 60       	ori	r24, 0x02	; 2
    3c36:	80 93 9c 00 	sts	0x009C, r24
		lcd.lcd_data[0].pin = GPIO_PIN2;
    3c3a:	80 91 9c 00 	lds	r24, 0x009C
    3c3e:	87 7c       	andi	r24, 0xC7	; 199
    3c40:	80 61       	ori	r24, 0x10	; 16
    3c42:	80 93 9c 00 	sts	0x009C, r24
		lcd.lcd_data[0].direction = GPIO_DIRECTION_OUTPUT ;
    3c46:	80 91 9c 00 	lds	r24, 0x009C
    3c4a:	80 64       	ori	r24, 0x40	; 64
    3c4c:	80 93 9c 00 	sts	0x009C, r24
		lcd.lcd_data[0].logic = GPIO_LOW;
    3c50:	80 91 9c 00 	lds	r24, 0x009C
    3c54:	8f 77       	andi	r24, 0x7F	; 127
    3c56:	80 93 9c 00 	sts	0x009C, r24

		lcd.lcd_data[1].port = PORTC_INDEX ;
    3c5a:	80 91 9d 00 	lds	r24, 0x009D
    3c5e:	88 7f       	andi	r24, 0xF8	; 248
    3c60:	82 60       	ori	r24, 0x02	; 2
    3c62:	80 93 9d 00 	sts	0x009D, r24
		lcd.lcd_data[1].pin = GPIO_PIN3;
    3c66:	80 91 9d 00 	lds	r24, 0x009D
    3c6a:	87 7c       	andi	r24, 0xC7	; 199
    3c6c:	88 61       	ori	r24, 0x18	; 24
    3c6e:	80 93 9d 00 	sts	0x009D, r24
		lcd.lcd_data[1].direction = GPIO_DIRECTION_OUTPUT ;
    3c72:	80 91 9d 00 	lds	r24, 0x009D
    3c76:	80 64       	ori	r24, 0x40	; 64
    3c78:	80 93 9d 00 	sts	0x009D, r24
		lcd.lcd_data[1].logic = GPIO_LOW;
    3c7c:	80 91 9d 00 	lds	r24, 0x009D
    3c80:	8f 77       	andi	r24, 0x7F	; 127
    3c82:	80 93 9d 00 	sts	0x009D, r24

		lcd.lcd_data[2].port = PORTC_INDEX ;
    3c86:	80 91 9e 00 	lds	r24, 0x009E
    3c8a:	88 7f       	andi	r24, 0xF8	; 248
    3c8c:	82 60       	ori	r24, 0x02	; 2
    3c8e:	80 93 9e 00 	sts	0x009E, r24
		lcd.lcd_data[2].pin = GPIO_PIN4;
    3c92:	80 91 9e 00 	lds	r24, 0x009E
    3c96:	87 7c       	andi	r24, 0xC7	; 199
    3c98:	80 62       	ori	r24, 0x20	; 32
    3c9a:	80 93 9e 00 	sts	0x009E, r24
		lcd.lcd_data[2].direction = GPIO_DIRECTION_OUTPUT ;
    3c9e:	80 91 9e 00 	lds	r24, 0x009E
    3ca2:	80 64       	ori	r24, 0x40	; 64
    3ca4:	80 93 9e 00 	sts	0x009E, r24
		lcd.lcd_data[2].logic = GPIO_LOW;
    3ca8:	80 91 9e 00 	lds	r24, 0x009E
    3cac:	8f 77       	andi	r24, 0x7F	; 127
    3cae:	80 93 9e 00 	sts	0x009E, r24

		lcd.lcd_data[3].port = PORTC_INDEX ;
    3cb2:	80 91 9f 00 	lds	r24, 0x009F
    3cb6:	88 7f       	andi	r24, 0xF8	; 248
    3cb8:	82 60       	ori	r24, 0x02	; 2
    3cba:	80 93 9f 00 	sts	0x009F, r24
		lcd.lcd_data[3].pin = GPIO_PIN5;
    3cbe:	80 91 9f 00 	lds	r24, 0x009F
    3cc2:	87 7c       	andi	r24, 0xC7	; 199
    3cc4:	88 62       	ori	r24, 0x28	; 40
    3cc6:	80 93 9f 00 	sts	0x009F, r24
		lcd.lcd_data[3].direction = GPIO_DIRECTION_OUTPUT ;
    3cca:	80 91 9f 00 	lds	r24, 0x009F
    3cce:	80 64       	ori	r24, 0x40	; 64
    3cd0:	80 93 9f 00 	sts	0x009F, r24
		lcd.lcd_data[3].logic = GPIO_LOW;
    3cd4:	80 91 9f 00 	lds	r24, 0x009F
    3cd8:	8f 77       	andi	r24, 0x7F	; 127
    3cda:	80 93 9f 00 	sts	0x009F, r24

		lcd_4bit_intialize(&lcd);
    3cde:	8a e9       	ldi	r24, 0x9A	; 154
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	0e 94 25 11 	call	0x224a	; 0x224a <lcd_4bit_intialize>
	}



	return E_OK;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
}
    3ce8:	cf 91       	pop	r28
    3cea:	df 91       	pop	r29
    3cec:	08 95       	ret

00003cee <__prologue_saves__>:
    3cee:	2f 92       	push	r2
    3cf0:	3f 92       	push	r3
    3cf2:	4f 92       	push	r4
    3cf4:	5f 92       	push	r5
    3cf6:	6f 92       	push	r6
    3cf8:	7f 92       	push	r7
    3cfa:	8f 92       	push	r8
    3cfc:	9f 92       	push	r9
    3cfe:	af 92       	push	r10
    3d00:	bf 92       	push	r11
    3d02:	cf 92       	push	r12
    3d04:	df 92       	push	r13
    3d06:	ef 92       	push	r14
    3d08:	ff 92       	push	r15
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
    3d16:	ca 1b       	sub	r28, r26
    3d18:	db 0b       	sbc	r29, r27
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	09 94       	ijmp

00003d26 <__epilogue_restores__>:
    3d26:	2a 88       	ldd	r2, Y+18	; 0x12
    3d28:	39 88       	ldd	r3, Y+17	; 0x11
    3d2a:	48 88       	ldd	r4, Y+16	; 0x10
    3d2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d30:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d32:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d34:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d36:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d38:	b9 84       	ldd	r11, Y+9	; 0x09
    3d3a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d3c:	df 80       	ldd	r13, Y+7	; 0x07
    3d3e:	ee 80       	ldd	r14, Y+6	; 0x06
    3d40:	fd 80       	ldd	r15, Y+5	; 0x05
    3d42:	0c 81       	ldd	r16, Y+4	; 0x04
    3d44:	1b 81       	ldd	r17, Y+3	; 0x03
    3d46:	aa 81       	ldd	r26, Y+2	; 0x02
    3d48:	b9 81       	ldd	r27, Y+1	; 0x01
    3d4a:	ce 0f       	add	r28, r30
    3d4c:	d1 1d       	adc	r29, r1
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61
    3d58:	ed 01       	movw	r28, r26
    3d5a:	08 95       	ret

00003d5c <memset>:
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	01 c0       	rjmp	.+2      	; 0x3d62 <memset+0x6>
    3d60:	6d 93       	st	X+, r22
    3d62:	41 50       	subi	r20, 0x01	; 1
    3d64:	50 40       	sbci	r21, 0x00	; 0
    3d66:	e0 f7       	brcc	.-8      	; 0x3d60 <memset+0x4>
    3d68:	08 95       	ret

00003d6a <sprintf>:
    3d6a:	ae e0       	ldi	r26, 0x0E	; 14
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	eb eb       	ldi	r30, 0xBB	; 187
    3d70:	fe e1       	ldi	r31, 0x1E	; 30
    3d72:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__prologue_saves__+0x1c>
    3d76:	0d 89       	ldd	r16, Y+21	; 0x15
    3d78:	1e 89       	ldd	r17, Y+22	; 0x16
    3d7a:	86 e0       	ldi	r24, 0x06	; 6
    3d7c:	8c 83       	std	Y+4, r24	; 0x04
    3d7e:	1a 83       	std	Y+2, r17	; 0x02
    3d80:	09 83       	std	Y+1, r16	; 0x01
    3d82:	8f ef       	ldi	r24, 0xFF	; 255
    3d84:	9f e7       	ldi	r25, 0x7F	; 127
    3d86:	9e 83       	std	Y+6, r25	; 0x06
    3d88:	8d 83       	std	Y+5, r24	; 0x05
    3d8a:	9e 01       	movw	r18, r28
    3d8c:	27 5e       	subi	r18, 0xE7	; 231
    3d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d90:	ce 01       	movw	r24, r28
    3d92:	01 96       	adiw	r24, 0x01	; 1
    3d94:	6f 89       	ldd	r22, Y+23	; 0x17
    3d96:	78 8d       	ldd	r23, Y+24	; 0x18
    3d98:	a9 01       	movw	r20, r18
    3d9a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <vfprintf>
    3d9e:	2f 81       	ldd	r18, Y+7	; 0x07
    3da0:	38 85       	ldd	r19, Y+8	; 0x08
    3da2:	02 0f       	add	r16, r18
    3da4:	13 1f       	adc	r17, r19
    3da6:	f8 01       	movw	r30, r16
    3da8:	10 82       	st	Z, r1
    3daa:	2e 96       	adiw	r28, 0x0e	; 14
    3dac:	e4 e0       	ldi	r30, 0x04	; 4
    3dae:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <__epilogue_restores__+0x1c>

00003db2 <vfprintf>:
    3db2:	ab e0       	ldi	r26, 0x0B	; 11
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	ef ed       	ldi	r30, 0xDF	; 223
    3db8:	fe e1       	ldi	r31, 0x1E	; 30
    3dba:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__prologue_saves__>
    3dbe:	3c 01       	movw	r6, r24
    3dc0:	2b 01       	movw	r4, r22
    3dc2:	5a 01       	movw	r10, r20
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	17 82       	std	Z+7, r1	; 0x07
    3dc8:	16 82       	std	Z+6, r1	; 0x06
    3dca:	83 81       	ldd	r24, Z+3	; 0x03
    3dcc:	81 fd       	sbrc	r24, 1
    3dce:	03 c0       	rjmp	.+6      	; 0x3dd6 <vfprintf+0x24>
    3dd0:	6f ef       	ldi	r22, 0xFF	; 255
    3dd2:	7f ef       	ldi	r23, 0xFF	; 255
    3dd4:	c6 c1       	rjmp	.+908    	; 0x4162 <vfprintf+0x3b0>
    3dd6:	9a e0       	ldi	r25, 0x0A	; 10
    3dd8:	89 2e       	mov	r8, r25
    3dda:	1e 01       	movw	r2, r28
    3ddc:	08 94       	sec
    3dde:	21 1c       	adc	r2, r1
    3de0:	31 1c       	adc	r3, r1
    3de2:	f3 01       	movw	r30, r6
    3de4:	23 81       	ldd	r18, Z+3	; 0x03
    3de6:	f2 01       	movw	r30, r4
    3de8:	23 fd       	sbrc	r18, 3
    3dea:	85 91       	lpm	r24, Z+
    3dec:	23 ff       	sbrs	r18, 3
    3dee:	81 91       	ld	r24, Z+
    3df0:	2f 01       	movw	r4, r30
    3df2:	88 23       	and	r24, r24
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <vfprintf+0x46>
    3df6:	b2 c1       	rjmp	.+868    	; 0x415c <vfprintf+0x3aa>
    3df8:	85 32       	cpi	r24, 0x25	; 37
    3dfa:	39 f4       	brne	.+14     	; 0x3e0a <vfprintf+0x58>
    3dfc:	23 fd       	sbrc	r18, 3
    3dfe:	85 91       	lpm	r24, Z+
    3e00:	23 ff       	sbrs	r18, 3
    3e02:	81 91       	ld	r24, Z+
    3e04:	2f 01       	movw	r4, r30
    3e06:	85 32       	cpi	r24, 0x25	; 37
    3e08:	29 f4       	brne	.+10     	; 0x3e14 <vfprintf+0x62>
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	b3 01       	movw	r22, r6
    3e0e:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    3e12:	e7 cf       	rjmp	.-50     	; 0x3de2 <vfprintf+0x30>
    3e14:	98 2f       	mov	r25, r24
    3e16:	ff 24       	eor	r15, r15
    3e18:	ee 24       	eor	r14, r14
    3e1a:	99 24       	eor	r9, r9
    3e1c:	ff e1       	ldi	r31, 0x1F	; 31
    3e1e:	ff 15       	cp	r31, r15
    3e20:	d0 f0       	brcs	.+52     	; 0x3e56 <vfprintf+0xa4>
    3e22:	9b 32       	cpi	r25, 0x2B	; 43
    3e24:	69 f0       	breq	.+26     	; 0x3e40 <vfprintf+0x8e>
    3e26:	9c 32       	cpi	r25, 0x2C	; 44
    3e28:	28 f4       	brcc	.+10     	; 0x3e34 <vfprintf+0x82>
    3e2a:	90 32       	cpi	r25, 0x20	; 32
    3e2c:	59 f0       	breq	.+22     	; 0x3e44 <vfprintf+0x92>
    3e2e:	93 32       	cpi	r25, 0x23	; 35
    3e30:	91 f4       	brne	.+36     	; 0x3e56 <vfprintf+0xa4>
    3e32:	0e c0       	rjmp	.+28     	; 0x3e50 <vfprintf+0x9e>
    3e34:	9d 32       	cpi	r25, 0x2D	; 45
    3e36:	49 f0       	breq	.+18     	; 0x3e4a <vfprintf+0x98>
    3e38:	90 33       	cpi	r25, 0x30	; 48
    3e3a:	69 f4       	brne	.+26     	; 0x3e56 <vfprintf+0xa4>
    3e3c:	41 e0       	ldi	r20, 0x01	; 1
    3e3e:	24 c0       	rjmp	.+72     	; 0x3e88 <vfprintf+0xd6>
    3e40:	52 e0       	ldi	r21, 0x02	; 2
    3e42:	f5 2a       	or	r15, r21
    3e44:	84 e0       	ldi	r24, 0x04	; 4
    3e46:	f8 2a       	or	r15, r24
    3e48:	28 c0       	rjmp	.+80     	; 0x3e9a <vfprintf+0xe8>
    3e4a:	98 e0       	ldi	r25, 0x08	; 8
    3e4c:	f9 2a       	or	r15, r25
    3e4e:	25 c0       	rjmp	.+74     	; 0x3e9a <vfprintf+0xe8>
    3e50:	e0 e1       	ldi	r30, 0x10	; 16
    3e52:	fe 2a       	or	r15, r30
    3e54:	22 c0       	rjmp	.+68     	; 0x3e9a <vfprintf+0xe8>
    3e56:	f7 fc       	sbrc	r15, 7
    3e58:	29 c0       	rjmp	.+82     	; 0x3eac <vfprintf+0xfa>
    3e5a:	89 2f       	mov	r24, r25
    3e5c:	80 53       	subi	r24, 0x30	; 48
    3e5e:	8a 30       	cpi	r24, 0x0A	; 10
    3e60:	70 f4       	brcc	.+28     	; 0x3e7e <vfprintf+0xcc>
    3e62:	f6 fe       	sbrs	r15, 6
    3e64:	05 c0       	rjmp	.+10     	; 0x3e70 <vfprintf+0xbe>
    3e66:	98 9c       	mul	r9, r8
    3e68:	90 2c       	mov	r9, r0
    3e6a:	11 24       	eor	r1, r1
    3e6c:	98 0e       	add	r9, r24
    3e6e:	15 c0       	rjmp	.+42     	; 0x3e9a <vfprintf+0xe8>
    3e70:	e8 9c       	mul	r14, r8
    3e72:	e0 2c       	mov	r14, r0
    3e74:	11 24       	eor	r1, r1
    3e76:	e8 0e       	add	r14, r24
    3e78:	f0 e2       	ldi	r31, 0x20	; 32
    3e7a:	ff 2a       	or	r15, r31
    3e7c:	0e c0       	rjmp	.+28     	; 0x3e9a <vfprintf+0xe8>
    3e7e:	9e 32       	cpi	r25, 0x2E	; 46
    3e80:	29 f4       	brne	.+10     	; 0x3e8c <vfprintf+0xda>
    3e82:	f6 fc       	sbrc	r15, 6
    3e84:	6b c1       	rjmp	.+726    	; 0x415c <vfprintf+0x3aa>
    3e86:	40 e4       	ldi	r20, 0x40	; 64
    3e88:	f4 2a       	or	r15, r20
    3e8a:	07 c0       	rjmp	.+14     	; 0x3e9a <vfprintf+0xe8>
    3e8c:	9c 36       	cpi	r25, 0x6C	; 108
    3e8e:	19 f4       	brne	.+6      	; 0x3e96 <vfprintf+0xe4>
    3e90:	50 e8       	ldi	r21, 0x80	; 128
    3e92:	f5 2a       	or	r15, r21
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <vfprintf+0xe8>
    3e96:	98 36       	cpi	r25, 0x68	; 104
    3e98:	49 f4       	brne	.+18     	; 0x3eac <vfprintf+0xfa>
    3e9a:	f2 01       	movw	r30, r4
    3e9c:	23 fd       	sbrc	r18, 3
    3e9e:	95 91       	lpm	r25, Z+
    3ea0:	23 ff       	sbrs	r18, 3
    3ea2:	91 91       	ld	r25, Z+
    3ea4:	2f 01       	movw	r4, r30
    3ea6:	99 23       	and	r25, r25
    3ea8:	09 f0       	breq	.+2      	; 0x3eac <vfprintf+0xfa>
    3eaa:	b8 cf       	rjmp	.-144    	; 0x3e1c <vfprintf+0x6a>
    3eac:	89 2f       	mov	r24, r25
    3eae:	85 54       	subi	r24, 0x45	; 69
    3eb0:	83 30       	cpi	r24, 0x03	; 3
    3eb2:	18 f0       	brcs	.+6      	; 0x3eba <vfprintf+0x108>
    3eb4:	80 52       	subi	r24, 0x20	; 32
    3eb6:	83 30       	cpi	r24, 0x03	; 3
    3eb8:	38 f4       	brcc	.+14     	; 0x3ec8 <vfprintf+0x116>
    3eba:	44 e0       	ldi	r20, 0x04	; 4
    3ebc:	50 e0       	ldi	r21, 0x00	; 0
    3ebe:	a4 0e       	add	r10, r20
    3ec0:	b5 1e       	adc	r11, r21
    3ec2:	5f e3       	ldi	r21, 0x3F	; 63
    3ec4:	59 83       	std	Y+1, r21	; 0x01
    3ec6:	0f c0       	rjmp	.+30     	; 0x3ee6 <vfprintf+0x134>
    3ec8:	93 36       	cpi	r25, 0x63	; 99
    3eca:	31 f0       	breq	.+12     	; 0x3ed8 <vfprintf+0x126>
    3ecc:	93 37       	cpi	r25, 0x73	; 115
    3ece:	79 f0       	breq	.+30     	; 0x3eee <vfprintf+0x13c>
    3ed0:	93 35       	cpi	r25, 0x53	; 83
    3ed2:	09 f0       	breq	.+2      	; 0x3ed6 <vfprintf+0x124>
    3ed4:	56 c0       	rjmp	.+172    	; 0x3f82 <vfprintf+0x1d0>
    3ed6:	20 c0       	rjmp	.+64     	; 0x3f18 <vfprintf+0x166>
    3ed8:	f5 01       	movw	r30, r10
    3eda:	80 81       	ld	r24, Z
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	42 e0       	ldi	r20, 0x02	; 2
    3ee0:	50 e0       	ldi	r21, 0x00	; 0
    3ee2:	a4 0e       	add	r10, r20
    3ee4:	b5 1e       	adc	r11, r21
    3ee6:	61 01       	movw	r12, r2
    3ee8:	01 e0       	ldi	r16, 0x01	; 1
    3eea:	10 e0       	ldi	r17, 0x00	; 0
    3eec:	12 c0       	rjmp	.+36     	; 0x3f12 <vfprintf+0x160>
    3eee:	f5 01       	movw	r30, r10
    3ef0:	c0 80       	ld	r12, Z
    3ef2:	d1 80       	ldd	r13, Z+1	; 0x01
    3ef4:	f6 fc       	sbrc	r15, 6
    3ef6:	03 c0       	rjmp	.+6      	; 0x3efe <vfprintf+0x14c>
    3ef8:	6f ef       	ldi	r22, 0xFF	; 255
    3efa:	7f ef       	ldi	r23, 0xFF	; 255
    3efc:	02 c0       	rjmp	.+4      	; 0x3f02 <vfprintf+0x150>
    3efe:	69 2d       	mov	r22, r9
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	42 e0       	ldi	r20, 0x02	; 2
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	a4 0e       	add	r10, r20
    3f08:	b5 1e       	adc	r11, r21
    3f0a:	c6 01       	movw	r24, r12
    3f0c:	0e 94 c1 20 	call	0x4182	; 0x4182 <strnlen>
    3f10:	8c 01       	movw	r16, r24
    3f12:	5f e7       	ldi	r21, 0x7F	; 127
    3f14:	f5 22       	and	r15, r21
    3f16:	14 c0       	rjmp	.+40     	; 0x3f40 <vfprintf+0x18e>
    3f18:	f5 01       	movw	r30, r10
    3f1a:	c0 80       	ld	r12, Z
    3f1c:	d1 80       	ldd	r13, Z+1	; 0x01
    3f1e:	f6 fc       	sbrc	r15, 6
    3f20:	03 c0       	rjmp	.+6      	; 0x3f28 <vfprintf+0x176>
    3f22:	6f ef       	ldi	r22, 0xFF	; 255
    3f24:	7f ef       	ldi	r23, 0xFF	; 255
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <vfprintf+0x17a>
    3f28:	69 2d       	mov	r22, r9
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	42 e0       	ldi	r20, 0x02	; 2
    3f2e:	50 e0       	ldi	r21, 0x00	; 0
    3f30:	a4 0e       	add	r10, r20
    3f32:	b5 1e       	adc	r11, r21
    3f34:	c6 01       	movw	r24, r12
    3f36:	0e 94 b6 20 	call	0x416c	; 0x416c <strnlen_P>
    3f3a:	8c 01       	movw	r16, r24
    3f3c:	50 e8       	ldi	r21, 0x80	; 128
    3f3e:	f5 2a       	or	r15, r21
    3f40:	f3 fe       	sbrs	r15, 3
    3f42:	07 c0       	rjmp	.+14     	; 0x3f52 <vfprintf+0x1a0>
    3f44:	1a c0       	rjmp	.+52     	; 0x3f7a <vfprintf+0x1c8>
    3f46:	80 e2       	ldi	r24, 0x20	; 32
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	b3 01       	movw	r22, r6
    3f4c:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    3f50:	ea 94       	dec	r14
    3f52:	8e 2d       	mov	r24, r14
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	08 17       	cp	r16, r24
    3f58:	19 07       	cpc	r17, r25
    3f5a:	a8 f3       	brcs	.-22     	; 0x3f46 <vfprintf+0x194>
    3f5c:	0e c0       	rjmp	.+28     	; 0x3f7a <vfprintf+0x1c8>
    3f5e:	f6 01       	movw	r30, r12
    3f60:	f7 fc       	sbrc	r15, 7
    3f62:	85 91       	lpm	r24, Z+
    3f64:	f7 fe       	sbrs	r15, 7
    3f66:	81 91       	ld	r24, Z+
    3f68:	6f 01       	movw	r12, r30
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	b3 01       	movw	r22, r6
    3f6e:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    3f72:	e1 10       	cpse	r14, r1
    3f74:	ea 94       	dec	r14
    3f76:	01 50       	subi	r16, 0x01	; 1
    3f78:	10 40       	sbci	r17, 0x00	; 0
    3f7a:	01 15       	cp	r16, r1
    3f7c:	11 05       	cpc	r17, r1
    3f7e:	79 f7       	brne	.-34     	; 0x3f5e <vfprintf+0x1ac>
    3f80:	ea c0       	rjmp	.+468    	; 0x4156 <vfprintf+0x3a4>
    3f82:	94 36       	cpi	r25, 0x64	; 100
    3f84:	11 f0       	breq	.+4      	; 0x3f8a <vfprintf+0x1d8>
    3f86:	99 36       	cpi	r25, 0x69	; 105
    3f88:	69 f5       	brne	.+90     	; 0x3fe4 <vfprintf+0x232>
    3f8a:	f7 fe       	sbrs	r15, 7
    3f8c:	08 c0       	rjmp	.+16     	; 0x3f9e <vfprintf+0x1ec>
    3f8e:	f5 01       	movw	r30, r10
    3f90:	20 81       	ld	r18, Z
    3f92:	31 81       	ldd	r19, Z+1	; 0x01
    3f94:	42 81       	ldd	r20, Z+2	; 0x02
    3f96:	53 81       	ldd	r21, Z+3	; 0x03
    3f98:	84 e0       	ldi	r24, 0x04	; 4
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	0a c0       	rjmp	.+20     	; 0x3fb2 <vfprintf+0x200>
    3f9e:	f5 01       	movw	r30, r10
    3fa0:	80 81       	ld	r24, Z
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	9c 01       	movw	r18, r24
    3fa6:	44 27       	eor	r20, r20
    3fa8:	37 fd       	sbrc	r19, 7
    3faa:	40 95       	com	r20
    3fac:	54 2f       	mov	r21, r20
    3fae:	82 e0       	ldi	r24, 0x02	; 2
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	a8 0e       	add	r10, r24
    3fb4:	b9 1e       	adc	r11, r25
    3fb6:	9f e6       	ldi	r25, 0x6F	; 111
    3fb8:	f9 22       	and	r15, r25
    3fba:	57 ff       	sbrs	r21, 7
    3fbc:	09 c0       	rjmp	.+18     	; 0x3fd0 <vfprintf+0x21e>
    3fbe:	50 95       	com	r21
    3fc0:	40 95       	com	r20
    3fc2:	30 95       	com	r19
    3fc4:	21 95       	neg	r18
    3fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc8:	4f 4f       	sbci	r20, 0xFF	; 255
    3fca:	5f 4f       	sbci	r21, 0xFF	; 255
    3fcc:	e0 e8       	ldi	r30, 0x80	; 128
    3fce:	fe 2a       	or	r15, r30
    3fd0:	ca 01       	movw	r24, r20
    3fd2:	b9 01       	movw	r22, r18
    3fd4:	a1 01       	movw	r20, r2
    3fd6:	2a e0       	ldi	r18, 0x0A	; 10
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__ultoa_invert>
    3fde:	d8 2e       	mov	r13, r24
    3fe0:	d2 18       	sub	r13, r2
    3fe2:	40 c0       	rjmp	.+128    	; 0x4064 <vfprintf+0x2b2>
    3fe4:	95 37       	cpi	r25, 0x75	; 117
    3fe6:	29 f4       	brne	.+10     	; 0x3ff2 <vfprintf+0x240>
    3fe8:	1f 2d       	mov	r17, r15
    3fea:	1f 7e       	andi	r17, 0xEF	; 239
    3fec:	2a e0       	ldi	r18, 0x0A	; 10
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	1d c0       	rjmp	.+58     	; 0x402c <vfprintf+0x27a>
    3ff2:	1f 2d       	mov	r17, r15
    3ff4:	19 7f       	andi	r17, 0xF9	; 249
    3ff6:	9f 36       	cpi	r25, 0x6F	; 111
    3ff8:	61 f0       	breq	.+24     	; 0x4012 <vfprintf+0x260>
    3ffa:	90 37       	cpi	r25, 0x70	; 112
    3ffc:	20 f4       	brcc	.+8      	; 0x4006 <vfprintf+0x254>
    3ffe:	98 35       	cpi	r25, 0x58	; 88
    4000:	09 f0       	breq	.+2      	; 0x4004 <vfprintf+0x252>
    4002:	ac c0       	rjmp	.+344    	; 0x415c <vfprintf+0x3aa>
    4004:	0f c0       	rjmp	.+30     	; 0x4024 <vfprintf+0x272>
    4006:	90 37       	cpi	r25, 0x70	; 112
    4008:	39 f0       	breq	.+14     	; 0x4018 <vfprintf+0x266>
    400a:	98 37       	cpi	r25, 0x78	; 120
    400c:	09 f0       	breq	.+2      	; 0x4010 <vfprintf+0x25e>
    400e:	a6 c0       	rjmp	.+332    	; 0x415c <vfprintf+0x3aa>
    4010:	04 c0       	rjmp	.+8      	; 0x401a <vfprintf+0x268>
    4012:	28 e0       	ldi	r18, 0x08	; 8
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	0a c0       	rjmp	.+20     	; 0x402c <vfprintf+0x27a>
    4018:	10 61       	ori	r17, 0x10	; 16
    401a:	14 fd       	sbrc	r17, 4
    401c:	14 60       	ori	r17, 0x04	; 4
    401e:	20 e1       	ldi	r18, 0x10	; 16
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	04 c0       	rjmp	.+8      	; 0x402c <vfprintf+0x27a>
    4024:	14 fd       	sbrc	r17, 4
    4026:	16 60       	ori	r17, 0x06	; 6
    4028:	20 e1       	ldi	r18, 0x10	; 16
    402a:	32 e0       	ldi	r19, 0x02	; 2
    402c:	17 ff       	sbrs	r17, 7
    402e:	08 c0       	rjmp	.+16     	; 0x4040 <vfprintf+0x28e>
    4030:	f5 01       	movw	r30, r10
    4032:	60 81       	ld	r22, Z
    4034:	71 81       	ldd	r23, Z+1	; 0x01
    4036:	82 81       	ldd	r24, Z+2	; 0x02
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	44 e0       	ldi	r20, 0x04	; 4
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	08 c0       	rjmp	.+16     	; 0x4050 <vfprintf+0x29e>
    4040:	f5 01       	movw	r30, r10
    4042:	80 81       	ld	r24, Z
    4044:	91 81       	ldd	r25, Z+1	; 0x01
    4046:	bc 01       	movw	r22, r24
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	42 e0       	ldi	r20, 0x02	; 2
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	a4 0e       	add	r10, r20
    4052:	b5 1e       	adc	r11, r21
    4054:	a1 01       	movw	r20, r2
    4056:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__ultoa_invert>
    405a:	d8 2e       	mov	r13, r24
    405c:	d2 18       	sub	r13, r2
    405e:	8f e7       	ldi	r24, 0x7F	; 127
    4060:	f8 2e       	mov	r15, r24
    4062:	f1 22       	and	r15, r17
    4064:	f6 fe       	sbrs	r15, 6
    4066:	0b c0       	rjmp	.+22     	; 0x407e <vfprintf+0x2cc>
    4068:	5e ef       	ldi	r21, 0xFE	; 254
    406a:	f5 22       	and	r15, r21
    406c:	d9 14       	cp	r13, r9
    406e:	38 f4       	brcc	.+14     	; 0x407e <vfprintf+0x2cc>
    4070:	f4 fe       	sbrs	r15, 4
    4072:	07 c0       	rjmp	.+14     	; 0x4082 <vfprintf+0x2d0>
    4074:	f2 fc       	sbrc	r15, 2
    4076:	05 c0       	rjmp	.+10     	; 0x4082 <vfprintf+0x2d0>
    4078:	8f ee       	ldi	r24, 0xEF	; 239
    407a:	f8 22       	and	r15, r24
    407c:	02 c0       	rjmp	.+4      	; 0x4082 <vfprintf+0x2d0>
    407e:	1d 2d       	mov	r17, r13
    4080:	01 c0       	rjmp	.+2      	; 0x4084 <vfprintf+0x2d2>
    4082:	19 2d       	mov	r17, r9
    4084:	f4 fe       	sbrs	r15, 4
    4086:	0d c0       	rjmp	.+26     	; 0x40a2 <vfprintf+0x2f0>
    4088:	fe 01       	movw	r30, r28
    408a:	ed 0d       	add	r30, r13
    408c:	f1 1d       	adc	r31, r1
    408e:	80 81       	ld	r24, Z
    4090:	80 33       	cpi	r24, 0x30	; 48
    4092:	19 f4       	brne	.+6      	; 0x409a <vfprintf+0x2e8>
    4094:	99 ee       	ldi	r25, 0xE9	; 233
    4096:	f9 22       	and	r15, r25
    4098:	08 c0       	rjmp	.+16     	; 0x40aa <vfprintf+0x2f8>
    409a:	1f 5f       	subi	r17, 0xFF	; 255
    409c:	f2 fe       	sbrs	r15, 2
    409e:	05 c0       	rjmp	.+10     	; 0x40aa <vfprintf+0x2f8>
    40a0:	03 c0       	rjmp	.+6      	; 0x40a8 <vfprintf+0x2f6>
    40a2:	8f 2d       	mov	r24, r15
    40a4:	86 78       	andi	r24, 0x86	; 134
    40a6:	09 f0       	breq	.+2      	; 0x40aa <vfprintf+0x2f8>
    40a8:	1f 5f       	subi	r17, 0xFF	; 255
    40aa:	0f 2d       	mov	r16, r15
    40ac:	f3 fc       	sbrc	r15, 3
    40ae:	14 c0       	rjmp	.+40     	; 0x40d8 <vfprintf+0x326>
    40b0:	f0 fe       	sbrs	r15, 0
    40b2:	0f c0       	rjmp	.+30     	; 0x40d2 <vfprintf+0x320>
    40b4:	1e 15       	cp	r17, r14
    40b6:	10 f0       	brcs	.+4      	; 0x40bc <vfprintf+0x30a>
    40b8:	9d 2c       	mov	r9, r13
    40ba:	0b c0       	rjmp	.+22     	; 0x40d2 <vfprintf+0x320>
    40bc:	9d 2c       	mov	r9, r13
    40be:	9e 0c       	add	r9, r14
    40c0:	91 1a       	sub	r9, r17
    40c2:	1e 2d       	mov	r17, r14
    40c4:	06 c0       	rjmp	.+12     	; 0x40d2 <vfprintf+0x320>
    40c6:	80 e2       	ldi	r24, 0x20	; 32
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	b3 01       	movw	r22, r6
    40cc:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    40d0:	1f 5f       	subi	r17, 0xFF	; 255
    40d2:	1e 15       	cp	r17, r14
    40d4:	c0 f3       	brcs	.-16     	; 0x40c6 <vfprintf+0x314>
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <vfprintf+0x32e>
    40d8:	1e 15       	cp	r17, r14
    40da:	10 f4       	brcc	.+4      	; 0x40e0 <vfprintf+0x32e>
    40dc:	e1 1a       	sub	r14, r17
    40de:	01 c0       	rjmp	.+2      	; 0x40e2 <vfprintf+0x330>
    40e0:	ee 24       	eor	r14, r14
    40e2:	04 ff       	sbrs	r16, 4
    40e4:	0f c0       	rjmp	.+30     	; 0x4104 <vfprintf+0x352>
    40e6:	80 e3       	ldi	r24, 0x30	; 48
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	b3 01       	movw	r22, r6
    40ec:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    40f0:	02 ff       	sbrs	r16, 2
    40f2:	1d c0       	rjmp	.+58     	; 0x412e <vfprintf+0x37c>
    40f4:	01 fd       	sbrc	r16, 1
    40f6:	03 c0       	rjmp	.+6      	; 0x40fe <vfprintf+0x34c>
    40f8:	88 e7       	ldi	r24, 0x78	; 120
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	0e c0       	rjmp	.+28     	; 0x411a <vfprintf+0x368>
    40fe:	88 e5       	ldi	r24, 0x58	; 88
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	0b c0       	rjmp	.+22     	; 0x411a <vfprintf+0x368>
    4104:	80 2f       	mov	r24, r16
    4106:	86 78       	andi	r24, 0x86	; 134
    4108:	91 f0       	breq	.+36     	; 0x412e <vfprintf+0x37c>
    410a:	01 ff       	sbrs	r16, 1
    410c:	02 c0       	rjmp	.+4      	; 0x4112 <vfprintf+0x360>
    410e:	8b e2       	ldi	r24, 0x2B	; 43
    4110:	01 c0       	rjmp	.+2      	; 0x4114 <vfprintf+0x362>
    4112:	80 e2       	ldi	r24, 0x20	; 32
    4114:	f7 fc       	sbrc	r15, 7
    4116:	8d e2       	ldi	r24, 0x2D	; 45
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	b3 01       	movw	r22, r6
    411c:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    4120:	06 c0       	rjmp	.+12     	; 0x412e <vfprintf+0x37c>
    4122:	80 e3       	ldi	r24, 0x30	; 48
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	b3 01       	movw	r22, r6
    4128:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    412c:	9a 94       	dec	r9
    412e:	d9 14       	cp	r13, r9
    4130:	c0 f3       	brcs	.-16     	; 0x4122 <vfprintf+0x370>
    4132:	da 94       	dec	r13
    4134:	f1 01       	movw	r30, r2
    4136:	ed 0d       	add	r30, r13
    4138:	f1 1d       	adc	r31, r1
    413a:	80 81       	ld	r24, Z
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	b3 01       	movw	r22, r6
    4140:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    4144:	dd 20       	and	r13, r13
    4146:	a9 f7       	brne	.-22     	; 0x4132 <vfprintf+0x380>
    4148:	06 c0       	rjmp	.+12     	; 0x4156 <vfprintf+0x3a4>
    414a:	80 e2       	ldi	r24, 0x20	; 32
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	b3 01       	movw	r22, r6
    4150:	0e 94 cc 20 	call	0x4198	; 0x4198 <fputc>
    4154:	ea 94       	dec	r14
    4156:	ee 20       	and	r14, r14
    4158:	c1 f7       	brne	.-16     	; 0x414a <vfprintf+0x398>
    415a:	43 ce       	rjmp	.-890    	; 0x3de2 <vfprintf+0x30>
    415c:	f3 01       	movw	r30, r6
    415e:	66 81       	ldd	r22, Z+6	; 0x06
    4160:	77 81       	ldd	r23, Z+7	; 0x07
    4162:	cb 01       	movw	r24, r22
    4164:	2b 96       	adiw	r28, 0x0b	; 11
    4166:	e2 e1       	ldi	r30, 0x12	; 18
    4168:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__epilogue_restores__>

0000416c <strnlen_P>:
    416c:	fc 01       	movw	r30, r24
    416e:	05 90       	lpm	r0, Z+
    4170:	61 50       	subi	r22, 0x01	; 1
    4172:	70 40       	sbci	r23, 0x00	; 0
    4174:	01 10       	cpse	r0, r1
    4176:	d8 f7       	brcc	.-10     	; 0x416e <strnlen_P+0x2>
    4178:	80 95       	com	r24
    417a:	90 95       	com	r25
    417c:	8e 0f       	add	r24, r30
    417e:	9f 1f       	adc	r25, r31
    4180:	08 95       	ret

00004182 <strnlen>:
    4182:	fc 01       	movw	r30, r24
    4184:	61 50       	subi	r22, 0x01	; 1
    4186:	70 40       	sbci	r23, 0x00	; 0
    4188:	01 90       	ld	r0, Z+
    418a:	01 10       	cpse	r0, r1
    418c:	d8 f7       	brcc	.-10     	; 0x4184 <strnlen+0x2>
    418e:	80 95       	com	r24
    4190:	90 95       	com	r25
    4192:	8e 0f       	add	r24, r30
    4194:	9f 1f       	adc	r25, r31
    4196:	08 95       	ret

00004198 <fputc>:
    4198:	0f 93       	push	r16
    419a:	1f 93       	push	r17
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	8c 01       	movw	r16, r24
    41a2:	eb 01       	movw	r28, r22
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	81 ff       	sbrs	r24, 1
    41a8:	1b c0       	rjmp	.+54     	; 0x41e0 <fputc+0x48>
    41aa:	82 ff       	sbrs	r24, 2
    41ac:	0d c0       	rjmp	.+26     	; 0x41c8 <fputc+0x30>
    41ae:	2e 81       	ldd	r18, Y+6	; 0x06
    41b0:	3f 81       	ldd	r19, Y+7	; 0x07
    41b2:	8c 81       	ldd	r24, Y+4	; 0x04
    41b4:	9d 81       	ldd	r25, Y+5	; 0x05
    41b6:	28 17       	cp	r18, r24
    41b8:	39 07       	cpc	r19, r25
    41ba:	64 f4       	brge	.+24     	; 0x41d4 <fputc+0x3c>
    41bc:	e8 81       	ld	r30, Y
    41be:	f9 81       	ldd	r31, Y+1	; 0x01
    41c0:	01 93       	st	Z+, r16
    41c2:	f9 83       	std	Y+1, r31	; 0x01
    41c4:	e8 83       	st	Y, r30
    41c6:	06 c0       	rjmp	.+12     	; 0x41d4 <fputc+0x3c>
    41c8:	e8 85       	ldd	r30, Y+8	; 0x08
    41ca:	f9 85       	ldd	r31, Y+9	; 0x09
    41cc:	80 2f       	mov	r24, r16
    41ce:	09 95       	icall
    41d0:	89 2b       	or	r24, r25
    41d2:	31 f4       	brne	.+12     	; 0x41e0 <fputc+0x48>
    41d4:	8e 81       	ldd	r24, Y+6	; 0x06
    41d6:	9f 81       	ldd	r25, Y+7	; 0x07
    41d8:	01 96       	adiw	r24, 0x01	; 1
    41da:	9f 83       	std	Y+7, r25	; 0x07
    41dc:	8e 83       	std	Y+6, r24	; 0x06
    41de:	02 c0       	rjmp	.+4      	; 0x41e4 <fputc+0x4c>
    41e0:	0f ef       	ldi	r16, 0xFF	; 255
    41e2:	1f ef       	ldi	r17, 0xFF	; 255
    41e4:	c8 01       	movw	r24, r16
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	08 95       	ret

000041f0 <__ultoa_invert>:
    41f0:	fa 01       	movw	r30, r20
    41f2:	aa 27       	eor	r26, r26
    41f4:	28 30       	cpi	r18, 0x08	; 8
    41f6:	51 f1       	breq	.+84     	; 0x424c <__ultoa_invert+0x5c>
    41f8:	20 31       	cpi	r18, 0x10	; 16
    41fa:	81 f1       	breq	.+96     	; 0x425c <__ultoa_invert+0x6c>
    41fc:	e8 94       	clt
    41fe:	6f 93       	push	r22
    4200:	6e 7f       	andi	r22, 0xFE	; 254
    4202:	6e 5f       	subi	r22, 0xFE	; 254
    4204:	7f 4f       	sbci	r23, 0xFF	; 255
    4206:	8f 4f       	sbci	r24, 0xFF	; 255
    4208:	9f 4f       	sbci	r25, 0xFF	; 255
    420a:	af 4f       	sbci	r26, 0xFF	; 255
    420c:	b1 e0       	ldi	r27, 0x01	; 1
    420e:	3e d0       	rcall	.+124    	; 0x428c <__ultoa_invert+0x9c>
    4210:	b4 e0       	ldi	r27, 0x04	; 4
    4212:	3c d0       	rcall	.+120    	; 0x428c <__ultoa_invert+0x9c>
    4214:	67 0f       	add	r22, r23
    4216:	78 1f       	adc	r23, r24
    4218:	89 1f       	adc	r24, r25
    421a:	9a 1f       	adc	r25, r26
    421c:	a1 1d       	adc	r26, r1
    421e:	68 0f       	add	r22, r24
    4220:	79 1f       	adc	r23, r25
    4222:	8a 1f       	adc	r24, r26
    4224:	91 1d       	adc	r25, r1
    4226:	a1 1d       	adc	r26, r1
    4228:	6a 0f       	add	r22, r26
    422a:	71 1d       	adc	r23, r1
    422c:	81 1d       	adc	r24, r1
    422e:	91 1d       	adc	r25, r1
    4230:	a1 1d       	adc	r26, r1
    4232:	20 d0       	rcall	.+64     	; 0x4274 <__ultoa_invert+0x84>
    4234:	09 f4       	brne	.+2      	; 0x4238 <__ultoa_invert+0x48>
    4236:	68 94       	set
    4238:	3f 91       	pop	r19
    423a:	2a e0       	ldi	r18, 0x0A	; 10
    423c:	26 9f       	mul	r18, r22
    423e:	11 24       	eor	r1, r1
    4240:	30 19       	sub	r19, r0
    4242:	30 5d       	subi	r19, 0xD0	; 208
    4244:	31 93       	st	Z+, r19
    4246:	de f6       	brtc	.-74     	; 0x41fe <__ultoa_invert+0xe>
    4248:	cf 01       	movw	r24, r30
    424a:	08 95       	ret
    424c:	46 2f       	mov	r20, r22
    424e:	47 70       	andi	r20, 0x07	; 7
    4250:	40 5d       	subi	r20, 0xD0	; 208
    4252:	41 93       	st	Z+, r20
    4254:	b3 e0       	ldi	r27, 0x03	; 3
    4256:	0f d0       	rcall	.+30     	; 0x4276 <__ultoa_invert+0x86>
    4258:	c9 f7       	brne	.-14     	; 0x424c <__ultoa_invert+0x5c>
    425a:	f6 cf       	rjmp	.-20     	; 0x4248 <__ultoa_invert+0x58>
    425c:	46 2f       	mov	r20, r22
    425e:	4f 70       	andi	r20, 0x0F	; 15
    4260:	40 5d       	subi	r20, 0xD0	; 208
    4262:	4a 33       	cpi	r20, 0x3A	; 58
    4264:	18 f0       	brcs	.+6      	; 0x426c <__ultoa_invert+0x7c>
    4266:	49 5d       	subi	r20, 0xD9	; 217
    4268:	31 fd       	sbrc	r19, 1
    426a:	40 52       	subi	r20, 0x20	; 32
    426c:	41 93       	st	Z+, r20
    426e:	02 d0       	rcall	.+4      	; 0x4274 <__ultoa_invert+0x84>
    4270:	a9 f7       	brne	.-22     	; 0x425c <__ultoa_invert+0x6c>
    4272:	ea cf       	rjmp	.-44     	; 0x4248 <__ultoa_invert+0x58>
    4274:	b4 e0       	ldi	r27, 0x04	; 4
    4276:	a6 95       	lsr	r26
    4278:	97 95       	ror	r25
    427a:	87 95       	ror	r24
    427c:	77 95       	ror	r23
    427e:	67 95       	ror	r22
    4280:	ba 95       	dec	r27
    4282:	c9 f7       	brne	.-14     	; 0x4276 <__ultoa_invert+0x86>
    4284:	00 97       	sbiw	r24, 0x00	; 0
    4286:	61 05       	cpc	r22, r1
    4288:	71 05       	cpc	r23, r1
    428a:	08 95       	ret
    428c:	9b 01       	movw	r18, r22
    428e:	ac 01       	movw	r20, r24
    4290:	0a 2e       	mov	r0, r26
    4292:	06 94       	lsr	r0
    4294:	57 95       	ror	r21
    4296:	47 95       	ror	r20
    4298:	37 95       	ror	r19
    429a:	27 95       	ror	r18
    429c:	ba 95       	dec	r27
    429e:	c9 f7       	brne	.-14     	; 0x4292 <__ultoa_invert+0xa2>
    42a0:	62 0f       	add	r22, r18
    42a2:	73 1f       	adc	r23, r19
    42a4:	84 1f       	adc	r24, r20
    42a6:	95 1f       	adc	r25, r21
    42a8:	a0 1d       	adc	r26, r0
    42aa:	08 95       	ret

000042ac <_exit>:
    42ac:	f8 94       	cli

000042ae <__stop_program>:
    42ae:	ff cf       	rjmp	.-2      	; 0x42ae <__stop_program>
